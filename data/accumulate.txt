Question: Accumulate
Show that both summation and product are instances of a more general function, called accumulate, with the following signature:

def accumulate(combiner, base, n, term):
  """Return the result of combining the first N terms in a sequence.  The
  terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a
  two-argument function.  Treating COMBINER as if it were a binary operator,
  the return value is
      BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)

  >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5
  15
  >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5
  26
  >>> accumulate(add, 11, 0, identity) # 11
  11
  >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2
  25
  >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2
  72
  """
  "*** YOUR CODE HERE ***"


accumulate(combiner, base, n, term) takes the following arguments:

- term and n: the same arguments as in summation and product
- combiner: a two-argument function that specifies how the current term combined with the previously accumulated terms.
- base: value that specifies what value to use to start the accumulation.

For example, accumulate(add, 11, 3, square) is

11 + square(1) + square(2) + square(3)