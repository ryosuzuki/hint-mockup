[
  {
    "diffs": [
      {
        "count": 1, 
        "value": "def product(n, term):\n"
      }, 
      {
        "count": 1, 
        "removed": true, 
        "value": "    total, i = 1, 0\n"
      }, 
      {
        "count": 1, 
        "added": true, 
        "value": "    total, i = 1, 1\n"
      }, 
      {
        "count": 4, 
        "value": "    while i<=n:\n        total *= term(i)\n        i += 1\n    return total"
      }
    ], 
    "code": "def product(n, term):\n    total, i = 1, 0\n    total, i = 1, 1\n    while i<=n:\n        total *= term(i)\n        i += 1\n    return total\n", 
    "afterCode": "def product(n, term):\n    total, i = 1, 1\n    while i<=n:\n        total *= term(i)\n        i += 1\n    return total\nproduct(3, identity)", 
    "log": ">>> product(3, identity) # 1 * 2 * 3\n0\n\n# Error: expected\n#     6\n# but got\n#     0", 
    "addedLine": [
      {
        "line": 2, 
        "code": "    total, i = 1, 1"
      }
    ], 
    "afterAst": [
      {
        "error": true
      }, 
      {
        "Module": {
          "body": [
            {
              "Assign": {
                "targets": [
                  {
                    "Tuple": {
                      "elts": [
                        {
                          "Name": {
                            "ctx": "Store", 
                            "id": "total"
                          }
                        }, 
                        {
                          "Name": {
                            "ctx": "Store", 
                            "id": "i"
                          }
                        }
                      ], 
                      "ctx": "Store"
                    }
                  }
                ], 
                "value": {
                  "Tuple": {
                    "elts": [
                      {
                        "Num": {
                          "n": 1
                        }
                      }, 
                      {
                        "Num": {
                          "n": 1
                        }
                      }
                    ], 
                    "ctx": "Load"
                  }
                }
              }
            }
          ]
        }
      }, 
      {
        "error": true
      }, 
      {
        "Module": {
          "body": [
            {
              "AugAssign": {
                "target": {
                  "Name": {
                    "ctx": "Store", 
                    "id": "total"
                  }
                }, 
                "value": {
                  "Call": {
                    "keywords": [], 
                    "kwargs": null, 
                    "args": [
                      {
                        "Name": {
                          "ctx": "Load", 
                          "id": "i"
                        }
                      }
                    ], 
                    "func": {
                      "Name": {
                        "ctx": "Load", 
                        "id": "term"
                      }
                    }, 
                    "starargs": null
                  }
                }, 
                "op": "Mult"
              }
            }
          ]
        }
      }, 
      {
        "Module": {
          "body": [
            {
              "AugAssign": {
                "target": {
                  "Name": {
                    "ctx": "Store", 
                    "id": "i"
                  }
                }, 
                "value": {
                  "Num": {
                    "n": 1
                  }
                }, 
                "op": "Add"
              }
            }
          ]
        }
      }, 
      {
        "Module": {
          "body": [
            {
              "Return": {
                "value": {
                  "Name": {
                    "ctx": "Load", 
                    "id": "total"
                  }
                }
              }
            }
          ]
        }
      }
    ], 
    "after": "def product(n, term):\n    total, i = 1, 1\n    while i<=n:\n        total *= term(i)\n        i += 1\n    return total", 
    "beforeCode": "def product(n, term):\n    total, i = 1, 0\n    while i<=n:\n        total *= term(i)\n        i += 1\n    return total\nproduct(3, identity)", 
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))", 
    "beforeTraces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "product": [
            "REF", 
            1
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "NameError: name 'identity' is not defined", 
        "func_name": "<module>", 
        "globals": {
          "product": [
            "REF", 
            1
          ]
        }, 
        "stack_locals": [], 
        "line": 7, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "product": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "expected": 6, 
    "afterTraces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "product": [
            "REF", 
            2
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "NameError: name 'identity' is not defined", 
        "func_name": "<module>", 
        "globals": {
          "product": [
            "REF", 
            2
          ]
        }, 
        "stack_locals": [], 
        "line": 7, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "product": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "studentId": 191, 
    "result": 0, 
    "removedLine": [
      {
        "line": 1, 
        "code": "    total, i = 1, 0"
      }
    ], 
    "test": "product(3, identity)", 
    "beforeAst": [
      {
        "error": true
      }, 
      {
        "Module": {
          "body": [
            {
              "Assign": {
                "targets": [
                  {
                    "Tuple": {
                      "elts": [
                        {
                          "Name": {
                            "ctx": "Store", 
                            "id": "total"
                          }
                        }, 
                        {
                          "Name": {
                            "ctx": "Store", 
                            "id": "i"
                          }
                        }
                      ], 
                      "ctx": "Store"
                    }
                  }
                ], 
                "value": {
                  "Tuple": {
                    "elts": [
                      {
                        "Num": {
                          "n": 1
                        }
                      }, 
                      {
                        "Num": {
                          "n": 0
                        }
                      }
                    ], 
                    "ctx": "Load"
                  }
                }
              }
            }
          ]
        }
      }, 
      {
        "error": true
      }, 
      {
        "Module": {
          "body": [
            {
              "AugAssign": {
                "target": {
                  "Name": {
                    "ctx": "Store", 
                    "id": "total"
                  }
                }, 
                "value": {
                  "Call": {
                    "keywords": [], 
                    "kwargs": null, 
                    "args": [
                      {
                        "Name": {
                          "ctx": "Load", 
                          "id": "i"
                        }
                      }
                    ], 
                    "func": {
                      "Name": {
                        "ctx": "Load", 
                        "id": "term"
                      }
                    }, 
                    "starargs": null
                  }
                }, 
                "op": "Mult"
              }
            }
          ]
        }
      }, 
      {
        "Module": {
          "body": [
            {
              "AugAssign": {
                "target": {
                  "Name": {
                    "ctx": "Store", 
                    "id": "i"
                  }
                }, 
                "value": {
                  "Num": {
                    "n": 1
                  }
                }, 
                "op": "Add"
              }
            }
          ]
        }
      }, 
      {
        "Module": {
          "body": [
            {
              "Return": {
                "value": {
                  "Name": {
                    "ctx": "Load", 
                    "id": "total"
                  }
                }
              }
            }
          ]
        }
      }
    ], 
    "removed": [
      1
    ], 
    "id": 0, 
    "added": [
      2
    ], 
    "before": "def product(n, term):\n    total, i = 1, 0\n    while i<=n:\n        total *= term(i)\n        i += 1\n    return total"
  }
]