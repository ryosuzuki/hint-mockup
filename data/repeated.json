[
  {
    "id": 0,
    "studentId": 654,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    fn, i = id, 0\n    while n>0:\n        fn = compose(f, fn)\n    return fn\ndef id(x):\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    fn, i = id, 0\n    while n>0:\n        fn = compose1(f, fn)\n        n -= 1\n    return fn\ndef id(x):\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    fn, i = id, 0\n    while n>0:\n        fn = compose(f, fn)\n        fn = compose1(f, fn)\n        n -= 1\n    return fn\ndef id(x):\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    fn, i = id, 0\n    while n>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        fn = compose(f, fn)\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        fn = compose1(f, fn)\n        n -= 1\n"
      },
      {
        "count": 7,
        "value": "    return fn\ndef id(x):\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        fn = compose1(f, fn)"
      },
      {
        "line": 5,
        "code": "        n -= 1"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        fn = compose(f, fn)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    fn = compose(f, fn)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 1,
    "studentId": 547,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = 1\n    x = f\n    if n==0:\n        return f\n    else:\n        while k<n:\n            x = compose1(x, f)\n            k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    k = 1\n    x = f\n    if n==0:\n        return identity\n    else:\n        while k<n:\n            x = compose1(x, f)\n            k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    k = 1\n    x = f\n    if n==0:\n        return f\n        return identity\n    else:\n        while k<n:\n            x = compose1(x, f)\n            k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    k = 1\n    x = f\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 9,
        "value": "    else:\n        while k<n:\n            x = compose1(x, f)\n            k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 2,
    "studentId": 296,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = f\n    if n==0:\n        return \n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = f\n    if n==0:\n        return \n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = f\n    if n==0:\n        return \n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 11,
        "value": "    a = f\n    if n==0:\n        return \n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 3,
    "studentId": 1028,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n>1:\n        return compose1(repeated(f, n-1), f)\n    elif n==0:\n        return lambda g: g\n    else:\n        f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n>0:\n        return compose1(repeated(f, n-1), f)\n    elif n==0:\n        return lambda g: g\n    else:\n        f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n>1:\n    if n>0:\n        return compose1(repeated(f, n-1), f)\n    elif n==0:\n        return lambda g: g\n    else:\n        f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    if n>1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    if n>0:\n"
      },
      {
        "count": 9,
        "value": "        return compose1(repeated(f, n-1), f)\n    elif n==0:\n        return lambda g: g\n    else:\n        f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    if n>0:"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    if n>1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 4,
    "studentId": 617,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        i = 1\n        while i!=n:\n            x = f(x)\n            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        i = 0\n        while i!=n:\n            x = f(x)\n            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        i = 1\n        i = 0\n        while i!=n:\n            x = f(x)\n            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def h(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        i = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        i = 0\n"
      },
      {
        "count": 9,
        "value": "        while i!=n:\n            x = f(x)\n            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        i = 0"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        i = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 5,
    "studentId": 589,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 6,
    "studentId": 104,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    if n==1:\n        return f(x)\n    i = 0\n    g = f\n    while n-1>i:\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f(x)\n    i = 0\n    g = f\n    while n-1>i:\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    if n==1:\n        return f(x)\n    i = 0\n    g = f\n    while n-1>i:\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 12,
        "value": "    if n==1:\n        return f(x)\n    i = 0\n    g = f\n    while n-1>i:\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 7,
    "studentId": 788,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def func(x, count = n):\n        if count==1:\n            return x\n        else:\n            return func(f(x), count-1)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(x, count = n):\n        if count==0:\n            return x\n        else:\n            return func(f(x), count-1)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func(x, count = n):\n        if count==1:\n        if count==0:\n            return x\n        else:\n            return func(f(x), count-1)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def func(x, count = n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if count==1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        if count==0:\n"
      },
      {
        "count": 8,
        "value": "            return x\n        else:\n            return func(f(x), count-1)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        if count==0:"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        if count==1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 8,
    "studentId": 253,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    func = f\n    def counter(i):\n        if i==0:\n            return func\n        return compose1(func, counter(i-1))\n    return counter(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    func = f\n    def counter(i):\n        if i==0:\n            return identity\n        return compose1(func, counter(i-1))\n    return counter(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    func = f\n    def counter(i):\n        if i==0:\n            return func\n            return identity\n        return compose1(func, counter(i-1))\n    return counter(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    func = f\n    def counter(i):\n        if i==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return func\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 6,
        "value": "        return compose1(func, counter(i-1))\n    return counter(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            return func"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 9,
    "studentId": 307,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def rerun(x):\n        if (n==0):\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))\n    return rerun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def rerun(x):\n        if (n==0):\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))(x)\n    return rerun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def rerun(x):\n        if (n==0):\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))\n            return compose1(f, repeated(f, n-1))(x)\n    return rerun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def rerun(x):\n        if (n==0):\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated(f, n-1))(x)\n"
      },
      {
        "count": 5,
        "value": "    return rerun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return compose1(f, repeated(f, n-1))(x)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x000001A3C6057E18>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x000001A3C6057E18>"
  },
  {
    "id": 10,
    "studentId": 495,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 11,
    "studentId": 653,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)  \n    5\n    )), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i = 2\n        while i<=n:\n            h = compose1(f, f)\n            i += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i = 2\n        h = f\n        while i<=n:\n            h = compose1(h, f)\n            i += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i = 2\n        h = f\n        while i<=n:\n            h = compose1(f, f)\n            h = compose1(h, f)\n            i += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        i = 2\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        h = f\n"
      },
      {
        "count": 1,
        "value": "        while i<=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            h = compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            h = compose1(h, f)\n"
      },
      {
        "count": 6,
        "value": "            i += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7,
      10
    ],
    "removed": [
      9
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        h = f"
      },
      {
        "line": 10,
        "code": "            h = compose1(h, f)"
      }
    ],
    "removedLine": [
      {
        "line": 9,
        "code": "            h = compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 12,
    "studentId": 387,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 13,
    "studentId": 348,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return repeated(f, n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 14,
    "studentId": 451,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 15,
    "studentId": 815,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda num: num\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda num: num\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda num: num\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda num: num\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 16,
    "studentId": 159,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 17,
    "studentId": 446,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    answer = 0\n    def helper(x):\n        i = 0\n        while i<=n:\n            i += 1\n            answer = f(x)\n            x = f(x)\n        return answer\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    answer = 0\n    def helper(x):\n        i = 0\n        while i<=n:\n            i += 1\n            answer = identity(x)\n            x = f(x)\n        return answer\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    answer = 0\n    def helper(x):\n        i = 0\n        while i<=n:\n            i += 1\n            answer = f(x)\n            answer = identity(x)\n            x = f(x)\n        return answer\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    answer = 0\n    def helper(x):\n        i = 0\n        while i<=n:\n            i += 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            answer = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            answer = identity(x)\n"
      },
      {
        "count": 7,
        "value": "            x = f(x)\n        return answer\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "            answer = identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "            answer = f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 18,
    "studentId": 990,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    else:\n        x = compose1(f, f)\n        while n>2:\n            x = compose1(f, x)\n            n -= 1\n        return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        x = compose1(f, f)\n        while n>2:\n            x = compose1(f, x)\n            n -= 1\n        return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return identity\n    else:\n        x = compose1(f, f)\n        while n>2:\n            x = compose1(f, x)\n            n -= 1\n        return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    else:\n        x = compose1(f, f)\n        while n>2:\n            x = compose1(f, x)\n            n -= 1\n        return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 19,
    "studentId": 761,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = f\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = identity\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = f\n    a = identity\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    a = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    a = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 20,
    "studentId": 816,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n>0:\n        return repeated(compose1(f, x), n-1)\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n>0:\n        return compose1(repeated(f, n-1), f)\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n>0:\n        return repeated(compose1(f, x), n-1)\n        return compose1(repeated(f, n-1), f)\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, x), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return repeated(compose1(f, x), n-1)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return repeated(compose1(f,x), n - 1)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 21,
    "studentId": 354,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def composer(x):\n        def repeater(n):\n            if n==1:\n                return f(x)\n            else:\n                return f(repeater(n-1))\n        return repeater(n)\n    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def composer(x):\n        def repeater(n):\n            if n==1:\n                return f(x)\n            else:\n                return f(repeater(n-1))\n        return repeater(n)\n    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def composer(x):\n        def repeater(n):\n            if n==1:\n                return f(x)\n            else:\n                return f(repeater(n-1))\n        return repeater(n)\n    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def composer(x):\n        def repeater(n):\n            if n==1:\n                return f(x)\n            else:\n                return f(repeater(n-1))\n        return repeater(n)\n    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeater\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 22,
    "studentId": 373,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(g, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(g, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(g, f), n-1)\n        return compose1(repeated(g, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(g, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(g, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "        return compose1(repeated(g, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "        return repeated(compose1(g, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 23,
    "studentId": 856,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return \n    g = f\n    while n>1:\n        f, n = compose1(f, g), n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    g = f\n    while n>1:\n        f, n = compose1(f, g), n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    g = f\n    while n>1:\n        f, n = compose1(f, g), n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 9,
        "value": "        return \n    g = f\n    while n>1:\n        f, n = compose1(f, g), n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 24,
    "studentId": 71,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    t = f\n    while n>0:\n        t = compose1(t, f)\n        n -= 1\n    return t\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    t = identity\n    while n>0:\n        t = compose1(t, f)\n        n -= 1\n    return t\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    t = f\n    t = identity\n    while n>0:\n        t = compose1(t, f)\n        n -= 1\n    return t\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    t = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    t = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        t = compose1(t, f)\n        n -= 1\n    return t\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    t = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    t = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 25,
    "studentId": 638,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), identity)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), identity)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(repeated(f, n-1), identity)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return compose1(repeated(f, n-1), identity)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 26,
    "studentId": 334,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 27,
    "studentId": 405,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    counter = n\n    def func(k):\n        if counter==0:\n            return k\n        else:\n            counter -= 1\n            return func(f(k))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    counter = n\n    def func(k):\n        if n==0:\n            return k\n        else:\n            return repeated(f, n-1)(f(k))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    counter = n\n    def func(k):\n        if counter==0:\n        if n==0:\n            return k\n        else:\n            counter -= 1\n            return func(f(k))\n            return repeated(f, n-1)(f(k))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    counter = n\n    def func(k):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if counter==0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        if n==0:\n"
      },
      {
        "count": 2,
        "value": "            return k\n        else:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "            counter -= 1\n            return func(f(k))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return repeated(f, n-1)(f(k))\n"
      },
      {
        "count": 5,
        "value": "    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      9
    ],
    "removed": [
      3,
      7,
      8
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        if n==0:"
      },
      {
        "line": 9,
        "code": "            return repeated(f, n-1)(f(k))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        if counter==0:"
      },
      {
        "line": 7,
        "code": "            counter -= 1"
      },
      {
        "line": 8,
        "code": "            return func(f(k))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in func\n    if counter == 0:\nUnboundLocalError: local variable 'counter' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 28,
    "studentId": 157,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    else:\n        return repeated(compose1(f, f), n-2)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    else:\n        return repeated(compose1(f, f), n-2)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-2)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, f), n-2)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 29,
    "studentId": 401,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = lambda x: f(x)\n    k = 1\n    while k<=n:\n        a = compose1(f, a)\n        k += 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = lambda x: identity(x)\n    k = 1\n    while k<=n:\n        a = compose1(f, a)\n        k += 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = lambda x: f(x)\n    a = lambda x: identity(x)\n    k = 1\n    while k<=n:\n        a = compose1(f, a)\n        k += 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a = lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = lambda x: identity(x)\n"
      },
      {
        "count": 9,
        "value": "    k = 1\n    while k<=n:\n        a = compose1(f, a)\n        k += 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    a = lambda x: identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    a = lambda x: f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 30,
    "studentId": 551,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_helper(g, n, i):\n        if i==n:\n            return g\n        else:\n            return repeated_helper(compose1(g, f), n, i+1)\n    return repeated_helper(identity, n, 1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_helper(g, n, i):\n        if i==n:\n            return g\n        else:\n            return repeated_helper(compose1(g, f), n, i+1)\n    return repeated_helper(identity, n, 0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_helper(g, n, i):\n        if i==n:\n            return g\n        else:\n            return repeated_helper(compose1(g, f), n, i+1)\n    return repeated_helper(identity, n, 1)\n    return repeated_helper(identity, n, 0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_helper(g, n, i):\n        if i==n:\n            return g\n        else:\n            return repeated_helper(compose1(g, f), n, i+1)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return repeated_helper(identity, n, 1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return repeated_helper(identity, n, 0)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "    return repeated_helper(identity, n, 0)"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "    return repeated_helper(identity, n, 1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 31,
    "studentId": 724,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))))))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if n>1:\n            return f(repeated(f, n))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        if n>0:\n            return f(repeated(f, n-1)(x))\n        else:\n            return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        if n>1:\n            return f(repeated(f, n))\n        if n>0:\n            return f(repeated(f, n-1)(x))\n        else:\n            return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def helper(x):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        if n>1:\n            return f(repeated(f, n))\n"
      },
      {
        "count": 4,
        "added": true,
        "value": "        if n>0:\n            return f(repeated(f, n-1)(x))\n        else:\n            return x\n"
      },
      {
        "count": 5,
        "value": "    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5,
      6,
      7
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        if n>0:"
      },
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1)(x))"
      },
      {
        "line": 6,
        "code": "        else:"
      },
      {
        "line": 7,
        "code": "            return x"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        if n>1:"
      },
      {
        "line": 3,
        "code": "            return f(repeated(f, n))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in helper\n    return f(repeated(f,n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 32,
    "studentId": 895,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    count = n\n    g = f\n    while count>0:\n        g = compose1(g, f)\n        count -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    count = n\n    g = identity\n    while count>0:\n        g = compose1(g, f)\n        count -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    count = n\n    g = f\n    g = identity\n    while count>0:\n        g = compose1(g, f)\n        count -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    count = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 8,
        "value": "    while count>0:\n        g = compose1(g, f)\n        count -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 33,
    "studentId": 797,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    if n==0:\n        return identity\n    return repeated(compose1(f, f), n-2)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==1:\n        return f\n    if n==0:\n        return identity\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==1:\n        return f\n    if n==0:\n        return identity\n    return repeated(compose1(f, f), n-2)\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    if n==1:\n        return f\n    if n==0:\n        return identity\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return repeated(compose1(f, f), n-2)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    return repeated(compose1(f, f), n-2)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 34,
    "studentId": 223,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 35,
    "studentId": 106,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-new_fun, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-new_fun, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-new_fun, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    x = 1\n    def new_fun(k):\n        while x<=n:\n            k = f(k)\n            x += 1\n        return k\n    return new_fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def new_fun(k):\n        x = 1\n        while x<=n:\n            k = f(k)\n            x += 1\n        return k\n    return new_fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = 1\n    def new_fun(k):\n        x = 1\n        while x<=n:\n            k = f(k)\n            x += 1\n        return k\n    return new_fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    x = 1\n"
      },
      {
        "count": 1,
        "value": "    def new_fun(k):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        x = 1\n"
      },
      {
        "count": 9,
        "value": "        while x<=n:\n            k = f(k)\n            x += 1\n        return k\n    return new_fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        x = 1"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    x = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in new_fun\n    while x <= n:\nUnboundLocalError: local variable 'x' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 36,
    "studentId": 842,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def repated_helper(x):\n        res = n\n        for i in range(x):\n            res = f(res)\n        return res\n    return repated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repated_helper(x):\n        res = x\n        for i in range(n):\n            res = f(res)\n        return res\n    return repated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repated_helper(x):\n        res = n\n        for i in range(x):\n        res = x\n        for i in range(n):\n            res = f(res)\n        return res\n    return repated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def repated_helper(x):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        res = n\n        for i in range(x):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        res = x\n        for i in range(n):\n"
      },
      {
        "count": 7,
        "value": "            res = f(res)\n        return res\n    return repated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        res = x"
      },
      {
        "line": 5,
        "code": "        for i in range(n):"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        res = n"
      },
      {
        "line": 3,
        "code": "        for i in range(x):"
      }
    ],
    "test": "repeated(triple, 5)",
    "expected": 243,
    "result": 15,
    "log": ">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n15\n\n# Error: expected\n#     243\n# but got\n#     15"
  },
  {
    "id": 37,
    "studentId": 923,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    while n>=0:\n        return compose1(f, repeated(f, n-1))\n    return compose1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    while n>=0:\n        return compose1(f, repeated(f, n-1))\n    return compose1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    while n>=0:\n        return compose1(f, repeated(f, n-1))\n    return compose1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    while n>=0:\n        return compose1(f, repeated(f, n-1))\n    return compose1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 38,
    "studentId": 944,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    h = f\n    for i in range(0, n):\n        h = compose1(h, f)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    h = identity\n    for i in range(0, n):\n        h = compose1(h, f)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    h = f\n    h = identity\n    for i in range(0, n):\n        h = compose1(h, f)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    h = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    h = identity\n"
      },
      {
        "count": 7,
        "value": "    for i in range(0, n):\n        h = compose1(h, f)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    h = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    h = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 39,
    "studentId": 1003,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-u)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose(g, n):\n        def app(x, u = n):\n            if n==0:\n                return x\n            return app(g(x), u-1)\n        return app\n    return compose(f, n)",
    "after": "def repeated(f, n):\n    def compose(g, n):\n        def app(x, u = n):\n            if u==0:\n                return x\n            return app(g(x), u-1)\n        return app\n    return compose(f, n)",
    "code": "def repeated(f, n):\n    def compose(g, n):\n        def app(x, u = n):\n            if n==0:\n            if u==0:\n                return x\n            return app(g(x), u-1)\n        return app\n    return compose(f, n)\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def compose(g, n):\n        def app(x, u = n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            if n==0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            if u==0:\n"
      },
      {
        "count": 4,
        "value": "                return x\n            return app(g(x), u-1)\n        return app\n    return compose(f, n)"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            if u==0:"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            if n==0:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app\n    return app(g(x), u-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app\n    return app(g(x), u-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app\n    return app(g(x), u-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app\n    return app(g(x), u-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app\n    return app(g(x), u-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app\n    return app(g(x), u-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in app\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     8\n# but got\n#     RecursionError"
  },
  {
    "id": 40,
    "studentId": 412,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(LeafConstNode(NameExpressionNode-f)))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    while n>1:\n        f = compose1(f, f)\n        n = n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        f = compose1(g, f)\n        n = n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        f = compose1(f, f)\n        f = compose1(g, f)\n        n = n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "value": "    while n>1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        f = compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        f = compose1(g, f)\n"
      },
      {
        "count": 6,
        "value": "        n = n-1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    g = f"
      },
      {
        "line": 6,
        "code": "        f = compose1(g, f)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "        f = compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 41,
    "studentId": 679,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated_function, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_function(base):\n        trial, total = 1, base\n        while trial<=n:\n            total = f(total)\n            trial = trial+1\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_function(base):\n        trial, total = 1, base\n        while trial<=n:\n            total = f(total)\n            trial = trial+1\n        return total\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_function(base):\n        trial, total = 1, base\n        while trial<=n:\n            total = f(total)\n            trial = trial+1\n        return total\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def repeated_function(base):\n        trial, total = 1, base\n        while trial<=n:\n            total = f(total)\n            trial = trial+1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return total\n"
      },
      {
        "count": 5,
        "value": "    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 6,
        "code": "        return total"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n\n# Error: expected\n#     8\n# but got\n#     "
  },
  {
    "id": 42,
    "studentId": 45,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 0\n    elif n==1:\n        return f\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    elif n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 0\n        return compose1(identity, identity)\n    elif n==1:\n        return f\n    return f(repeated(f, n-1))\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 2,
        "value": "    elif n==1:\n        return f\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      7
    ],
    "removed": [
      2,
      6
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 7,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      },
      {
        "line": 6,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 43,
    "studentId": 220,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n<1:\n        return x\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n<1:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n<1:\n        return x\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n<1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 44,
    "studentId": 791,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = 1\n    g = f\n    while x<=n:\n        g = compose1(f, g)\n        x = x+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    x = 1\n    g = identity\n    while x<=n:\n        g = compose1(f, g)\n        x = x+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = 1\n    g = f\n    g = identity\n    while x<=n:\n        g = compose1(f, g)\n        x = x+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    x = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 8,
        "value": "    while x<=n:\n        g = compose1(f, g)\n        x = x+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 45,
    "studentId": 644,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeat_value(x):\n        a = 1\n        k = f(x)\n        while a<=n:\n            a = a+1\n            k = f(k)\n        return k\n    return repeat_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat_value(x):\n        a = 1\n        k = identity(x)\n        while a<=n:\n            a = a+1\n            k = f(k)\n        return k\n    return repeat_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeat_value(x):\n        a = 1\n        k = f(x)\n        k = identity(x)\n        while a<=n:\n            a = a+1\n            k = f(k)\n        return k\n    return repeat_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def repeat_value(x):\n        a = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        k = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        k = identity(x)\n"
      },
      {
        "count": 9,
        "value": "        while a<=n:\n            a = a+1\n            k = f(k)\n        return k\n    return repeat_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        k = identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        k = f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 46,
    "studentId": 149,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-repeat_help, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-repeat_help, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeat_help, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    counter = 0\n    def repeat_help(x):\n        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return repeat_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat_help(x):\n        counter = 0\n        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return repeat_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    counter = 0\n    def repeat_help(x):\n        counter = 0\n        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return repeat_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    counter = 0\n"
      },
      {
        "count": 1,
        "value": "    def repeat_help(x):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        counter = 0\n"
      },
      {
        "count": 9,
        "value": "        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return repeat_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        counter = 0"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    counter = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeat_help\n    while counter < n:\nUnboundLocalError: local variable 'counter' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 47,
    "studentId": 837,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = n-1\n    b = lambda x: f(x)\n    while a>=1:\n        b = compose1(f, b)\n        a -= 1\n    return b\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = n-1\n    b = lambda x: f(x)\n    while a>=1:\n        b = compose1(f, b)\n        a -= 1\n    return b\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = n-1\n    b = lambda x: f(x)\n    while a>=1:\n        b = compose1(f, b)\n        a -= 1\n    return b\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    a = n-1\n    b = lambda x: f(x)\n    while a>=1:\n        b = compose1(f, b)\n        a -= 1\n    return b\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 48,
    "studentId": 280,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    final = f\n    while n>1:\n        g = final\n        final = compose1(f, g)\n        n -= 1\n    return final\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    final = f\n    while n>1:\n        g = final\n        final = compose1(f, g)\n        n -= 1\n    return final\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    final = f\n    while n>1:\n        g = final\n        final = compose1(f, g)\n        n -= 1\n    return final\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    final = f\n    while n>1:\n        g = final\n        final = compose1(f, g)\n        n -= 1\n    return final\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 49,
    "studentId": 48,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g, n):\n        def h(x):\n            return f(g(x))\n        if n==2:\n            return h\n        else:\n            return compose1(f, h, n-1)\n    return compose1(f, f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g, n):\n        def h(x):\n            return f(g(x))\n        if n==2:\n            return h\n        else:\n            return compose1(f, h, n-1)\n    return compose1(f, f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g, n):\n        def h(x):\n            return f(g(x))\n        if n==2:\n            return h\n        else:\n            return compose1(f, h, n-1)\n    return compose1(f, f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def compose1(f, g, n):\n        def h(x):\n            return f(g(x))\n        if n==2:\n            return h\n        else:\n            return compose1(f, h, n-1)\n    return compose1(f, f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1\n    return compose1(f, h, n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1\n    return compose1(f, h, n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1\n    return compose1(f, h, n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1\n    return compose1(f, h, n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1\n    return compose1(f, h, n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1\n    return compose1(f, h, n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in compose1\n    if n==2:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 50,
    "studentId": 606,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    func, k = f, 1\n    while k<n:\n        func, k = compose1(f, func), k+1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    func, k = f, 1\n    while k<n:\n        func, k = compose1(f, func), k+1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    func, k = f, 1\n    while k<n:\n        func, k = compose1(f, func), k+1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    func, k = f, 1\n    while k<n:\n        func, k = compose1(f, func), k+1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 51,
    "studentId": 536,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def func_app(n):\n        if n==0:\n            return x\n        h = compose1(f, f)\n        while n>=3:\n            h = compose1(h, f)\n            n -= 1\n        return h\n    return func_app(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func_app(n):\n        if n==0:\n            return identity\n        h = compose1(f, f)\n        while n>=3:\n            h = compose1(h, f)\n            n -= 1\n        return h\n    return func_app(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func_app(n):\n        if n==0:\n            return x\n            return identity\n        h = compose1(f, f)\n        while n>=3:\n            h = compose1(h, f)\n            n -= 1\n        return h\n    return func_app(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def func_app(n):\n        if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 10,
        "value": "        h = compose1(f, f)\n        while n>=3:\n            h = compose1(h, f)\n            n -= 1\n        return h\n    return func_app(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in repeated\n    return func_app(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in func_app\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 52,
    "studentId": 13,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    for i in range(1, n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    for i in range(1, n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    for i in range(1, n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    g = f\n    for i in range(1, n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 53,
    "studentId": 912,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in wrapper\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 54,
    "studentId": 450,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        def t(n, x):\n            if n==0:\n                return f(x)\n            return t(n-1, f(x))\n        return t(n, x)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        def t(n, x):\n            if n==0:\n                return identity(x)\n            return t(n-1, f(x))\n        return t(n, x)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        def t(n, x):\n            if n==0:\n                return f(x)\n                return identity(x)\n            return t(n-1, f(x))\n        return t(n, x)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        def t(n, x):\n            if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                return f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                return identity(x)\n"
      },
      {
        "count": 7,
        "value": "            return t(n-1, f(x))\n        return t(n, x)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "                return identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "                return f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 55,
    "studentId": 756,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    ans = f\n    count = 1\n    while count<n:\n        ans = compose1(f, ans)\n        count += 1\n    return ans\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    ans = f\n    count = 1\n    while count<n:\n        ans = compose1(f, ans)\n        count += 1\n    return ans\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    ans = f\n    count = 1\n    while count<n:\n        ans = compose1(f, ans)\n        count += 1\n    return ans\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    ans = f\n    count = 1\n    while count<n:\n        ans = compose1(f, ans)\n        count += 1\n    return ans\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 56,
    "studentId": 439,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        count = 1\n        inner = f\n        while count<n:\n            shell = compose1(f, inner)\n            inner = shell\n            count += 1\n        return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        count = 1\n        inner = f\n        while count<n:\n            shell = compose1(f, inner)\n            inner = shell\n            count += 1\n        return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    else:\n        count = 1\n        inner = f\n        while count<n:\n            shell = compose1(f, inner)\n            inner = shell\n            count += 1\n        return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 12,
        "value": "    else:\n        count = 1\n        inner = f\n        while count<n:\n            shell = compose1(f, inner)\n            inner = shell\n            count += 1\n        return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 57,
    "studentId": 169,
    "rule": "Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    total = 0\n    def helper(x):\n        k = n\n        if k==0:\n            return x\n        else:\n            while k!=0:\n                total = compose1(f, x)\n                x = total\n                k -= 1\n            return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    total = 0\n    def helper(x):\n        k = n\n        if k==0:\n            return x\n        else:\n            while k!=0:\n                total = f(x)\n                x = total\n                k -= 1\n            return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    total = 0\n    def helper(x):\n        k = n\n        if k==0:\n            return x\n        else:\n            while k!=0:\n                total = compose1(f, x)\n                total = f(x)\n                x = total\n                k -= 1\n            return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    total = 0\n    def helper(x):\n        k = n\n        if k==0:\n            return x\n        else:\n            while k!=0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                total = compose1(f, x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                total = f(x)\n"
      },
      {
        "count": 8,
        "value": "                x = total\n                k -= 1\n            return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "                total = f(x)"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "                total = compose1(f, x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x00000273F8483EA0>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x00000273F8483EA0>"
  },
  {
    "id": 58,
    "studentId": 955,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        k = 1\n        while k<n:\n            g = compose(f, g)\n            k += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        k = 1\n        while k<n:\n            g = compose1(f, g)\n            k += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        k = 1\n        while k<n:\n            g = compose(f, g)\n            g = compose1(f, g)\n            k += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 9,
        "value": "def repeated(f, n):\n    g = f\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        k = 1\n        while k<n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            g = compose(f, g)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            g = compose1(f, g)\n"
      },
      {
        "count": 6,
        "value": "            k += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      10
    ],
    "removed": [
      9
    ],
    "addedLine": [
      {
        "line": 10,
        "code": "            g = compose1(f, g)"
      }
    ],
    "removedLine": [
      {
        "line": 9,
        "code": "            g = compose(f, g)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    g = compose(f,g)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 59,
    "studentId": 273,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if (n==0):\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if (n==0):\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if (n==0):\n        return f\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if (n==0):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 60,
    "studentId": 789,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-iterative), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    iterative = 0\n    def h(x):\n        while iterative<n:\n            x = f(x)\n            iterative = iterative+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        iterative = 0\n        while iterative<n:\n            x = f(x)\n            iterative = iterative+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    iterative = 0\n    def h(x):\n        iterative = 0\n        while iterative<n:\n            x = f(x)\n            iterative = iterative+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    iterative = 0\n"
      },
      {
        "count": 1,
        "value": "    def h(x):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        iterative = 0\n"
      },
      {
        "count": 9,
        "value": "        while iterative<n:\n            x = f(x)\n            iterative = iterative+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        iterative = 0"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    iterative = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 49, in h\n    while iterative < n:\nUnboundLocalError: local variable 'iterative' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 61,
    "studentId": 110,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 62,
    "studentId": 572,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        return f(repeated(h, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        return f(repeated(h, n-1)(x))\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(h, n-1)(x))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(h, n-1)(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(h, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(h, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(h, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(h, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(h, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(h, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     8\n# but got\n#     RecursionError"
  },
  {
    "id": 63,
    "studentId": 447,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-change_value, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def change_value(x):\n        if n==0:\n            return x\n        else:\n            while n>0:\n                x = f(x)\n                n -= 1\n        return x\n    return change_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def change_value(x):\n        h = n\n        if h==0:\n            return x\n        else:\n            while h>0:\n                x = f(x)\n                h -= 1\n        return x\n    return change_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def change_value(x):\n        if n==0:\n        h = n\n        if h==0:\n            return x\n        else:\n            while n>0:\n            while h>0:\n                x = f(x)\n                n -= 1\n                h -= 1\n        return x\n    return change_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def change_value(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        h = n\n        if h==0:\n"
      },
      {
        "count": 2,
        "value": "            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            while n>0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            while h>0:\n"
      },
      {
        "count": 1,
        "value": "                x = f(x)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                n -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                h -= 1\n"
      },
      {
        "count": 6,
        "value": "        return x\n    return change_value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      8,
      11
    ],
    "removed": [
      2,
      7,
      10
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        h = n"
      },
      {
        "line": 4,
        "code": "        if h==0:"
      },
      {
        "line": 8,
        "code": "            while h>0:"
      },
      {
        "line": 11,
        "code": "                h -= 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        if n==0:"
      },
      {
        "line": 7,
        "code": "            while n>0:"
      },
      {
        "line": 10,
        "code": "                n -= 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in change_value\n    if n == 0:\nUnboundLocalError: local variable 'n' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 64,
    "studentId": 884,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    g = identity\n    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 65,
    "studentId": 821,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-fn, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    def fn(x):\n        while n>0:\n            x = f(x)\n            n -= 1\n        return x\n    return fn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def fn(x):\n        k = n\n        while k>0:\n            x = f(x)\n            k -= 1\n        return x\n    return fn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def fn(x):\n        while n>0:\n        k = n\n        while k>0:\n            x = f(x)\n            n -= 1\n            k -= 1\n        return x\n    return fn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def fn(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while n>0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        k = n\n        while k>0:\n"
      },
      {
        "count": 1,
        "value": "            x = f(x)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            n -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            k -= 1\n"
      },
      {
        "count": 6,
        "value": "        return x\n    return fn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      7
    ],
    "removed": [
      2,
      6
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        k = n"
      },
      {
        "line": 4,
        "code": "        while k>0:"
      },
      {
        "line": 7,
        "code": "            k -= 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        while n>0:"
      },
      {
        "line": 6,
        "code": "            n -= 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in fn\n    while n > 0:\nUnboundLocalError: local variable 'n' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 66,
    "studentId": 146,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 67,
    "studentId": 376,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 0\n    elif n==1:\n        return f(n)\n    else:\n        i = 2\n        func = compose1(f, f)\n        while i<n:\n            func = compose1(f, func)\n            i += 1\n        return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f(n)\n    else:\n        i = 2\n        func = compose1(f, f)\n        while i<n:\n            func = compose1(f, func)\n            i += 1\n        return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 0\n        return identity\n    elif n==1:\n        return f(n)\n    else:\n        i = 2\n        func = compose1(f, f)\n        while i<n:\n            func = compose1(f, func)\n            i += 1\n        return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 13,
        "value": "    elif n==1:\n        return f(n)\n    else:\n        i = 2\n        func = compose1(f, f)\n        while i<n:\n            func = compose1(f, func)\n            i += 1\n        return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 68,
    "studentId": 431,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return lambda x: compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return lambda x: compose1(f, repeated(f, n-1))(x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return lambda x: compose1(f, repeated(f, n-1))\n        return lambda x: compose1(f, repeated(f, n-1))(x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return lambda x: compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return lambda x: compose1(f, repeated(f, n-1))(x)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return lambda x: compose1(f, repeated(f, n-1))(x)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return lambda x: compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x000001BFEADF7E18>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x000001BFEADF7E18>"
  },
  {
    "id": 69,
    "studentId": 53,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    count = 0\n    g = f\n    while count<n:\n        g = compose1(f, g)\n        count = count+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    count = 0\n    g = identity\n    while count<n:\n        g = compose1(f, g)\n        count = count+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    count = 0\n    g = f\n    g = identity\n    while count<n:\n        g = compose1(f, g)\n        count = count+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    count = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 8,
        "value": "    while count<n:\n        g = compose1(f, g)\n        count = count+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 70,
    "studentId": 194,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return \n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 9,
        "value": "        return \n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 71,
    "studentId": 618,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def fun(a):\n        x = a\n        for i in range(0, a):\n            x = f(x)\n        return x\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def fun(a):\n        x = a\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def fun(a):\n        x = a\n        for i in range(0, a):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def fun(a):\n        x = a\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        for i in range(0, a):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        for i in range(0, n):\n"
      },
      {
        "count": 7,
        "value": "            x = f(x)\n        return x\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        for i in range(0, n):"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        for i in range(0, a):"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 10,
    "log": ">>> add_three(5)\n10\n\n# Error: expected\n#     8\n# but got\n#     10"
  },
  {
    "id": 72,
    "studentId": 670,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-call, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-call, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-call, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(LeafWildcard(\"ParameterNode\")), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-call, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def call(f, n, x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return call\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def call(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return call\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def call(f, n, x):\n    def call(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return call\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    def call(f, n, x):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    def call(x):\n"
      },
      {
        "count": 8,
        "value": "        for i in range(0, n):\n            x = f(x)\n        return x\n    return call\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    def call(x):"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def call(f, n, x):"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: call() missing 2 required positional arguments: 'n' and 'x'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 73,
    "studentId": 587,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n>1:\n        return compose1(f, repeated(f, n-1))\n    elif n==0:\n        return x\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n>1:\n        return compose1(f, repeated(f, n-1))\n    elif n==0:\n        return identity\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n>1:\n        return compose1(f, repeated(f, n-1))\n    elif n==0:\n        return x\n        return identity\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n>1:\n        return compose1(f, repeated(f, n-1))\n    elif n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 74,
    "studentId": 592,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def rep_help(t, k):\n        if k==n:\n            return t\n        t = compose1(f, t)\n        k += 1\n        return rep_help(t, k)\n    return rep_help(f, 0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def rep_help(t, k):\n        if k==n:\n            return t\n        t = compose1(f, t)\n        k += 1\n        return rep_help(t, k)\n    return rep_help(identity, 0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def rep_help(t, k):\n        if k==n:\n            return t\n        t = compose1(f, t)\n        k += 1\n        return rep_help(t, k)\n    return rep_help(f, 0)\n    return rep_help(identity, 0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def rep_help(t, k):\n        if k==n:\n            return t\n        t = compose1(f, t)\n        k += 1\n        return rep_help(t, k)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return rep_help(f, 0)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return rep_help(identity, 0)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "    return rep_help(identity, 0)"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "    return rep_help(f, 0)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 75,
    "studentId": 1002,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def compose1(s, t):\n        def h(x):\n            return s(t(x))\n        return h\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(s, t):\n        def h(x):\n            return s(t(x))\n        return h\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(s, t):\n        def h(x):\n            return s(t(x))\n        return h\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 10,
        "value": "def repeated(f, n):\n    def compose1(s, t):\n        def h(x):\n            return s(t(x))\n        return h\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      11
    ],
    "removed": [
      10
    ],
    "addedLine": [
      {
        "line": 11,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 10,
        "code": "        return repeated(compose(f, f), n-1)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return repeated(compose(f, f), n-1)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 76,
    "studentId": 610,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return f(repeated(f,n-1))                        #doesn't work\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return f(repeated(f,n-1))                        #doesn't work\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 77,
    "studentId": 726,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 78,
    "studentId": 359,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def currying(x):\n        i = 1\n        while i!=n:\n            print(f(x))\n            x = f(x)\n            i += 1\n        return x\n    return currying\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def currying(x):\n        i = 0\n        while i!=n:\n            print(f(x))\n            x = f(x)\n            i += 1\n        return x\n    return currying\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def currying(x):\n        i = 1\n        i = 0\n        while i!=n:\n            print(f(x))\n            x = f(x)\n            i += 1\n        return x\n    return currying\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def currying(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        i = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        i = 0\n"
      },
      {
        "count": 10,
        "value": "        while i!=n:\n            print(f(x))\n            x = f(x)\n            i += 1\n        return x\n    return currying\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        i = 0"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        i = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n7\n7\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 79,
    "studentId": 292,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    while n>=0:\n        if n==0:\n            return lambda x: f(x)\n        else:\n            return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    while n>=0:\n        if n==0:\n            return compose1(identity, identity)\n        else:\n            return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    while n>=0:\n        if n==0:\n            return lambda x: f(x)\n            return compose1(identity, identity)\n        else:\n            return f(repeated(f, n-1))\n            return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    while n>=0:\n        if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      7
    ],
    "removed": [
      3,
      6
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return compose1(identity, identity)"
      },
      {
        "line": 7,
        "code": "            return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return lambda x: f(x)"
      },
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated (f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated (f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated (f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 80,
    "studentId": 568,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        counter = 0\n        while counter!=n:\n            x, i = f(x), counter+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        counter = 0\n        while counter!=n:\n            x, counter = f(x), counter+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        counter = 0\n        while counter!=n:\n            x, i = f(x), counter+1\n            x, counter = f(x), counter+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        counter = 0\n        while counter!=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            x, i = f(x), counter+1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x, counter = f(x), counter+1\n"
      },
      {
        "count": 6,
        "value": "        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x, counter = f(x), counter+1"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            x, i = f(x), counter+1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     8\n# but got\n#     Timeout"
  },
  {
    "id": 81,
    "studentId": 681,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 82,
    "studentId": 498,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n<1:\n        return 0\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n<1:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n<1:\n        return 0\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n<1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 83,
    "studentId": 870,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    function = f\n    if n==0:\n        return identity\n    while n>1:\n        funciton = compose1(funciton, f)\n        n = n-1\n    return funciton\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = f\n    if n==0:\n        return identity\n    while n>1:\n        a = compose1(a, f)\n        n = n-1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    function = f\n    a = f\n    if n==0:\n        return identity\n    while n>1:\n        funciton = compose1(funciton, f)\n        a = compose1(a, f)\n        n = n-1\n    return funciton\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    function = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = f\n"
      },
      {
        "count": 3,
        "value": "    if n==0:\n        return identity\n    while n>1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        funciton = compose1(funciton, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        a = compose1(a, f)\n"
      },
      {
        "count": 1,
        "value": "        n = n-1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return funciton\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return a\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      7,
      10
    ],
    "removed": [
      1,
      6,
      9
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    a = f"
      },
      {
        "line": 7,
        "code": "        a = compose1(a, f)"
      },
      {
        "line": 10,
        "code": "    return a"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    function = f"
      },
      {
        "line": 6,
        "code": "        funciton = compose1(funciton, f)"
      },
      {
        "line": 9,
        "code": "    return funciton"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    funciton = compose1(funciton, f)\nUnboundLocalError: local variable 'funciton' referenced before assignment\n\n# Error: expected\n#     \n# but got\n#     UnboundLocalError"
  },
  {
    "id": 84,
    "studentId": 195,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helpie(x):\n        value = x\n        i = 1\n        while i<=n:\n            value = f(value)\n        return value\n    return helpie\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helpie(x):\n        value = x\n        i = 1\n        while i<=n:\n            value = f(value)\n            i += 1\n        return value\n    return helpie\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helpie(x):\n        value = x\n        i = 1\n        while i<=n:\n            value = f(value)\n            i += 1\n        return value\n    return helpie\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def helpie(x):\n        value = x\n        i = 1\n        while i<=n:\n            value = f(value)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            i += 1\n"
      },
      {
        "count": 6,
        "value": "        return value\n    return helpie\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 6,
        "code": "            i += 1"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     8\n# but got\n#     Timeout"
  },
  {
    "id": 85,
    "studentId": 656,
    "rule": "Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def value(x):\n        i = 0\n        while i<n:\n            x = compose1(f, x)\n            i = i+1\n        return x\n    return value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def value(x):\n        i = 0\n        while i<n:\n            x = f(x)\n            i = i+1\n        return x\n    return value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def value(x):\n        i = 0\n        while i<n:\n            x = compose1(f, x)\n            x = f(x)\n            i = i+1\n        return x\n    return value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def value(x):\n        i = 0\n        while i<n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            x = compose1(f, x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(x)\n"
      },
      {
        "count": 7,
        "value": "            i = i+1\n        return x\n    return value\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x = f(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            x = compose1(f, x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x00000200C9287EA0>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x00000200C9287EA0>"
  },
  {
    "id": 86,
    "studentId": 532,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1))\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return lambda x: f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return lambda x: f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return lambda x: f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return lambda x: f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 87,
    "studentId": 15,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    compose1 = lambda f, g: lambda x: f(g(x))\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return repeated(compose1(f, f), n-1)",
    "after": "def repeated(f, n):\n    compose1 = lambda f, g: lambda x: f(g(x))\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(repeated(f, n-1), f)",
    "code": "def repeated(f, n):\n    compose1 = lambda f, g: lambda x: f(g(x))\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    compose1 = lambda f, g: lambda x: f(g(x))\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return lambda x: f(x)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 88,
    "studentId": 21,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def inner_repeated(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return inner_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def inner_repeated(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return inner_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def inner_repeated(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return inner_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def inner_repeated(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return inner_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in inner_repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 89,
    "studentId": 228,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = f\n    for x in range(1, n):\n        a = compose1(f, a)\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = f\n    for x in range(1, n):\n        a = compose1(f, a)\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = f\n    for x in range(1, n):\n        a = compose1(f, a)\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    a = f\n    for x in range(1, n):\n        a = compose1(f, a)\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 90,
    "studentId": 1008,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n<1:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n<1:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n<1:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n<1:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 91,
    "studentId": 599,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 92,
    "studentId": 333,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": null,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     \n# but got\n#     25"
  },
  {
    "id": 93,
    "studentId": 718,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = f\n    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = identity\n    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = f\n    a = identity\n    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    a = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    a = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 94,
    "studentId": 442,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 95,
    "studentId": 112,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = f\n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = f\n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    a = f\n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    a = f\n    while n>1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 96,
    "studentId": 507,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-inner, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-inner, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-inner, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    i = 1\n    def inner(x):\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def inner(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 1\n    def inner(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    i = 1\n"
      },
      {
        "count": 1,
        "value": "    def inner(x):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        i = 1\n"
      },
      {
        "count": 9,
        "value": "        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        i = 1"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    i = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in inner\n    while i <= n:\nUnboundLocalError: local variable 'i' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 97,
    "studentId": 598,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    result = f\n    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    result = identity\n    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    result = f\n    result = identity\n    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    result = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    result = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    result = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    result = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 98,
    "studentId": 293,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 99,
    "studentId": 880,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 100,
    "studentId": 701,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 101,
    "studentId": 208,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def number(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return number\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def number(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return number\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def number(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return number\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def number(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return number\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in number\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 102,
    "studentId": 1001,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        n -= 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        n -= 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        n -= 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        n -= 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 103,
    "studentId": 937,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def rep(x):\n        if n==0:\n            return x\n        else:\n            return repeated(compose(f, f), n-1)\n    return rep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def rep(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return rep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def rep(x):\n        if n==0:\n            return x\n        else:\n            return repeated(compose(f, f), n-1)\n            return f(repeated(f, n-1)(x))\n    return rep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def rep(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return repeated(compose(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return rep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return repeated(compose(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in rep\n    return repeated(compose(f, f), n - 1)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     8\n# but got\n#     NameError"
  },
  {
    "id": 104,
    "studentId": 469,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 6,
        "value": "    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 105,
    "studentId": 658,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        compose1(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        compose1(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        compose1(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        compose1(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    compose1(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    compose1(repeated(f, n-1))\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 106,
    "studentId": 36,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i, g = 1, f\n    while i<n:\n        g = compose1(f, g)\n        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i, g = 1, f\n    while i<n:\n        g = compose1(f, g)\n        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i, g = 1, f\n    while i<n:\n        g = compose1(f, g)\n        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    i, g = 1, f\n    while i<n:\n        g = compose1(f, g)\n        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 107,
    "studentId": 506,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1)(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1))\n        return f(repeated(f, n-1)(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 1,
        "value": "    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in h\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 108,
    "studentId": 355,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-compose)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(NameExpressionNode-identity)))))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-compose), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-compose), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-compose))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n    else:\n        return compose1(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i, compose = 0, identity\n    while i<n:\n        compose = compose1(compose, f)\n        i += 1\n    return compose\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n    else:\n        return compose1(f, n)\n    i, compose = 0, identity\n    while i<n:\n        compose = compose1(compose, f)\n        i += 1\n    return compose\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 4,
        "removed": true,
        "value": "    if n==0:\n        return identity(n)\n    else:\n        return compose1(f, n)\n"
      },
      {
        "count": 5,
        "added": true,
        "value": "    i, compose = 0, identity\n    while i<n:\n        compose = compose1(compose, f)\n        i += 1\n    return compose\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      6,
      7,
      8,
      9
    ],
    "removed": [
      1,
      2,
      3,
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "    i, compose = 0, identity"
      },
      {
        "line": 6,
        "code": "    while i<n:"
      },
      {
        "line": 7,
        "code": "        compose = compose1(compose, f)"
      },
      {
        "line": 8,
        "code": "        i += 1"
      },
      {
        "line": 9,
        "code": "    return compose"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity(n)"
      },
      {
        "line": 3,
        "code": "    else:"
      },
      {
        "line": 4,
        "code": "        return compose1(f, n)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 109,
    "studentId": 781,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n    function = f\n    while i<n:\n        function = compose1(f, function)\n        i += 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n    function = identity\n    while i<n:\n        function = compose1(f, function)\n        i += 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n    function = f\n    function = identity\n    while i<n:\n        function = compose1(f, function)\n        i += 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    function = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    function = identity\n"
      },
      {
        "count": 8,
        "value": "    while i<n:\n        function = compose1(f, function)\n        i += 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "    function = identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "    function = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 110,
    "studentId": 73,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-index)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-index)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def help(h):\n        index = 0\n        while i<n:\n            h = f(h)\n            i += 1\n        return h\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def help(h):\n        index = 0\n        while index<n:\n            h = f(h)\n            index += 1\n        return h\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def help(h):\n        index = 0\n        while i<n:\n        while index<n:\n            h = f(h)\n            i += 1\n            index += 1\n        return h\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def help(h):\n        index = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while i<n:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while index<n:\n"
      },
      {
        "count": 1,
        "value": "            h = f(h)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            i += 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            index += 1\n"
      },
      {
        "count": 6,
        "value": "        return h\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      7
    ],
    "removed": [
      3,
      6
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        while index<n:"
      },
      {
        "line": 7,
        "code": "            index += 1"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        while i<n:"
      },
      {
        "line": 6,
        "code": "            i += 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in help\n    while i < n:\nUnboundLocalError: local variable 'i' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 111,
    "studentId": 423,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 112,
    "studentId": 563,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK))))), 4), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def h(x):\n        return x\n    while n>1:\n        h = compose(f, h)\n        n -= 1\n    if n==1:\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def h(x):\n        return x\n    while n>0:\n        h = compose(f, h)\n        n -= 1\n    else:\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def h(x):\n        return x\n    while n>1:\n    while n>0:\n        h = compose(f, h)\n        n -= 1\n    if n==1:\n    else:\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def h(x):\n        return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    while n>1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    while n>0:\n"
      },
      {
        "count": 2,
        "value": "        h = compose(f, h)\n        n -= 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    if n==1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    else:\n"
      },
      {
        "count": 5,
        "value": "        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8,
      12
    ],
    "removed": [
      7,
      11
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "    while n>0:"
      },
      {
        "line": 12,
        "code": "    else:"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "    while n>1:"
      },
      {
        "line": 11,
        "code": "    if n==1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 113,
    "studentId": 851,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 114,
    "studentId": 474,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 115,
    "studentId": 487,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeatedHelp(count):\n        if count==n+1:\n            return f\n        else:\n            return compose1(f, repeatedHelp(count+1))\n    return repeatedHelp(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeatedHelp(count):\n        if count==n+1:\n            return identity\n        else:\n            return compose1(f, repeatedHelp(count+1))\n    return repeatedHelp(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeatedHelp(count):\n        if count==n+1:\n            return f\n            return identity\n        else:\n            return compose1(f, repeatedHelp(count+1))\n    return repeatedHelp(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def repeatedHelp(count):\n        if count==n+1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 7,
        "value": "        else:\n            return compose1(f, repeatedHelp(count+1))\n    return repeatedHelp(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 116,
    "studentId": 499,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity(identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(x)\n        return identity(identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return identity(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity(identity)\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return identity(x)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return identity(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 117,
    "studentId": 151,
    "rule": "Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return identity(x)\n        else:\n            return compose1(f, repeated(f, n-1)(x))\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return identity(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return identity(x)\n        else:\n            return compose1(f, repeated(f, n-1)(x))\n            return f(repeated(f, n-1)(x))\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return identity(x)\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated(f, n-1)(x))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return compose1(f, repeated(f, n-1)(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x0000016CF2707D90>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x0000016CF2707D90>"
  },
  {
    "id": 118,
    "studentId": 7,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n        return x\n    elif n==1:\n        return h\n    else:\n        return h(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n        return compose1(identity, identity)\n    elif n==1:\n        return h\n    else:\n        return compose1(h, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n        return x\n        return compose1(identity, identity)\n    elif n==1:\n        return h\n    else:\n        return h(repeated(f, n-1))\n        return compose1(h, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 3,
        "value": "    elif n==1:\n        return h\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return h(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(h, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      10
    ],
    "removed": [
      4,
      9
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 10,
        "code": "        return compose1(h, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return x"
      },
      {
        "line": 9,
        "code": "        return h(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return h(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return h(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    return f(x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 119,
    "studentId": 383,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(f, n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 120,
    "studentId": 755,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 121,
    "studentId": 168,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    def compose(g, n = n):\n        t = f(g)\n        while n>1:\n            t = f(t)\n            n = n-1\n        return t\n    return compose\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose(g, n = n):\n        t = f(g)\n        while n>1:\n            t = f(t)\n            n = n-1\n        return t\n    return compose\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return identity\n    def compose(g, n = n):\n        t = f(g)\n        while n>1:\n            t = f(t)\n            n = n-1\n        return t\n    return compose\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 11,
        "value": "    def compose(g, n = n):\n        t = f(g)\n        while n>1:\n            t = f(t)\n            n = n-1\n        return t\n    return compose\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 122,
    "studentId": 246,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f(0)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return f(0)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return f(0)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return f(0)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 123,
    "studentId": 980,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    h = lambda x: f(x)\n    if n==0:\n        return h\n    else:\n        counter = 1\n        while counter<=n:\n            h = compose1(f, h)\n            counter += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    h = lambda x: identity(x)\n    if n==0:\n        return h\n    else:\n        counter = 1\n        while counter<=n:\n            h = compose1(f, h)\n            counter += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    h = lambda x: f(x)\n    h = lambda x: identity(x)\n    if n==0:\n        return h\n    else:\n        counter = 1\n        while counter<=n:\n            h = compose1(f, h)\n            counter += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    h = lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    h = lambda x: identity(x)\n"
      },
      {
        "count": 12,
        "value": "    if n==0:\n        return h\n    else:\n        counter = 1\n        while counter<=n:\n            h = compose1(f, h)\n            counter += 1\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    h = lambda x: identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    h = lambda x: f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 124,
    "studentId": 18,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 1\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 1\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 1"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 125,
    "studentId": 477,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    newfunc = f\n    while n>0:\n        n -= 1\n        newfunc = compose1(f, newfunc)\n    return newfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    newfunc = identity\n    while n>0:\n        n -= 1\n        newfunc = compose1(f, newfunc)\n    return newfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    newfunc = f\n    newfunc = identity\n    while n>0:\n        n -= 1\n        newfunc = compose1(f, newfunc)\n    return newfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    newfunc = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    newfunc = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        n -= 1\n        newfunc = compose1(f, newfunc)\n    return newfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    newfunc = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    newfunc = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 126,
    "studentId": 1007,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper_func, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-helper_func)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def helper_func(h):\n        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper_func(x):\n        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n    return helper_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper_func(h):\n    def helper_func(x):\n        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n    return h\n    return helper_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    def helper_func(h):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    def helper_func(x):\n"
      },
      {
        "count": 4,
        "value": "        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return h\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return helper_func\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      8
    ],
    "removed": [
      1,
      7
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    def helper_func(x):"
      },
      {
        "line": 8,
        "code": "    return helper_func"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def helper_func(h):"
      },
      {
        "line": 7,
        "code": "    return h"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return h\nNameError: name 'h' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 127,
    "studentId": 619,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity(identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n        return identity(identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return identity(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity(identity)\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return identity(n)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 128,
    "studentId": 247,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = n\n    while n>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    while n>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = n\n    g = identity\n    while n>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    g = n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 129,
    "studentId": 843,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 5,
        "value": "    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 130,
    "studentId": 689,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 131,
    "studentId": 902,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 132,
    "studentId": 987,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f(n)\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f(n)\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f(n)"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 133,
    "studentId": 486,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 1\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 1\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 134,
    "studentId": 443,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-result)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))))))))))",
    "before": "def repeated(f, n):\n    def nth(x):\n        result = x\n        count = n\n        while count>0:\n            result = compose1(f, f)(x)\n            count -= 1\n        return result\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def nth(x):\n        result = x\n        count = n\n        while count>0:\n            result = f(result)\n            count -= 1\n        return result\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def nth(x):\n        result = x\n        count = n\n        while count>0:\n            result = compose1(f, f)(x)\n            result = f(result)\n            count -= 1\n        return result\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def nth(x):\n        result = x\n        count = n\n        while count>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            result = compose1(f, f)(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            result = f(result)\n"
      },
      {
        "count": 7,
        "value": "            count -= 1\n        return result\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            result = f(result)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            result = compose1(f, f)(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 135,
    "studentId": 219,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def many_composes(n):\n        if n==1:\n            return f\n        if n==2:\n            return compose1(f, f)\n        else:\n            return compose1(f, many_composes(n-1))\n    return many_composes(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def many_composes(n):\n        if n==1:\n            return f\n        if n==2:\n            return compose1(f, f)\n        else:\n            return compose1(f, many_composes(n-1))\n    return many_composes(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def many_composes(n):\n        if n==1:\n            return f\n        if n==2:\n            return compose1(f, f)\n        else:\n            return compose1(f, many_composes(n-1))\n    return many_composes(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def many_composes(n):\n        if n==1:\n            return f\n        if n==2:\n            return compose1(f, f)\n        else:\n            return compose1(f, many_composes(n-1))\n    return many_composes(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes\n    return compose1(f, many_composes(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes\n    return compose1(f, many_composes(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes\n    return compose1(f, many_composes(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes\n    return compose1(f, many_composes(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes\n    return compose1(f, many_composes(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes\n    return compose1(f, many_composes(n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in many_composes\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 136,
    "studentId": 680,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n>1:\n        return f(repeated(f, n-1))\n    elif n==1:\n        return f\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n>1:\n        return compose1(f, repeated(f, n-1))\n    elif n==1:\n        return f\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n>1:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\n    elif n==1:\n        return f\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n>1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 8,
        "value": "    elif n==1:\n        return f\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 137,
    "studentId": 251,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def nth(x):\n        i = n\n        while i>0:\n            x = f(i)\n            i -= 1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def nth(x):\n        i = n\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def nth(x):\n        i = n\n        while i>0:\n            x = f(i)\n            x = f(x)\n            i -= 1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def nth(x):\n        i = n\n        while i>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            x = f(i)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(x)\n"
      },
      {
        "count": 7,
        "value": "            i -= 1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x = f(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            x = f(i)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 2,
    "log": ">>> add_three(5)\n2\n\n# Error: expected\n#     8\n# but got\n#     2"
  },
  {
    "id": 138,
    "studentId": 855,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    base = lambda x: x\n    for x in range(n):\n        base = compose(f, base)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    base = lambda x: x\n    for x in range(n):\n        base = compose1(f, base)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    base = lambda x: x\n    for x in range(n):\n        base = compose(f, base)\n        base = compose1(f, base)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    base = lambda x: x\n    for x in range(n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        base = compose(f, base)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        base = compose1(f, base)\n"
      },
      {
        "count": 5,
        "value": "    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        base = compose1(f, base)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        base = compose(f, base)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    base = compose(f,base)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 139,
    "studentId": 879,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def m(x):\n        i, k = 0, x\n        while i<n:\n            k = f(k)\n            i += 1\n        return answer\n    return m\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def m(x):\n        i, k = 0, x\n        while i<n:\n            k = f(k)\n            i += 1\n        return k\n    return m\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def m(x):\n        i, k = 0, x\n        while i<n:\n            k = f(k)\n            i += 1\n        return answer\n        return k\n    return m\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def m(x):\n        i, k = 0, x\n        while i<n:\n            k = f(k)\n            i += 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return answer\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return k\n"
      },
      {
        "count": 5,
        "value": "    return m\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return k"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return answer"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in m\n    return answer\nNameError: name 'answer' is not defined\n\n# Error: expected\n#     8\n# but got\n#     NameError"
  },
  {
    "id": 140,
    "studentId": 276,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def func(x):\n        i = 1\n        while i<=n:\n            if i==1:\n                total = f(x)\n                i += 1\n            else:\n                total = f(total)\n                i += 1\n        return total\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def func(x):\n        i = 1\n        while i<=n:\n            if i==1:\n                total = f(x)\n                i += 1\n            else:\n                total = f(total)\n                i += 1\n        return total\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def func(x):\n        i = 1\n        while i<=n:\n            if i==1:\n                total = f(x)\n                i += 1\n            else:\n                total = f(total)\n                i += 1\n        return total\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 15,
        "value": "    def func(x):\n        i = 1\n        while i<=n:\n            if i==1:\n                total = f(x)\n                i += 1\n            else:\n                total = f(total)\n                i += 1\n        return total\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in func\n    return total\nUnboundLocalError: local variable 'total' referenced before assignment\n\n# Error: expected\n#     5\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 141,
    "studentId": 704,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    def base(i):\n        return g(i)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    def base(i):\n        return g(i)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    g = identity\n    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    def base(i):\n        return g(i)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 10,
        "value": "    while n>0:\n        g = compose1(f, g)\n        n -= 1\n    def base(i):\n        return g(i)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 142,
    "studentId": 133,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def f_on_repeat(i):\n        x = n\n        y = f\n        if x==0:\n            return i\n        if x==1:\n            return y(i)\n        h = y\n        while x>1:\n            h = compose1(h, f)\n            x -= 1\n        return h\n    return f_on_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def f_on_repeat(i):\n        x = n\n        y = f\n        if x==0:\n            return i\n        if x==1:\n            return y(i)\n        h = y\n        while x>1:\n            h = compose1(h, f)\n            x -= 1\n        return h(i)\n    return f_on_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def f_on_repeat(i):\n        x = n\n        y = f\n        if x==0:\n            return i\n        if x==1:\n            return y(i)\n        h = y\n        while x>1:\n            h = compose1(h, f)\n            x -= 1\n        return h\n        return h(i)\n    return f_on_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 12,
        "value": "def repeated(f, n):\n    def f_on_repeat(i):\n        x = n\n        y = f\n        if x==0:\n            return i\n        if x==1:\n            return y(i)\n        h = y\n        while x>1:\n            h = compose1(h, f)\n            x -= 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return h\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return h(i)\n"
      },
      {
        "count": 5,
        "value": "    return f_on_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      13
    ],
    "removed": [
      12
    ],
    "addedLine": [
      {
        "line": 13,
        "code": "        return h(i)"
      }
    ],
    "removedLine": [
      {
        "line": 12,
        "code": "        return h"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x000002110C2D3E18>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x000002110C2D3E18>"
  },
  {
    "id": 143,
    "studentId": 111,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    increment = lambda x: x+1\n    triple = lambda x: x*3\n    square = lambda x: x*x\n    w = lambda x: x\n    n = 0\n    for x in range(n):\n        w = compose1(f, w)\n        n = n+1\n    return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    increment = lambda x: x+1\n    triple = lambda x: x*3\n    square = lambda x: x*x\n    w = lambda x: x\n    identity = 0\n    for x in range(n):\n        w = compose1(f, w)\n        n = n+1\n    return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    increment = lambda x: x+1\n    triple = lambda x: x*3\n    square = lambda x: x*x\n    w = lambda x: x\n    n = 0\n    identity = 0\n    for x in range(n):\n        w = compose1(f, w)\n        n = n+1\n    return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    increment = lambda x: x+1\n    triple = lambda x: x*3\n    square = lambda x: x*x\n    w = lambda x: x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    n = 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    identity = 0\n"
      },
      {
        "count": 8,
        "value": "    for x in range(n):\n        w = compose1(f, w)\n        n = n+1\n    return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    identity = 0"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    n = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 144,
    "studentId": 792,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    k = 1\n    g = f\n    if n==0:\n        return f\n    else:\n        while k<n:\n            g, k = compose1(f, g), k+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    k = 1\n    g = f\n    if n==0:\n        return identity\n    else:\n        while k<n:\n            g, k = compose1(f, g), k+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    k = 1\n    g = f\n    if n==0:\n        return f\n        return identity\n    else:\n        while k<n:\n            g, k = compose1(f, g), k+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    k = 1\n    g = f\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 8,
        "value": "    else:\n        while k<n:\n            g, k = compose1(f, g), k+1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "        return f"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 145,
    "studentId": 10,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def combine(x, i = n):\n        g = f(x)\n        if i==0:\n            return g\n        else:\n            return combine(g, i-1)\n    return combine",
    "after": "def repeated(f, n):\n    def combine(x, i = n):\n        g = f(x)\n        if i==0:\n            return x\n        else:\n            return combine(g, i-1)\n    return combine",
    "code": "def repeated(f, n):\n    def combine(x, i = n):\n        g = f(x)\n        if i==0:\n            return g\n            return x\n        else:\n            return combine(g, i-1)\n    return combine\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def combine(x, i = n):\n        g = f(x)\n        if i==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return g\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return x\n"
      },
      {
        "count": 3,
        "value": "        else:\n            return combine(g, i-1)\n    return combine"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            return x"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            return g"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 146,
    "studentId": 1045,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    result = f\n    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    result = identity\n    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    result = f\n    result = identity\n    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    result = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    result = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    result = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    result = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 147,
    "studentId": 363,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return x\n        answer = f(x)\n        count = n\n        while (count>0):\n            answer = f(answer)\n            count -= 1\n        return answer\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return x\n        answer = identity(x)\n        count = n\n        while (count>0):\n            answer = f(answer)\n            count -= 1\n        return answer\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return x\n        answer = f(x)\n        answer = identity(x)\n        count = n\n        while (count>0):\n            answer = f(answer)\n            count -= 1\n        return answer\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def repeat(x):\n        if n==0:\n            return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        answer = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        answer = identity(x)\n"
      },
      {
        "count": 10,
        "value": "        count = n\n        while (count>0):\n            answer = f(answer)\n            count -= 1\n        return answer\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        answer = identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        answer = f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 148,
    "studentId": 107,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 2\n    g = f\n    while i<n:\n        f = compose1(f, g)\n        i = i+1\n    return compose1(f, g)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 2\n    g = f\n    while i<n:\n        f = compose1(f, g)\n        i = i+1\n    return compose1(f, g)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 2\n    g = f\n    while i<n:\n        f = compose1(f, g)\n        i = i+1\n    return compose1(f, g)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    i = 2\n    g = f\n    while i<n:\n        f = compose1(f, g)\n        i = i+1\n    return compose1(f, g)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 625,
    "log": ">>> repeated(square, 0)(5)\n625\n\n# Error: expected\n#     5\n# but got\n#     625"
  },
  {
    "id": 149,
    "studentId": 537,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f(args)\n    else:\n        i = 1\n        g = f\n        while i<n:\n            g = compose1(f, g)\n            i += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f(args)\n    else:\n        i = 1\n        g = f\n        while i<n:\n            g = compose1(f, g)\n            i += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f(args)\n    else:\n        i = 1\n        g = f\n        while i<n:\n            g = compose1(f, g)\n            i += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 13,
        "value": "    if n==1:\n        return f(args)\n    else:\n        i = 1\n        g = f\n        while i<n:\n            g = compose1(f, g)\n            i += 1\n        return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 150,
    "studentId": 329,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    func_layer = f\n    i = 0\n    if n>1:\n        while i<n:\n            func_layer = compose1(f, func_layer)\n            i += 1\n        return func_layer\n    else:\n        return func_layer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    func_layer = identity\n    i = 0\n    if n>1:\n        while i<n:\n            func_layer = compose1(f, func_layer)\n            i += 1\n        return func_layer\n    else:\n        return func_layer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    func_layer = f\n    func_layer = identity\n    i = 0\n    if n>1:\n        while i<n:\n            func_layer = compose1(f, func_layer)\n            i += 1\n        return func_layer\n    else:\n        return func_layer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func_layer = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func_layer = identity\n"
      },
      {
        "count": 12,
        "value": "    i = 0\n    if n>1:\n        while i<n:\n            func_layer = compose1(f, func_layer)\n            i += 1\n        return func_layer\n    else:\n        return func_layer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    func_layer = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    func_layer = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 151,
    "studentId": 722,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    repeat = compose1(f, f)\n    counter = 2\n    def incorporates_repeat(repeat, counter, n):\n        if n==0:\n            return 1\n        if n==1:\n            return f(x)\n        if counter<n:\n            repeat = compose1(repeat, f)\n            counter += 1\n            return incorporates_repeat(repeat, counter, n)\n        return repeat\n    return incorporates_repeat(repeat, counter, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    repeat = compose1(f, f)\n    counter = 2\n    def incorporates_repeat(repeat, counter, n):\n        if n==0:\n            return identity\n        if n==1:\n            return f(x)\n        if counter<n:\n            repeat = compose1(repeat, f)\n            counter += 1\n            return incorporates_repeat(repeat, counter, n)\n        return repeat\n    return incorporates_repeat(repeat, counter, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    repeat = compose1(f, f)\n    counter = 2\n    def incorporates_repeat(repeat, counter, n):\n        if n==0:\n            return 1\n            return identity\n        if n==1:\n            return f(x)\n        if counter<n:\n            repeat = compose1(repeat, f)\n            counter += 1\n            return incorporates_repeat(repeat, counter, n)\n        return repeat\n    return incorporates_repeat(repeat, counter, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    repeat = compose1(f, f)\n    counter = 2\n    def incorporates_repeat(repeat, counter, n):\n        if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 12,
        "value": "        if n==1:\n            return f(x)\n        if counter<n:\n            repeat = compose1(repeat, f)\n            counter += 1\n            return incorporates_repeat(repeat, counter, n)\n        return repeat\n    return incorporates_repeat(repeat, counter, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return 1"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 152,
    "studentId": 67,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 6,
        "value": "        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return f(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 153,
    "studentId": 490,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 154,
    "studentId": 581,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return compose1(identity, lambda x: x)\n    else:\n        return repeated(compose1(f, f), n-1)",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return compose1(identity, lambda x: x)\n    else:\n        return compose1(repeated(f, n-1), f)",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return compose1(identity, lambda x: x)\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return compose1(identity, lambda x: x)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 155,
    "studentId": 906,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def apply(x):\n        part = f\n        copy_n = n\n        while copy_n>0:\n            part = compose1(part, f)\n            copy_n = copy_n-1\n        return part(x)\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def apply(x):\n        part = identity\n        copy_n = n\n        while copy_n>0:\n            part = compose1(part, f)\n            copy_n = copy_n-1\n        return part(x)\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def apply(x):\n        part = f\n        part = identity\n        copy_n = n\n        while copy_n>0:\n            part = compose1(part, f)\n            copy_n = copy_n-1\n        return part(x)\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def apply(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        part = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        part = identity\n"
      },
      {
        "count": 10,
        "value": "        copy_n = n\n        while copy_n>0:\n            part = compose1(part, f)\n            copy_n = copy_n-1\n        return part(x)\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        part = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        part = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 156,
    "studentId": 331,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def doer(x):\n        def composer(x, k):\n            if k==n:\n                return f(x)\n            else:\n                return composer(f(x), k+1)\n        return composer(x, 0)\n    return doer",
    "after": "def repeated(f, n):\n    def doer(x):\n        def composer(x, k):\n            if k==n:\n                return identity(x)\n            else:\n                return composer(f(x), k+1)\n        return composer(x, 0)\n    return doer",
    "code": "def repeated(f, n):\n    def doer(x):\n        def composer(x, k):\n            if k==n:\n                return f(x)\n                return identity(x)\n            else:\n                return composer(f(x), k+1)\n        return composer(x, 0)\n    return doer\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def doer(x):\n        def composer(x, k):\n            if k==n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                return f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                return identity(x)\n"
      },
      {
        "count": 4,
        "value": "            else:\n                return composer(f(x), k+1)\n        return composer(x, 0)\n    return doer"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "                return identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "                return f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 157,
    "studentId": 549,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return identity\n    if n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 158,
    "studentId": 857,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        compose1(f, repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 159,
    "studentId": 275,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose_functions)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose_functions(x):\n        if x==n:\n            return f\n        else:\n            return compose1(f, g(x+1))\n    if n==0:\n        return identity\n    else:\n        return compose_functions(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose_functions(x):\n        if x==n:\n            return f\n        else:\n            return compose1(f, compose_functions(x+1))\n    if n==0:\n        return identity\n    else:\n        return compose_functions(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose_functions(x):\n        if x==n:\n            return f\n        else:\n            return compose1(f, g(x+1))\n            return compose1(f, compose_functions(x+1))\n    if n==0:\n        return identity\n    else:\n        return compose_functions(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def compose_functions(x):\n        if x==n:\n            return f\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, g(x+1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, compose_functions(x+1))\n"
      },
      {
        "count": 8,
        "value": "    if n==0:\n        return identity\n    else:\n        return compose_functions(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return compose1(f, compose_functions(x+1))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return compose1(f, g(x+1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    return compose_functions(1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose_functions\n    return compose1(f,g(x+1))\nNameError: name 'g' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 160,
    "studentId": 975,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return repeated(compose1(f, n), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return repeated(compose1(f, n), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, n), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, n), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 161,
    "studentId": 389,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper_repeated(value):\n        i = n\n        k = f\n        if i==0:\n            return value\n        while i:\n            k = compose1(f, k)\n            i -= 1\n        return k(value)\n    return helper_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper_repeated(value):\n        i = n\n        k = identity\n        if i==0:\n            return value\n        while i:\n            k = compose1(f, k)\n            i -= 1\n        return k(value)\n    return helper_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper_repeated(value):\n        i = n\n        k = f\n        k = identity\n        if i==0:\n            return value\n        while i:\n            k = compose1(f, k)\n            i -= 1\n        return k(value)\n    return helper_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper_repeated(value):\n        i = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        k = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        k = identity\n"
      },
      {
        "count": 11,
        "value": "        if i==0:\n            return value\n        while i:\n            k = compose1(f, k)\n            i -= 1\n        return k(value)\n    return helper_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        k = identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        k = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 162,
    "studentId": 727,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def repeat_helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return repeat_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat_helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return repeat_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeat_helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return repeat_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def repeat_helper(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return repeat_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeat_helper\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 163,
    "studentId": 928,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def function(x):\n        number = n\n        total = f\n        while (number>1):\n            total = compose1(f, total)\n            number -= 1\n        return total(x)\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def function(x):\n        number = n\n        total = f\n        while (number>1):\n            total = compose1(f, total)\n            number -= 1\n        return total(x)\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def function(x):\n        number = n\n        total = f\n        while (number>1):\n            total = compose1(f, total)\n            number -= 1\n        return total(x)\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def function(x):\n        number = n\n        total = f\n        while (number>1):\n            total = compose1(f, total)\n            number -= 1\n        return total(x)\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 164,
    "studentId": 820,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    def carrier(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, carrier(x-1))\n    return carrier(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def carrier(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, carrier(x-1))\n    return carrier(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    def carrier(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, carrier(x-1))\n    return carrier(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    def carrier(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, carrier(x-1))\n    return carrier(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 165,
    "studentId": 620,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def partial_rep(k, val):\n        if k==n:\n            return val\n        else:\n            return partial_rep(k+1, f(val))\n    return lambda x: partial_rep(1, x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def partial_rep(k, val):\n        if k==n:\n            return val\n        else:\n            return partial_rep(k+1, f(val))\n    return lambda x: partial_rep(0, x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def partial_rep(k, val):\n        if k==n:\n            return val\n        else:\n            return partial_rep(k+1, f(val))\n    return lambda x: partial_rep(1, x)\n    return lambda x: partial_rep(0, x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def partial_rep(k, val):\n        if k==n:\n            return val\n        else:\n            return partial_rep(k+1, f(val))\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return lambda x: partial_rep(1, x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return lambda x: partial_rep(0, x)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "    return lambda x: partial_rep(0, x)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "    return lambda x: partial_rep(1, x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 166,
    "studentId": 396,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 167,
    "studentId": 426,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 168,
    "studentId": 1043,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if (n==0):\n        return identity\n    g = f\n    i = 0\n    while (i<n):\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if (n==0):\n        return identity\n    g = f\n    i = 1\n    while (i<n):\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if (n==0):\n        return identity\n    g = f\n    i = 0\n    i = 1\n    while (i<n):\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if (n==0):\n        return identity\n    g = f\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    i = 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    i = 1\n"
      },
      {
        "count": 8,
        "value": "    while (i<n):\n        f = compose1(f, g)\n        i += 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "    i = 1"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "    i = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 169,
    "studentId": 918,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(NameExpressionNode-k)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        return pow(f(x), pow(2, n-1))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        return pow(f(x), pow(2, n-1))\n        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def h(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return pow(f(x), pow(2, n-1))\n"
      },
      {
        "count": 4,
        "added": true,
        "value": "        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      5,
      6
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        k = 0"
      },
      {
        "line": 4,
        "code": "        while k<n:"
      },
      {
        "line": 5,
        "code": "            x, k = f(x), k+1"
      },
      {
        "line": 6,
        "code": "        return x"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return pow(f(x), pow(2, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 1296,
    "log": ">>> add_three(5)\n1296\n\n# Error: expected\n#     8\n# but got\n#     1296"
  },
  {
    "id": 170,
    "studentId": 1012,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    i = n\n    def last_num(x):\n        if i==0:\n            return x\n        else:\n            i -= 1\n            return last_num(f(x))\n    return last_num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = n\n    def last_num(x):\n        if n==0:\n            return x\n        else:\n            return repeated(f, n-1)(f(x))\n    return last_num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = n\n    def last_num(x):\n        if i==0:\n        if n==0:\n            return x\n        else:\n            i -= 1\n            return last_num(f(x))\n            return repeated(f, n-1)(f(x))\n    return last_num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    i = n\n    def last_num(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if i==0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        if n==0:\n"
      },
      {
        "count": 2,
        "value": "            return x\n        else:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "            i -= 1\n            return last_num(f(x))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return repeated(f, n-1)(f(x))\n"
      },
      {
        "count": 5,
        "value": "    return last_num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      9
    ],
    "removed": [
      3,
      7,
      8
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        if n==0:"
      },
      {
        "line": 9,
        "code": "            return repeated(f, n-1)(f(x))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        if i==0:"
      },
      {
        "line": 7,
        "code": "            i -= 1"
      },
      {
        "line": 8,
        "code": "            return last_num(f(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in last_num\n    if i== 0:\nUnboundLocalError: local variable 'i' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 171,
    "studentId": 109,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n>0:\n        return compose1(repeated(f, n-1), f)\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n>0:\n        return compose1(repeated(f, n-1), f)\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n>0:\n        return compose1(repeated(f, n-1), f)\n    else:\n        return f\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n>0:\n        return compose1(repeated(f, n-1), f)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 172,
    "studentId": 429,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 0\n    func = f\n    if i==n:\n        return identity(n)\n    else:\n        return compose1(repeated(func, n-1), func)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 0\n    func = f\n    if i==n:\n        return identity(identity)\n    else:\n        return compose1(repeated(func, n-1), func)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 0\n    func = f\n    if i==n:\n        return identity(n)\n        return identity(identity)\n    else:\n        return compose1(repeated(func, n-1), func)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    i = 0\n    func = f\n    if i==n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return identity(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity(identity)\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(repeated(func, n-1), func)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return identity(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return identity(n)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 173,
    "studentId": 565,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 174,
    "studentId": 456,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def apply_f(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return apply_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def apply_f(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return apply_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def apply_f(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return apply_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def apply_f(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return apply_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in apply_f\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 175,
    "studentId": 739,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-rf), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-j), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-k)))))))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def rf(x, j = n, k = 0):\n        if j==0:\n            if k>0:\n                return k\n            else:\n                return x\n        else:\n            return rf(k, j-1, f(x))\n    return rf\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def rf(x, j = n, k = 0):\n        if j==0:\n            if k>0:\n                return k\n            else:\n                return x\n        else:\n            if k>0:\n                return rf(x, j-1, f(k))\n            else:\n                return rf(k, j-1, f(x))\n    return rf\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def rf(x, j = n, k = 0):\n        if j==0:\n            if k>0:\n                return k\n            else:\n                return x\n        else:\n            return rf(k, j-1, f(x))\n            if k>0:\n                return rf(x, j-1, f(k))\n            else:\n                return rf(k, j-1, f(x))\n    return rf\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def rf(x, j = n, k = 0):\n        if j==0:\n            if k>0:\n                return k\n            else:\n                return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return rf(k, j-1, f(x))\n"
      },
      {
        "count": 4,
        "added": true,
        "value": "            if k>0:\n                return rf(x, j-1, f(k))\n            else:\n                return rf(k, j-1, f(x))\n"
      },
      {
        "count": 5,
        "value": "    return rf\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9,
      10,
      11,
      12
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "            if k>0:"
      },
      {
        "line": 10,
        "code": "                return rf(x, j-1, f(k))"
      },
      {
        "line": 11,
        "code": "            else:"
      },
      {
        "line": 12,
        "code": "                return rf(k, j-1, f(x))"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "            return rf(k, j-1, f(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 176,
    "studentId": 158,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    i = 1\n    while i<n:\n        i += 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    i = 1\n    while i<n:\n        i += 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    i = 1\n    while i<n:\n        i += 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    g = f\n    i = 1\n    while i<n:\n        i += 1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 177,
    "studentId": 118,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 178,
    "studentId": 584,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def input(x):\n        k = n\n        if k==0:\n            return x\n        while k>0:\n            x = compose1(f, f)(x)\n            k = k-1\n        return x\n    return input\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def input(x):\n        k = n\n        if k==0:\n            return x\n        while k>0:\n            x = compose1(identity, f)(x)\n            k = k-1\n        return x\n    return input\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def input(x):\n        k = n\n        if k==0:\n            return x\n        while k>0:\n            x = compose1(f, f)(x)\n            x = compose1(identity, f)(x)\n            k = k-1\n        return x\n    return input\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def input(x):\n        k = n\n        if k==0:\n            return x\n        while k>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            x = compose1(f, f)(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = compose1(identity, f)(x)\n"
      },
      {
        "count": 7,
        "value": "            k = k-1\n        return x\n    return input\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "            x = compose1(identity, f)(x)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "            x = compose1(f, f)(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 11,
    "log": ">>> add_three(5)\n11\n\n# Error: expected\n#     8\n# but got\n#     11"
  },
  {
    "id": 179,
    "studentId": 795,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==2:\n        return compose1(f, f)\n    elif n==1:\n        return f\n    else:\n        return repeated(f, n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==2:\n        return compose1(f, f)\n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==2:\n        return compose1(f, f)\n    elif n==1:\n        return f\n    else:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==2:\n        return compose1(f, f)\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 180,
    "studentId": 649,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def identity(x):\n        return x\n    a = f\n    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def identity(x):\n        return x\n    a = identity\n    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def identity(x):\n        return x\n    a = f\n    a = identity\n    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def identity(x):\n        return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "    a = identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "    a = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 181,
    "studentId": 829,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    def repeat(y):\n        return f\n    if n==0:\n        return identity\n    while n>0:\n        return repeated(f, n-1)\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat(y):\n        return f\n    if n==0:\n        return identity\n    while n>0:\n        return compose1(f, repeated(f, n-1))\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeat(y):\n        return f\n    if n==0:\n        return identity\n    while n>0:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def repeat(y):\n        return f\n    if n==0:\n        return identity\n    while n>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 5,
        "value": "    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 182,
    "studentId": 1052,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)(n)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(repeated(f, n-1), f)(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose1(repeated(f, n-1), f)(n)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 183,
    "studentId": 988,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return f(x)\n        else:\n            return f(repeated(f, n-1))\n    return helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return compose1(identity, identity)\n        else:\n            return compose1(f, repeated(f, n-1))\n    return helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return f(x)\n            return compose1(identity, identity)\n        else:\n            return f(repeated(f, n-1))\n            return compose1(f, repeated(f, n-1))\n    return helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 5,
        "value": "    return helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      7
    ],
    "removed": [
      3,
      6
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return compose1(identity, identity)"
      },
      {
        "line": 7,
        "code": "            return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f(x)"
      },
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 184,
    "studentId": 433,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(f, n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 185,
    "studentId": 776,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: identity(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: f(x)\n        return lambda x: identity(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return lambda x: identity(x)\n"
      },
      {
        "count": 5,
        "value": "    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return lambda x: identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return lambda x: f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 186,
    "studentId": 232,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    elif n==1:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==0:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n    elif n==1:\n        return identity\n    elif n==0:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return f\n    elif n==1:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    elif n==0:\n"
      },
      {
        "count": 7,
        "value": "        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return identity"
      },
      {
        "line": 5,
        "code": "    elif n==0:"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 3,
        "code": "    elif n==1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 187,
    "studentId": 44,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f(lambda x: x)\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f(lambda x: x)\n    return f(repeated(f, n-1))\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return f(lambda x: x)\n    return f(repeated(f, n-1))\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 5,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f(lambda x: x)"
      },
      {
        "line": 3,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return f(lambda x: x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 188,
    "studentId": 327,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"CallExpressionNode\")))), TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        i = 1\n        g = f\n        while i<=n:\n            f = compose1(f, g)\n            i = i+1\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        i = 1\n        g = f\n        while i<n:\n            f = compose1(f, g)\n            i = i+1\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        i = 1\n        g = f\n        while i<=n:\n        while i<n:\n            f = compose1(f, g)\n            i = i+1\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        i = 1\n        g = f\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while i<=n:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while i<n:\n"
      },
      {
        "count": 7,
        "value": "            f = compose1(f, g)\n            i = i+1\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        while i<n:"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        while i<=n:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 189,
    "studentId": 933,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    def helper(y):\n        n = z\n        while n>0:\n            y = f(y)\n            z -= 1\n        return y\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(y):\n        j = n\n        while j>0:\n            y = f(y)\n            j -= 1\n        return y\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(y):\n        n = z\n        while n>0:\n        j = n\n        while j>0:\n            y = f(y)\n            z -= 1\n            j -= 1\n        return y\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def helper(y):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        n = z\n        while n>0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        j = n\n        while j>0:\n"
      },
      {
        "count": 1,
        "value": "            y = f(y)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            z -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            j -= 1\n"
      },
      {
        "count": 6,
        "value": "        return y\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5,
      8
    ],
    "removed": [
      2,
      3,
      7
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        j = n"
      },
      {
        "line": 5,
        "code": "        while j>0:"
      },
      {
        "line": 8,
        "code": "            j -= 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        n = z"
      },
      {
        "line": 3,
        "code": "        while n>0:"
      },
      {
        "line": 7,
        "code": "            z -= 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in helper\n    n = z\nUnboundLocalError: local variable 'z' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 190,
    "studentId": 728,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 191,
    "studentId": 200,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 192,
    "studentId": 876,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    return lambda x: f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    return lambda x: f(repeated(f, n-1))\n    return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return lambda x: f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return lambda x: f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "    return lambda x: f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "    return lambda x: f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 193,
    "studentId": 1068,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def hannah(x):\n        result = f(x)\n        for i in range(n-1):\n            result = f(result)\n        return result\n    return hannah",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def hannah(x):\n        result = f(x)\n        for i in range(n-1):\n            result = f(result)\n        return result\n    return hannah",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def hannah(x):\n        result = f(x)\n        for i in range(n-1):\n            result = f(result)\n        return result\n    return hannah\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 6,
        "value": "    def hannah(x):\n        result = f(x)\n        for i in range(n-1):\n            result = f(result)\n        return result\n    return hannah"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 194,
    "studentId": 759,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def func(x, n):\n        while n>0:\n            x = f(x)\n            n -= 1\n        return x\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(x):\n        counter = n\n        while counter>0:\n            x = f(x)\n            counter -= 1\n        return x\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func(x, n):\n        while n>0:\n    def func(x):\n        counter = n\n        while counter>0:\n            x = f(x)\n            n -= 1\n            counter -= 1\n        return x\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "    def func(x, n):\n        while n>0:\n"
      },
      {
        "count": 3,
        "added": true,
        "value": "    def func(x):\n        counter = n\n        while counter>0:\n"
      },
      {
        "count": 1,
        "value": "            x = f(x)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            n -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            counter -= 1\n"
      },
      {
        "count": 6,
        "value": "        return x\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      5,
      8
    ],
    "removed": [
      1,
      2,
      7
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    def func(x):"
      },
      {
        "line": 4,
        "code": "        counter = n"
      },
      {
        "line": 5,
        "code": "        while counter>0:"
      },
      {
        "line": 8,
        "code": "            counter -= 1"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def func(x, n):"
      },
      {
        "line": 2,
        "code": "        while n>0:"
      },
      {
        "line": 7,
        "code": "            n -= 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: func() missing 1 required positional argument: 'n'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 195,
    "studentId": 462,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 0\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 0\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 196,
    "studentId": 577,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    w = f\n    while n>1:\n        w = compose1(f, w)\n        n -= 1\n    if n==0:\n        return f\n    else:\n        return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    w = f\n    while n>1:\n        w = compose1(f, w)\n        n -= 1\n    if n==0:\n        return identity\n    else:\n        return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    w = f\n    while n>1:\n        w = compose1(f, w)\n        n -= 1\n    if n==0:\n        return f\n        return identity\n    else:\n        return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    w = f\n    while n>1:\n        w = compose1(f, w)\n        n -= 1\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return w\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return f"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 197,
    "studentId": 352,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    composition = f\n    if n==0:\n        return 0\n    while n>1:\n        composition = compose1(f, composition)\n        n -= 1\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    composition = f\n    if n==0:\n        return identity\n    while n>1:\n        composition = compose1(f, composition)\n        n -= 1\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    composition = f\n    if n==0:\n        return 0\n        return identity\n    while n>1:\n        composition = compose1(f, composition)\n        n -= 1\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    composition = f\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 8,
        "value": "    while n>1:\n        composition = compose1(f, composition)\n        n -= 1\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        return 0"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 198,
    "studentId": 708,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = f\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = f\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = f\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    k = f\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 199,
    "studentId": 1057,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    func = compose1(f, repeated(f, n-1))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    func = compose1(f, repeated(f, n-1))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    func = compose1(f, repeated(f, n-1))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 6,
        "value": "    func = compose1(f, repeated(f, n-1))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    func = compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    func = compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    func = compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    func = compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    func = compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    func = compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    func = compose1(f, repeated(f, n-1))\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 200,
    "studentId": 967,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = 1\n    g = f\n    while k<=n-1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = 1\n    g = f\n    while k<=n-1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = 1\n    g = f\n    while k<=n-1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    k = 1\n    g = f\n    while k<=n-1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 201,
    "studentId": 677,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in func\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 202,
    "studentId": 935,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose2(f, n):\n        def h(x):\n            k = 1\n            total = f(x)\n            while k<n:\n                total = f(total)\n                k += 1\n            return total\n        return h\n    return compose2(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose2(f, n):\n        def h(x):\n            k = 1\n            total = f(x)\n            while k<n:\n                total = f(total)\n                k += 1\n            return total\n        return h\n    return compose2(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose2(f, n):\n        def h(x):\n            k = 1\n            total = f(x)\n            while k<n:\n                total = f(total)\n                k += 1\n            return total\n        return h\n    return compose2(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 14,
        "value": "    def compose2(f, n):\n        def h(x):\n            k = 1\n            total = f(x)\n            while k<n:\n                total = f(total)\n                k += 1\n            return total\n        return h\n    return compose2(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 203,
    "studentId": 379,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    n -= 1\n    function = f\n    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    n -= 1\n    function = f\n    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    n -= 1\n    function = f\n    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    n -= 1\n    function = f\n    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 204,
    "studentId": 80,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose(f, repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose(f, repeated(f, n-1))\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 205,
    "studentId": 211,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 206,
    "studentId": 388,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return repeated(f, n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 207,
    "studentId": 4,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": 10,
    "log": ">>> add_three(5)\n10\n\n# Error: expected\n#     8\n# but got\n#     10"
  },
  {
    "id": 208,
    "studentId": 535,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 209,
    "studentId": 152,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, g), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, g), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, g), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, g), n-1)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return repeated(compose1(f,g), n-1)\nNameError: name 'g' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 210,
    "studentId": 903,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 1\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 1\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 211,
    "studentId": 114,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        counter = 0\n        num = n\n        while counter<n:\n            num = f(num)\n            counter = counter+1\n        return num\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        counter = 0\n        num = x\n        while counter<n:\n            num = f(num)\n            counter = counter+1\n        return num\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        counter = 0\n        num = n\n        num = x\n        while counter<n:\n            num = f(num)\n            counter = counter+1\n        return num\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def h(x):\n        counter = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        num = n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        num = x\n"
      },
      {
        "count": 9,
        "value": "        while counter<n:\n            num = f(num)\n            counter = counter+1\n        return num\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        num = x"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        num = n"
      }
    ],
    "test": "repeated(square, 2)",
    "expected": 625,
    "result": 16,
    "log": ">>> repeated(square, 2)(5) # square(square(5))\n16\n\n# Error: expected\n#     625\n# but got\n#     16"
  },
  {
    "id": 212,
    "studentId": 494,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_function(h, x):\n        if x==0:\n            return h\n        else:\n            return repeated_function(compose1(h, g), x-1)\n    return repeated_function(lambda x: x, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_function(h, x):\n        if x==0:\n            return h\n        else:\n            return repeated_function(compose1(h, f), x-1)\n    return repeated_function(lambda x: x, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_function(h, x):\n        if x==0:\n            return h\n        else:\n            return repeated_function(compose1(h, g), x-1)\n            return repeated_function(compose1(h, f), x-1)\n    return repeated_function(lambda x: x, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def repeated_function(h, x):\n        if x==0:\n            return h\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return repeated_function(compose1(h, g), x-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return repeated_function(compose1(h, f), x-1)\n"
      },
      {
        "count": 5,
        "value": "    return repeated_function(lambda x: x, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return repeated_function(compose1(h, f), x-1)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return repeated_function(compose1(h, g), x-1)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return repeated_function(lambda x: x, n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function\n    return repeated_function(compose1(h, g), x - 1)\nNameError: name 'g' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 213,
    "studentId": 1029,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose(f, repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose(f, repeated(f, n-1))\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 214,
    "studentId": 420,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def call_function(i):\n        if i==n:\n            return f\n        else:\n            return compose1(f, call_function(i+1))\n    return call_function(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def call_function(i):\n        if i==n:\n            return f\n        else:\n            return compose1(f, call_function(i+1))\n    return call_function(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def call_function(i):\n        if i==n:\n            return f\n        else:\n            return compose1(f, call_function(i+1))\n    return call_function(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def call_function(i):\n        if i==n:\n            return f\n        else:\n            return compose1(f, call_function(i+1))\n    return call_function(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function\n    return compose1(f,call_function(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function\n    return compose1(f,call_function(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function\n    return compose1(f,call_function(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function\n    return compose1(f,call_function(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function\n    return compose1(f,call_function(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function\n    return compose1(f,call_function(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in call_function\n    if i==n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 215,
    "studentId": 230,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x, i = 1):\n        if i==n:\n            return f(x)\n        else:\n            return f(helper(x, i+1))\n    return helper\ndef repeated_looped(f, n):\n    def looped(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return looped\ndef compose1(f, g):\n    return lambda x: f(g(x))",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x, i = 1):\n        if i==n:\n            return f(x)\n        else:\n            return f(helper(x, i+1))\n    return helper\ndef repeated_looped(f, n):\n    def looped(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return looped\ndef compose1(f, g):\n    return lambda x: f(g(x))",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x, i = 1):\n        if i==n:\n            return f(x)\n        else:\n            return f(helper(x, i+1))\n    return helper\ndef repeated_looped(f, n):\n    def looped(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return looped\ndef compose1(f, g):\n    return lambda x: f(g(x))\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 14,
        "value": "    def helper(x, i = 1):\n        if i==n:\n            return f(x)\n        else:\n            return f(helper(x, i+1))\n    return helper\ndef repeated_looped(f, n):\n    def looped(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return looped\ndef compose1(f, g):\n    return lambda x: f(g(x))"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return f(helper(x, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return f(helper(x, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return f(helper(x, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return f(helper(x, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return f(helper(x, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return f(helper(x, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in helper\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 216,
    "studentId": 523,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        x = f(x)\n        return repeated(f, n-1)\n    return helper",
    "after": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        x = f(x)\n        return repeated(f, n-1)(x)\n    return helper",
    "code": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        x = f(x)\n        return repeated(f, n-1)\n        return repeated(f, n-1)(x)\n    return helper\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        x = f(x)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return repeated(f, n-1)(x)\n"
      },
      {
        "count": 1,
        "value": "    return helper"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "        return repeated(f, n-1)(x)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function repeated.<locals>.helper at 0x00000266830CDD08>\n\n# Error: expected\n#     8\n# but got\n#     <function repeated.<locals>.helper at 0x00000266830CDD08>"
  },
  {
    "id": 217,
    "studentId": 54,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n<=0:\n        return n\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n<=0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n<=0:\n        return n\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n<=0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 218,
    "studentId": 985,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    count = 1\n    total = lambda x: x\n    while count<n:\n        total = compose1(f, total)\n        count += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    count = 0\n    total = lambda x: x\n    while count<n:\n        total = compose1(f, total)\n        count += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    count = 1\n    count = 0\n    total = lambda x: x\n    while count<n:\n        total = compose1(f, total)\n        count += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    count = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    count = 0\n"
      },
      {
        "count": 9,
        "value": "    total = lambda x: x\n    while count<n:\n        total = compose1(f, total)\n        count += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    count = 0"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    count = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 219,
    "studentId": 974,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return identity(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return identity(n)"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 220,
    "studentId": 337,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 221,
    "studentId": 1016,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 222,
    "studentId": 634,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 1\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 1\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 223,
    "studentId": 206,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n<1:\n        return \n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n<1:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n<1:\n        return \n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n<1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return \n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return "
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 224,
    "studentId": 723,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        total = 0\n        while k<=n:\n            if n>=2:\n                if total==0:\n                    total = compose1(f(x), f(x))\n                    k = k+1\n                else:\n                    total = compose1(f(total), f(total))\n                    k = k+1\n            else:\n                total = f(n)\n        if n==0:\n            return x\n        return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        total = 0\n        while k<=n:\n            if n>=2:\n                if total==0:\n                    total = compose1(f(x), f(x))\n                    k = k+1\n                else:\n                    total = compose1(f(total), f(total))\n                    k = k+1\n            else:\n                total = f(n)\n        if n==0:\n            return x\n        return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return f",
    "code": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        total = 0\n        while k<=n:\n            if n>=2:\n                if total==0:\n                    total = compose1(f(x), f(x))\n                    k = k+1\n                else:\n                    total = compose1(f(total), f(total))\n                    k = k+1\n            else:\n                total = f(n)\n        if n==0:\n            return x\n        return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n    return f\n",
    "diffs": [
      {
        "count": 21,
        "value": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        total = 0\n        while k<=n:\n            if n>=2:\n                if total==0:\n                    total = compose1(f(x), f(x))\n                    k = k+1\n                else:\n                    total = compose1(f(total), f(total))\n                    k = k+1\n            else:\n                total = f(n)\n        if n==0:\n            return x\n        return total\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return h"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return f"
      }
    ],
    "added": [
      22
    ],
    "removed": [
      21
    ],
    "addedLine": [
      {
        "line": 22,
        "code": "    return f"
      }
    ],
    "removedLine": [
      {
        "line": 21,
        "code": "    return h"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper\n    total = compose1(f(total), f(total))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 225,
    "studentId": 316,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 1\n    func = compose1(f, f)\n    while i!=(n-1):\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 1\n    func = compose1(f, f)\n    while i!=(n-1):\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 1\n    func = compose1(f, f)\n    while i!=(n-1):\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    i = 1\n    func = compose1(f, f)\n    while i!=(n-1):\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     5\n# but got\n#     Timeout"
  },
  {
    "id": 226,
    "studentId": 1038,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ParameterNode-function, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-function_ception), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))",
    "before": "def repeated(f, n):\n    def function_ception(f, n, i = 1, function = 0):\n        if n==0 or i==1:\n            function = identity\n        if n==0:\n            return function\n        if i>n:\n            return function\n        function = compose1(f, function)\n        return function_ception(f, n, i+1, function)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def function_ception(f, n, function = identity):\n        if n==0:\n            return function\n        function = compose1(f, function)\n        return function_ception(f, n-1, function)\n    return function_ception(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def function_ception(f, n, i = 1, function = 0):\n        if n==0 or i==1:\n            function = identity\n    def function_ception(f, n, function = identity):\n        if n==0:\n            return function\n        if i>n:\n            return function\n        function = compose1(f, function)\n        return function_ception(f, n, i+1, function)\n        return function_ception(f, n-1, function)\n    return function_ception(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 3,
        "removed": true,
        "value": "    def function_ception(f, n, i = 1, function = 0):\n        if n==0 or i==1:\n            function = identity\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    def function_ception(f, n, function = identity):\n"
      },
      {
        "count": 2,
        "value": "        if n==0:\n            return function\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        if i>n:\n            return function\n"
      },
      {
        "count": 1,
        "value": "        function = compose1(f, function)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return function_ception(f, n, i+1, function)\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return function_ception(f, n-1, function)\n    return function_ception(f, n)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      11,
      12
    ],
    "removed": [
      1,
      2,
      3,
      7,
      8,
      10
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "    def function_ception(f, n, function = identity):"
      },
      {
        "line": 11,
        "code": "        return function_ception(f, n-1, function)"
      },
      {
        "line": 12,
        "code": "    return function_ception(f, n)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def function_ception(f, n, i = 1, function = 0):"
      },
      {
        "line": 2,
        "code": "        if n==0 or i==1:"
      },
      {
        "line": 3,
        "code": "            function = identity"
      },
      {
        "line": 7,
        "code": "        if i>n:"
      },
      {
        "line": 8,
        "code": "            return function"
      },
      {
        "line": 10,
        "code": "        return function_ception(f, n, i+1, function)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 227,
    "studentId": 50,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k, total = 1, 0\n    while k<=n:\n        k += 1\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    k, total = 1, 0\n    while k<=n:\n        k += 1\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    k, total = 1, 0\n    while k<=n:\n        k += 1\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    k, total = 1, 0\n    while k<=n:\n        k += 1\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 228,
    "studentId": 945,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = 3\n    g = f\n    while not n<x:\n        g = compose1(g, f)\n        x += 1\n    return compose1(g, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    x = 3\n    g = f\n    while not n<x:\n        g = compose1(g, f)\n        x += 1\n    return compose1(g, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    x = 3\n    g = f\n    while not n<x:\n        g = compose1(g, f)\n        x += 1\n    return compose1(g, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    x = 3\n    g = f\n    while not n<x:\n        g = compose1(g, f)\n        x += 1\n    return compose1(g, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 625,
    "log": ">>> repeated(square, 0)(5)\n625\n\n# Error: expected\n#     5\n# but got\n#     625"
  },
  {
    "id": 229,
    "studentId": 449,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper_a(a):\n        def helper_b(y):\n            if y==1:\n                return a\n            y -= 1\n            return f(helper_b(y))\n        return helper_b(n)\n    return helper_a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper_a(a):\n        def helper_b(y):\n            if y==0:\n                return a\n            y -= 1\n            return f(helper_b(y))\n        return helper_b(n)\n    return helper_a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper_a(a):\n        def helper_b(y):\n            if y==1:\n            if y==0:\n                return a\n            y -= 1\n            return f(helper_b(y))\n        return helper_b(n)\n    return helper_a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper_a(a):\n        def helper_b(y):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            if y==1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            if y==0:\n"
      },
      {
        "count": 9,
        "value": "                return a\n            y -= 1\n            return f(helper_b(y))\n        return helper_b(n)\n    return helper_a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            if y==0:"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            if y==1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 230,
    "studentId": 525,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return  f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return  f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return  f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 231,
    "studentId": 905,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return \n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 232,
    "studentId": 509,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-breh), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-breh)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-lmao), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-breh), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-lmao), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-breh), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast)))))))))))))))))))))))))",
    "before": "def repeated(f, n):\n    def nega(count):\n        if count>1:\n            return f(nega(count-1))\n        return f(n)\n    return nega\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def nega(lmao):\n        breh = n\n        while breh>0:\n            lmao = f(lmao)\n            breh -= 1\n        return lmao\n    return nega\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def nega(count):\n        if count>1:\n            return f(nega(count-1))\n        return f(n)\n    def nega(lmao):\n        breh = n\n        while breh>0:\n            lmao = f(lmao)\n            breh -= 1\n        return lmao\n    return nega\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 4,
        "removed": true,
        "value": "    def nega(count):\n        if count>1:\n            return f(nega(count-1))\n        return f(n)\n"
      },
      {
        "count": 6,
        "added": true,
        "value": "    def nega(lmao):\n        breh = n\n        while breh>0:\n            lmao = f(lmao)\n            breh -= 1\n        return lmao\n"
      },
      {
        "count": 5,
        "value": "    return nega\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      6,
      7,
      8,
      9,
      10
    ],
    "removed": [
      1,
      2,
      3,
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "    def nega(lmao):"
      },
      {
        "line": 6,
        "code": "        breh = n"
      },
      {
        "line": 7,
        "code": "        while breh>0:"
      },
      {
        "line": 8,
        "code": "            lmao = f(lmao)"
      },
      {
        "line": 9,
        "code": "            breh -= 1"
      },
      {
        "line": 10,
        "code": "        return lmao"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def nega(count):"
      },
      {
        "line": 2,
        "code": "        if count>1:"
      },
      {
        "line": 3,
        "code": "            return f(nega(count-1))"
      },
      {
        "line": 4,
        "code": "        return f(n)"
      }
    ],
    "test": "repeated(triple, 5)",
    "expected": 243,
    "result": 15,
    "log": ">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n15\n\n# Error: expected\n#     243\n# but got\n#     15"
  },
  {
    "id": 233,
    "studentId": 779,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 234,
    "studentId": 23,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 235,
    "studentId": 970,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    function, k = f, 1\n    while k<=n:\n        function, k = compose1(f, function), k+1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    function, k = identity, 1\n    while k<=n:\n        function, k = compose1(f, function), k+1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    function, k = f, 1\n    function, k = identity, 1\n    while k<=n:\n        function, k = compose1(f, function), k+1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    function, k = f, 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    function, k = identity, 1\n"
      },
      {
        "count": 7,
        "value": "    while k<=n:\n        function, k = compose1(f, function), k+1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    function, k = identity, 1"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    function, k = f, 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 236,
    "studentId": 694,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeater(x):\n        for x in range(n):\n            x = f(x)\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(x):\n        for identity in range(n):\n            x = f(x)\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(x):\n        for x in range(n):\n        for identity in range(n):\n            x = f(x)\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def repeater(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        for x in range(n):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        for identity in range(n):\n"
      },
      {
        "count": 7,
        "value": "            x = f(x)\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        for identity in range(n):"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        for x in range(n):"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 3,
    "log": ">>> add_three(5)\n3\n\n# Error: expected\n#     8\n# but got\n#     3"
  },
  {
    "id": 237,
    "studentId": 574,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 238,
    "studentId": 239,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 239,
    "studentId": 290,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    return compose1(repeated(f, n), repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    return compose1(repeated(f, n), repeated(f, n-1))\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return compose1(repeated(f, n), repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "    return compose1(repeated(f, n), repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 240,
    "studentId": 914,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def func(x):\n        g = f\n        i = n\n        while i>0:\n            g = compose1(f, g)\n            i = i-1\n        return g(x)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def func(x):\n        g = identity\n        i = n\n        while i>0:\n            g = compose1(f, g)\n            i = i-1\n        return g(x)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def func(x):\n        g = f\n        g = identity\n        i = n\n        while i>0:\n            g = compose1(f, g)\n            i = i-1\n        return g(x)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def func(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        g = identity\n"
      },
      {
        "count": 10,
        "value": "        i = n\n        while i>0:\n            g = compose1(f, g)\n            i = i-1\n        return g(x)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 241,
    "studentId": 336,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n            return repeated(compose1(f, f), n-1)\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n            return repeated(compose1(f, f), n-1)\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function repeated.<locals>.helper at 0x0000025038B77E18>\n\n# Error: expected\n#     8\n# but got\n#     <function repeated.<locals>.helper at 0x0000025038B77E18>"
  },
  {
    "id": 242,
    "studentId": 79,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    count = 1\n    func = f\n    if n==0:\n        def y(x):\n            return x\n        return y\n    while count<n:\n        func = compose1(f, func)\n        count = count+1\n        if count==n:\n            return 0\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    count = 1\n    func = f\n    if n==0:\n        def y(x):\n            return x\n        return y\n    while count<n:\n        func = compose1(f, func)\n        count = count+1\n        if identity==n:\n            return 0\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    count = 1\n    func = f\n    if n==0:\n        def y(x):\n            return x\n        return y\n    while count<n:\n        func = compose1(f, func)\n        count = count+1\n        if count==n:\n        if identity==n:\n            return 0\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 10,
        "value": "def repeated(f, n):\n    count = 1\n    func = f\n    if n==0:\n        def y(x):\n            return x\n        return y\n    while count<n:\n        func = compose1(f, func)\n        count = count+1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if count==n:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        if identity==n:\n"
      },
      {
        "count": 6,
        "value": "            return 0\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      11
    ],
    "removed": [
      10
    ],
    "addedLine": [
      {
        "line": 11,
        "code": "        if identity==n:"
      }
    ],
    "removedLine": [
      {
        "line": 10,
        "code": "        if count==n:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 243,
    "studentId": 203,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        k = n\n        if k==0:\n            return x\n        else:\n            n -= 1\n            return h(f(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        k = n\n        if n==0:\n            return x\n        else:\n            return repeated(f, n-1)(f(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        k = n\n        if k==0:\n        if n==0:\n            return x\n        else:\n            n -= 1\n            return h(f(x))\n            return repeated(f, n-1)(f(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def h(x):\n        k = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if k==0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        if n==0:\n"
      },
      {
        "count": 2,
        "value": "            return x\n        else:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "            n -= 1\n            return h(f(x))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return repeated(f, n-1)(f(x))\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      9
    ],
    "removed": [
      3,
      7,
      8
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        if n==0:"
      },
      {
        "line": 9,
        "code": "            return repeated(f, n-1)(f(x))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        if k==0:"
      },
      {
        "line": 7,
        "code": "            n -= 1"
      },
      {
        "line": 8,
        "code": "            return h(f(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    k = n\nUnboundLocalError: local variable 'n' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 244,
    "studentId": 496,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-func_repeat, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), InOrderSort(ast))))))))))",
    "before": "def repeated(f, n):\n    def func_repeat(num_val):\n        while n>0:\n            num_val = f(num_val)\n            n -= 1\n        return num_val\n    return func_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func_repeat(num_val):\n        i = 0\n        while i<n:\n            num_val = f(num_val)\n            i += 1\n        return num_val\n    return func_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func_repeat(num_val):\n        while n>0:\n        i = 0\n        while i<n:\n            num_val = f(num_val)\n            n -= 1\n            i += 1\n        return num_val\n    return func_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def func_repeat(num_val):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while n>0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        i = 0\n        while i<n:\n"
      },
      {
        "count": 1,
        "value": "            num_val = f(num_val)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            n -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            i += 1\n"
      },
      {
        "count": 6,
        "value": "        return num_val\n    return func_repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      7
    ],
    "removed": [
      2,
      6
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        i = 0"
      },
      {
        "line": 4,
        "code": "        while i<n:"
      },
      {
        "line": 7,
        "code": "            i += 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        while n>0:"
      },
      {
        "line": 6,
        "code": "            n -= 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in func_repeat\n    while n > 0:\nUnboundLocalError: local variable 'n' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 245,
    "studentId": 696,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1)(x))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1))\n        return f(repeated(f, n-1)(x))\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in func\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 246,
    "studentId": 608,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return helper(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return helper(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return helper(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    def helper(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return helper(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return helper(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return helper(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return helper(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return helper(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return helper(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return helper(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return helper(repeated(f,n-1),f)\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 247,
    "studentId": 249,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ParameterNode-i, SingleChild(LeafConstNode(NameExpressionNode-n))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-apply_here), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))))), Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-apply_here), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    def apply_here(x):\n        return 5\n    return apply_here\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def apply_here(x, i = n):\n        if i==0:\n            return x\n        elif i==1:\n            return f(x)\n        else:\n            return apply_here(f(x), i-1)\n    return apply_here\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def apply_here(x):\n        return 5\n    def apply_here(x, i = n):\n        if i==0:\n            return x\n        elif i==1:\n            return f(x)\n        else:\n            return apply_here(f(x), i-1)\n    return apply_here\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "    def apply_here(x):\n        return 5\n"
      },
      {
        "count": 7,
        "added": true,
        "value": "    def apply_here(x, i = n):\n        if i==0:\n            return x\n        elif i==1:\n            return f(x)\n        else:\n            return apply_here(f(x), i-1)\n"
      },
      {
        "count": 5,
        "value": "    return apply_here\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "removed": [
      1,
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    def apply_here(x, i = n):"
      },
      {
        "line": 4,
        "code": "        if i==0:"
      },
      {
        "line": 5,
        "code": "            return x"
      },
      {
        "line": 6,
        "code": "        elif i==1:"
      },
      {
        "line": 7,
        "code": "            return f(x)"
      },
      {
        "line": 8,
        "code": "        else:"
      },
      {
        "line": 9,
        "code": "            return apply_here(f(x), i-1)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def apply_here(x):"
      },
      {
        "line": 2,
        "code": "        return 5"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 248,
    "studentId": 519,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = f\n    while n>0:\n        x = compose1(f, x)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    x = identity\n    while n>0:\n        x = compose1(f, x)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = f\n    x = identity\n    while n>0:\n        x = compose1(f, x)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    x = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    x = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        x = compose1(f, x)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    x = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    x = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 249,
    "studentId": 287,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k, function = 1, f\n    while k<n:\n        k, f = k+1, compose1(function, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    k, function = 1, f\n    while k<n:\n        k, f = k+1, compose1(function, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    k, function = 1, f\n    while k<n:\n        k, f = k+1, compose1(function, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    k, function = 1, f\n    while k<n:\n        k, f = k+1, compose1(function, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 250,
    "studentId": 1019,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(f, n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 251,
    "studentId": 959,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n            return x\n        if n==1:\n            return f(x)\n        else:\n            return compose1(f, repeated(f, n-1))\n    return repeated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n            return x\n        if n==1:\n            return f(x)\n        else:\n            return compose1(f, repeated(f, n-1))(x)\n    return repeated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n            return x\n        if n==1:\n            return f(x)\n        else:\n            return compose1(f, repeated(f, n-1))\n            return compose1(f, repeated(f, n-1))(x)\n    return repeated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n            return x\n        if n==1:\n            return f(x)\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated(f, n-1))(x)\n"
      },
      {
        "count": 5,
        "value": "    return repeated_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "            return compose1(f, repeated(f, n-1))(x)"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "            return compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x00000173E69A7E18>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x00000173E69A7E18>"
  },
  {
    "id": 252,
    "studentId": 533,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 253,
    "studentId": 900,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 254,
    "studentId": 825,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    if n==1:\n        return compose1(identity, f)\n    return compose1(identity, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    if n==1:\n        return compose1(identity, f)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    if n==1:\n        return compose1(identity, f)\n    return compose1(identity, repeated(f, n-1))\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    if n==1:\n        return compose1(identity, f)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return compose1(identity, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    return compose1(identity, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 255,
    "studentId": 896,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def retainer(x):\n        x = f\n        return x\n    yo = retainer(f)\n    def composer(a, k):\n        def h(x):\n            return a(k(x))\n        return h\n    counter = n-1\n    while counter:\n        z = composer(yo, f)\n        f = z\n        counter -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def retainer(x):\n        x = f\n        return x\n    yo = retainer(f)\n    def composer(a, k):\n        def h(x):\n            return a(k(x))\n        return h\n    counter = n-1\n    while counter:\n        z = composer(yo, f)\n        f = z\n        counter -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def retainer(x):\n        x = f\n        return x\n    yo = retainer(f)\n    def composer(a, k):\n        def h(x):\n            return a(k(x))\n        return h\n    counter = n-1\n    while counter:\n        z = composer(yo, f)\n        f = z\n        counter -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 18,
        "value": "    def retainer(x):\n        x = f\n        return x\n    yo = retainer(f)\n    def composer(a, k):\n        def h(x):\n            return a(k(x))\n        return h\n    counter = n-1\n    while counter:\n        z = composer(yo, f)\n        f = z\n        counter -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     5\n# but got\n#     Timeout"
  },
  {
    "id": 256,
    "studentId": 981,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    square\n    square2 = compose1(square, square)\n    square3 = compose1(square, compose1(square, square))\n    if (n==0):\n        return n\n    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    square\n    square2 = compose1(square, square)\n    square3 = compose1(square, compose1(square, square))\n    if (n==0):\n        return identity\n    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    square\n    square2 = compose1(square, square)\n    square3 = compose1(square, compose1(square, square))\n    if (n==0):\n        return n\n        return identity\n    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    square\n    square2 = compose1(square, square)\n    square3 = compose1(square, compose1(square, square))\n    if (n==0):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 7,
        "value": "    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "        return n"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 257,
    "studentId": 298,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    h = f\n    k = 1\n    while k<n:\n        h = compose1(f, h)\n        k += 1\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    h = f\n    k = 1\n    while k<n:\n        h = compose1(f, h)\n        k += 1\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    h = f\n    k = 1\n    while k<n:\n        h = compose1(f, h)\n        k += 1\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    h = f\n    k = 1\n    while k<n:\n        h = compose1(f, h)\n        k += 1\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 258,
    "studentId": 414,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    f2 = f\n    while n>1:\n        f2 = compose1(f, f2)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    f2 = f\n    while n>1:\n        f2 = compose1(f, f2)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    f2 = f\n    while n>1:\n        f2 = compose1(f, f2)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    f2 = f\n    while n>1:\n        f2 = compose1(f, f2)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5\nTraceback (most recent call last):\n    add_three(5\n              ^\nSyntaxError: unexpected EOF while parsing\n\n# Error: expected\n#     8\n# but got\n#     SyntaxError"
  },
  {
    "id": 259,
    "studentId": 850,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 260,
    "studentId": 318,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def help_me(x):\n        total = x\n        i = 1\n        while i<n:\n            total = f(total)\n            i += 1\n        return total\n    return help_me\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def help_me(x):\n        total = x\n        i = 0\n        while i<n:\n            total = f(total)\n            i += 1\n        return total\n    return help_me\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def help_me(x):\n        total = x\n        i = 1\n        i = 0\n        while i<n:\n            total = f(total)\n            i += 1\n        return total\n    return help_me\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def help_me(x):\n        total = x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        i = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        i = 0\n"
      },
      {
        "count": 9,
        "value": "        while i<n:\n            total = f(total)\n            i += 1\n        return total\n    return help_me\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        i = 0"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        i = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 261,
    "studentId": 134,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 1\n    new_function = f\n    while i<=n:\n        new_function = compose1(new_function, f)\n        i += 1\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 1\n    new_function = identity\n    while i<=n:\n        new_function = compose1(new_function, f)\n        i += 1\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 1\n    new_function = f\n    new_function = identity\n    while i<=n:\n        new_function = compose1(new_function, f)\n        i += 1\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    i = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    new_function = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    new_function = identity\n"
      },
      {
        "count": 8,
        "value": "    while i<=n:\n        new_function = compose1(new_function, f)\n        i += 1\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    new_function = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    new_function = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 262,
    "studentId": 545,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x, counter = n):\n        result = x\n        while counter>=0:\n            result = f(result)\n            counter -= 1\n        return result\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x, counter = n):\n        result = x\n        while counter>0:\n            result = f(result)\n            counter -= 1\n        return result\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x, counter = n):\n        result = x\n        while counter>=0:\n        while counter>0:\n            result = f(result)\n            counter -= 1\n        return result\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(x, counter = n):\n        result = x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while counter>=0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while counter>0:\n"
      },
      {
        "count": 8,
        "value": "            result = f(result)\n            counter -= 1\n        return result\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        while counter>0:"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        while counter>=0:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 263,
    "studentId": 961,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    v = f\n    while n>1:\n        v = compose1(f, v)\n        n = n-1\n    return v\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    v = f\n    while n>1:\n        v = compose1(f, v)\n        n = n-1\n    return v\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    v = f\n    while n>1:\n        v = compose1(f, v)\n        n = n-1\n    return v\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    v = f\n    while n>1:\n        v = compose1(f, v)\n        n = n-1\n    return v\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 264,
    "studentId": 29,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n        return h\n    else:\n        return lambda x: h(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n        return identity\n    else:\n        return lambda x: h(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n        return h\n        return identity\n    else:\n        return lambda x: h(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        return f(x)\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return h\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return lambda x: h(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return h"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 265,
    "studentId": 303,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 266,
    "studentId": 838,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    value_holder = f\n    while n>0:\n        value_holder = compose1(f, value_holder)\n        n -= 1\n    return value_holder\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    value_holder = identity\n    while n>0:\n        value_holder = compose1(f, value_holder)\n        n -= 1\n    return value_holder\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    value_holder = f\n    value_holder = identity\n    while n>0:\n        value_holder = compose1(f, value_holder)\n        n -= 1\n    return value_holder\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    value_holder = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    value_holder = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        value_holder = compose1(f, value_holder)\n        n -= 1\n    return value_holder\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    value_holder = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    value_holder = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 267,
    "studentId": 518,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 1\n    y = lambda x: f(x)\n    while i<=n:\n        y = compose1(f, y)\n        i += 1\n    return y\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 1\n    y = lambda x: identity(x)\n    while i<=n:\n        y = compose1(f, y)\n        i += 1\n    return y\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 1\n    y = lambda x: f(x)\n    y = lambda x: identity(x)\n    while i<=n:\n        y = compose1(f, y)\n        i += 1\n    return y\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    i = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    y = lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    y = lambda x: identity(x)\n"
      },
      {
        "count": 8,
        "value": "    while i<=n:\n        y = compose1(f, y)\n        i += 1\n    return y\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    y = lambda x: identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    y = lambda x: f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 268,
    "studentId": 31,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, a):\n        def h(x):\n            return f(a(x))\n        return h\n    a = f\n    while n>=1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, a):\n        def h(x):\n            return f(a(x))\n        return h\n    a = identity\n    while n>=1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, a):\n        def h(x):\n            return f(a(x))\n        return h\n    a = f\n    a = identity\n    while n>=1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def compose1(f, a):\n        def h(x):\n            return f(a(x))\n        return h\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>=1:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    a = identity"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    a = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 269,
    "studentId": 339,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-j))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeated2))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))",
    "before": "def repeated(f, n):\n    def repeated2(j):\n        if j==0:\n            return n\n        else:\n            k = compose1(f, j)\n            return repeated2(j-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated2(j):\n        counter = 1\n        while counter<=n:\n            j = f(j)\n            counter += 1\n        return j\n    return repeated2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated2(j):\n        if j==0:\n            return n\n        else:\n            k = compose1(f, j)\n            return repeated2(j-1)\n        counter = 1\n        while counter<=n:\n            j = f(j)\n            counter += 1\n        return j\n    return repeated2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def repeated2(j):\n"
      },
      {
        "count": 5,
        "removed": true,
        "value": "        if j==0:\n            return n\n        else:\n            k = compose1(f, j)\n            return repeated2(j-1)\n"
      },
      {
        "count": 6,
        "added": true,
        "value": "        counter = 1\n        while counter<=n:\n            j = f(j)\n            counter += 1\n        return j\n    return repeated2\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7,
      8,
      9,
      10,
      11,
      12
    ],
    "removed": [
      2,
      3,
      4,
      5,
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        counter = 1"
      },
      {
        "line": 8,
        "code": "        while counter<=n:"
      },
      {
        "line": 9,
        "code": "            j = f(j)"
      },
      {
        "line": 10,
        "code": "            counter += 1"
      },
      {
        "line": 11,
        "code": "        return j"
      },
      {
        "line": 12,
        "code": "    return repeated2"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        if j==0:"
      },
      {
        "line": 3,
        "code": "            return n"
      },
      {
        "line": 4,
        "code": "        else:"
      },
      {
        "line": 5,
        "code": "            k = compose1(f, j)"
      },
      {
        "line": 6,
        "code": "            return repeated2(j-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 270,
    "studentId": 686,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 271,
    "studentId": 35,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def cycle(x):\n        i = n\n        while i>0:\n            n = f(x)\n            i -= 1\n        return n\n    return cycle\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def cycle(x):\n        i = n\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return cycle\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def cycle(x):\n        i = n\n        while i>0:\n            n = f(x)\n            x = f(x)\n            i -= 1\n        return n\n        return x\n    return cycle\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def cycle(x):\n        i = n\n        while i>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            n = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(x)\n"
      },
      {
        "count": 1,
        "value": "            i -= 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return x\n"
      },
      {
        "count": 5,
        "value": "    return cycle\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      8
    ],
    "removed": [
      4,
      7
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x = f(x)"
      },
      {
        "line": 8,
        "code": "        return x"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            n = f(x)"
      },
      {
        "line": 7,
        "code": "        return n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in cycle\n    i = n\nUnboundLocalError: local variable 'n' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 272,
    "studentId": 1023,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    for i in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    for i in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    g = identity\n    for i in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 7,
        "value": "    for i in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 273,
    "studentId": 302,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return identity(x)\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return identity(x)\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return identity(x)\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return identity(x)\n        if n==1:\n            return f(x)\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in h\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 274,
    "studentId": 1013,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def func(num):\n        def helper(x):\n            if x==n:\n                return f(num)\n            else:\n                return f(helper(x+1))\n        return helper(0)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(num):\n        def helper(x):\n            if x==n:\n                return identity(num)\n            else:\n                return f(helper(x+1))\n        return helper(0)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func(num):\n        def helper(x):\n            if x==n:\n                return f(num)\n                return identity(num)\n            else:\n                return f(helper(x+1))\n        return helper(0)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def func(num):\n        def helper(x):\n            if x==n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                return f(num)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                return identity(num)\n"
      },
      {
        "count": 8,
        "value": "            else:\n                return f(helper(x+1))\n        return helper(0)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "                return identity(num)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "                return f(num)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 275,
    "studentId": 38,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-composer, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    def composer(total):\n        counter = 0\n        while counter<n:\n            total = f(x)\n            counter += 1\n        return total\n    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def composer(x):\n        counter = 0\n        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def composer(total):\n    def composer(x):\n        counter = 0\n        while counter<n:\n            total = f(x)\n            x = f(x)\n            counter += 1\n        return total\n        return x\n    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    def composer(total):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    def composer(x):\n"
      },
      {
        "count": 2,
        "value": "        counter = 0\n        while counter<n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            total = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(x)\n"
      },
      {
        "count": 1,
        "value": "            counter += 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return total\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return x\n"
      },
      {
        "count": 5,
        "value": "    return composer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      6,
      9
    ],
    "removed": [
      1,
      5,
      8
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    def composer(x):"
      },
      {
        "line": 6,
        "code": "            x = f(x)"
      },
      {
        "line": 9,
        "code": "        return x"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def composer(total):"
      },
      {
        "line": 5,
        "code": "            total = f(x)"
      },
      {
        "line": 8,
        "code": "        return total"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in composer\n    total = f(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     8\n# but got\n#     NameError"
  },
  {
    "id": 276,
    "studentId": 675,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 277,
    "studentId": 951,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def apply(x):\n        if n==0:\n            return x\n        return repeated(f, n-1)(x)\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def apply(x):\n        if n==0:\n            return x\n        return f(repeated(f, n-1)(x))\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def apply(x):\n        if n==0:\n            return x\n        return repeated(f, n-1)(x)\n        return f(repeated(f, n-1)(x))\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def apply(x):\n        if n==0:\n            return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(f, n-1)(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 278,
    "studentId": 946,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 279,
    "studentId": 366,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = 0\n    x = f\n    while k<n:\n        x = compose1(f, x)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    k = 0\n    x = identity\n    while k<n:\n        x = compose1(f, x)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    k = 0\n    x = f\n    x = identity\n    while k<n:\n        x = compose1(f, x)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    k = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    x = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    x = identity\n"
      },
      {
        "count": 8,
        "value": "    while k<n:\n        x = compose1(f, x)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    x = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    x = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 280,
    "studentId": 178,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if (n>1):\n        return compose1(f, repeated(f, n-1))\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if (n>1):\n        return compose1(f, repeated(f, n-1))\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if (n>1):\n        return compose1(f, repeated(f, n-1))\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if (n>1):\n        return compose1(f, repeated(f, n-1))\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 281,
    "studentId": 385,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    starter = 1\n    new = f\n    while starter<=n:\n        new = compose1(f, new)\n        starter += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    starter = 1\n    new = identity\n    while starter<=n:\n        new = compose1(f, new)\n        starter += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    starter = 1\n    new = f\n    new = identity\n    while starter<=n:\n        new = compose1(f, new)\n        starter += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    starter = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    new = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    new = identity\n"
      },
      {
        "count": 8,
        "value": "    while starter<=n:\n        new = compose1(f, new)\n        starter += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    new = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    new = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 282,
    "studentId": 196,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 0\n    def compose2(num):\n        result = f(num)\n        for x in range(1, n):\n            result = f(result)\n        return result\n    return compose2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose2(num):\n        result = f(num)\n        for x in range(1, n):\n            result = f(result)\n        return result\n    return compose2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 0\n        return identity\n    def compose2(num):\n        result = f(num)\n        for x in range(1, n):\n            result = f(result)\n        return result\n    return compose2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    def compose2(num):\n        result = f(num)\n        for x in range(1, n):\n            result = f(result)\n        return result\n    return compose2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 283,
    "studentId": 603,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 284,
    "studentId": 237,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        while n>1:\n            n -= 1\n            return compose1(f, repeated(f, n)), n\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        while n>1:\n            n -= 1\n            return (compose1(f, repeated(f, n)))\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        while n>1:\n            n -= 1\n            return compose1(f, repeated(f, n)), n\n            return (compose1(f, repeated(f, n)))\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        while n>1:\n            n -= 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated(f, n)), n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return (compose1(f, repeated(f, n)))\n"
      },
      {
        "count": 5,
        "value": "        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "            return (compose1(f, repeated(f, n)))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "            return compose1(f, repeated(f, n)), n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'tuple' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 285,
    "studentId": 693,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def help_repeat(k, f):\n        if k==n:\n            return f\n        else:\n            return compose1(f, help_repeat(k+1, f))\n    return help_repeat(1, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def help_repeat(k, f):\n        if k==n:\n            return f\n        else:\n            return compose1(f, help_repeat(k+1, f))\n    return help_repeat(1, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def help_repeat(k, f):\n        if k==n:\n            return f\n        else:\n            return compose1(f, help_repeat(k+1, f))\n    return help_repeat(1, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def help_repeat(k, f):\n        if k==n:\n            return f\n        else:\n            return compose1(f, help_repeat(k+1, f))\n    return help_repeat(1, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat\n    return compose1( f, help_repeat(k+1, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat\n    return compose1( f, help_repeat(k+1, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat\n    return compose1( f, help_repeat(k+1, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat\n    return compose1( f, help_repeat(k+1, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat\n    return compose1( f, help_repeat(k+1, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat\n    return compose1( f, help_repeat(k+1, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in help_repeat\n    if k==n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 286,
    "studentId": 947,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 287,
    "studentId": 909,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    fun = compose1(f, f)\n    i = 2\n    while i<n:\n        fun = compose1(f, fun)\n        i += 1\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    fun = compose1(f, f)\n    i = 2\n    while i<n:\n        fun = compose1(f, fun)\n        i += 1\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return identity\n    fun = compose1(f, f)\n    i = 2\n    while i<n:\n        fun = compose1(f, fun)\n        i += 1\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    fun = compose1(f, f)\n    i = 2\n    while i<n:\n        fun = compose1(f, fun)\n        i += 1\n    return fun\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 288,
    "studentId": 831,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def nth(x):\n        k = n\n        while k>0:\n            x = g(x)\n            k = k-1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def nth(x):\n        k = n\n        while k>0:\n            x = f(x)\n            k = k-1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def nth(x):\n        k = n\n        while k>0:\n            x = g(x)\n            x = f(x)\n            k = k-1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def nth(x):\n        k = n\n        while k>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            x = g(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(x)\n"
      },
      {
        "count": 7,
        "value": "            k = k-1\n        return x\n    return nth\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x = f(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            x = g(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in nth\n    x = g(x)\nNameError: name 'g' is not defined\n\n# Error: expected\n#     8\n# but got\n#     NameError"
  },
  {
    "id": 289,
    "studentId": 264,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = f\n    if n==0:\n        return identity\n    for i in range(n-1):\n        x = compose1(x, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    x = f\n    if n==0:\n        return identity\n    for i in range(n-1):\n        x = compose1(x, f)\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = f\n    if n==0:\n        return identity\n    for i in range(n-1):\n        x = compose1(x, f)\n    return f\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    x = f\n    if n==0:\n        return identity\n    for i in range(n-1):\n        x = compose1(x, f)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return x\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "    return x"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "    return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 290,
    "studentId": 24,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(i):\n        if i>n:\n            return f\n        else:\n            return compose(f, helper(i+1))\n    return helper(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(i):\n        if i>n:\n            return identity\n        else:\n            return compose(f, helper(i+1))\n    return helper(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(i):\n        if i>n:\n            return f\n            return identity\n        else:\n            return compose(f, helper(i+1))\n    return helper(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(i):\n        if i>n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 7,
        "value": "        else:\n            return compose(f, helper(i+1))\n    return helper(1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "            return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 291,
    "studentId": 89,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def helper2(x):\n        if x==0:\n            return f\n        else:\n            return f(repeated(f, x-1))\n    return helper2(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper2(x):\n        if x==0:\n            return compose1(identity, identity)\n        else:\n            return compose1(f, repeated(f, x-1))\n    return helper2(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper2(x):\n        if x==0:\n            return f\n            return compose1(identity, identity)\n        else:\n            return f(repeated(f, x-1))\n            return compose1(f, repeated(f, x-1))\n    return helper2(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper2(x):\n        if x==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, x-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated(f, x-1))\n"
      },
      {
        "count": 5,
        "value": "    return helper2(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      7
    ],
    "removed": [
      3,
      6
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return compose1(identity, identity)"
      },
      {
        "line": 7,
        "code": "            return compose1(f, repeated(f, x-1))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f"
      },
      {
        "line": 6,
        "code": "            return f(repeated(f, x-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return helper2(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper2\n    return f(repeated(f, x - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return helper2(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper2\n    return f(repeated(f, x - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return helper2(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper2\n    return f(repeated(f, x - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 292,
    "studentId": 101,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        i = 0\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        i = 0\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def helper(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        i = 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        i = 1\n"
      },
      {
        "count": 9,
        "value": "        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        i = 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        i = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 293,
    "studentId": 492,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def help(x):\n        k = 0\n        while k<=n:\n            x = f(x)\n            k += 1\n        return x\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def help(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k += 1\n        return x\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def help(x):\n        k = 0\n        k = 1\n        while k<=n:\n            x = f(x)\n            k += 1\n        return x\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def help(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        k = 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        k = 1\n"
      },
      {
        "count": 9,
        "value": "        while k<=n:\n            x = f(x)\n            k += 1\n        return x\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        k = 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        k = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 294,
    "studentId": 719,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    def repeated_function(x):\n        if n==0:\n            return x\n        else:\n            while n>0:\n                n_func = f(x)\n                n = n-1\n                return repeated(n_func)\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_function(x):\n        if n==0:\n            return x\n        else:\n            n_func = f(x)\n            return repeated(f, n-1)(n_func)\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_function(x):\n        if n==0:\n            return x\n        else:\n            while n>0:\n                n_func = f(x)\n                n = n-1\n                return repeated(n_func)\n            n_func = f(x)\n            return repeated(f, n-1)(n_func)\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def repeated_function(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 4,
        "removed": true,
        "value": "            while n>0:\n                n_func = f(x)\n                n = n-1\n                return repeated(n_func)\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "            n_func = f(x)\n            return repeated(f, n-1)(n_func)\n"
      },
      {
        "count": 5,
        "value": "    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9,
      10
    ],
    "removed": [
      5,
      6,
      7,
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "            n_func = f(x)"
      },
      {
        "line": 10,
        "code": "            return repeated(f, n-1)(n_func)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            while n>0:"
      },
      {
        "line": 6,
        "code": "                n_func = f(x)"
      },
      {
        "line": 7,
        "code": "                n = n-1"
      },
      {
        "line": 8,
        "code": "                return repeated(n_func)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated_function\n    if n == 0:\nUnboundLocalError: local variable 'n' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 295,
    "studentId": 77,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def compose1(a, b):\n        def c(x):\n            return a(b(x))\n        return c\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)",
    "after": "def repeated(f, n):\n    def compose1(a, b):\n        def c(x):\n            return a(b(x))\n        return c\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)",
    "code": "def repeated(f, n):\n    def compose1(a, b):\n        def c(x):\n            return a(b(x))\n        return c\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def compose1(a, b):\n        def c(x):\n            return a(b(x))\n        return c\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 296,
    "studentId": 338,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = compose1\n    for i in range(n):\n        x = compose1(x, f)\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    x = identity\n    for i in range(n):\n        x = compose1(x, f)\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = compose1\n    x = identity\n    for i in range(n):\n        x = compose1(x, f)\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    x = compose1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    x = identity\n"
      },
      {
        "count": 7,
        "value": "    for i in range(n):\n        x = compose1(x, f)\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    x = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    x = compose1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 297,
    "studentId": 386,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n    return f(repeated(f, n-1))\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return identity(n)\n    return f(repeated(f, n-1))\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 5,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return identity(n)"
      },
      {
        "line": 3,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 298,
    "studentId": 800,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\n    return compose1(repeated(f, n), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\n    return compose1(repeated(f, n), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\n    return compose1(repeated(f, n), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\n    return compose1(repeated(f, n), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 299,
    "studentId": 368,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    z = f\n    while n>0:\n        z = compose1(z, f)\n        n -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    z = identity\n    while n>0:\n        z = compose1(z, f)\n        n -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    z = f\n    z = identity\n    while n>0:\n        z = compose1(z, f)\n        n -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    z = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    z = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        z = compose1(z, f)\n        n -= 1\n    return z\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    z = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    z = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 300,
    "studentId": 98,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 301,
    "studentId": 226,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1 or n==0:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1 or n==0:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1 or n==0:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1 or n==0:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 302,
    "studentId": 99,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    result = f\n    while 1<n:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    result = f\n    while 1<n:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    result = f\n    while 1<n:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    result = f\n    while 1<n:\n        result = compose1(f, result)\n        n -= 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 303,
    "studentId": 483,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(NameExpressionNode-identity)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    while n>1:\n        func = f(x)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    x = identity\n    while n>=1:\n        x = compose1(f, x)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    while n>1:\n        func = f(x)\n    x = identity\n    while n>=1:\n        x = compose1(f, x)\n        n -= 1\n    return func\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "    while n>1:\n        func = f(x)\n"
      },
      {
        "count": 3,
        "added": true,
        "value": "    x = identity\n    while n>=1:\n        x = compose1(f, x)\n"
      },
      {
        "count": 1,
        "value": "        n -= 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return func\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return x\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      5,
      8
    ],
    "removed": [
      1,
      2,
      7
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    x = identity"
      },
      {
        "line": 4,
        "code": "    while n>=1:"
      },
      {
        "line": 5,
        "code": "        x = compose1(f, x)"
      },
      {
        "line": 8,
        "code": "    return x"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    while n>1:"
      },
      {
        "line": 2,
        "code": "        func = f(x)"
      },
      {
        "line": 7,
        "code": "    return func"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    func = f(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 304,
    "studentId": 802,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper_function(x):\n        if n==0:\n            return 0\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper_function(x):\n        if n==0:\n            return 0\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper_function(x):\n        if n==0:\n            return 0\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def helper_function(x):\n        if n==0:\n            return 0\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": 3,
    "log": ">>> add_three(5)\n3\n\n# Error: expected\n#     8\n# but got\n#     3"
  },
  {
    "id": 305,
    "studentId": 224,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    apply = f\n    while n>1:\n        apply = compose1(f, apply)\n        n -= 1\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    apply = f\n    while n>1:\n        apply = compose1(f, apply)\n        n -= 1\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    apply = f\n    while n>1:\n        apply = compose1(f, apply)\n        n -= 1\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    apply = f\n    while n>1:\n        apply = compose1(f, apply)\n        n -= 1\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 306,
    "studentId": 882,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        compose1(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        compose1(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        compose1(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        compose1(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    compose1(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    compose1(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    compose1(repeated(f, n-1))\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 307,
    "studentId": 774,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 308,
    "studentId": 437,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if (n==1):\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if(n==1):\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 309,
    "studentId": 130,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        new_f = f\n        for i in range(1, n):\n            new_f = compose1(f, new_f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        a = f\n        for i in range(1, n):\n            a = compose1(f, a)\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        new_f = f\n        a = f\n        for i in range(1, n):\n            new_f = compose1(f, new_f)\n    return f\n            a = compose1(f, a)\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        new_f = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        a = f\n"
      },
      {
        "count": 1,
        "value": "        for i in range(1, n):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "            new_f = compose1(f, new_f)\n    return f\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "            a = compose1(f, a)\n    return a\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      9,
      10
    ],
    "removed": [
      4,
      7,
      8
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        a = f"
      },
      {
        "line": 9,
        "code": "            a = compose1(f, a)"
      },
      {
        "line": 10,
        "code": "    return a"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        new_f = f"
      },
      {
        "line": 7,
        "code": "            new_f = compose1(f, new_f)"
      },
      {
        "line": 8,
        "code": "    return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 310,
    "studentId": 854,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    def func(x):\n        return x\n    if n==0:\n        return func\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(x):\n        return x\n    if n==0:\n        return func\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func(x):\n        return x\n    if n==0:\n        return func\n    return f(repeated(f, n-1))\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def func(x):\n        return x\n    if n==0:\n        return func\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 311,
    "studentId": 546,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if (n==0):\n        return compose1(identity, identity)\n    else:\n        compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if (n==0):\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if (n==0):\n        return compose1(identity, identity)\n    else:\n        compose1(f, repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if (n==0):\n        return compose1(identity, identity)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 312,
    "studentId": 468,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return repeated_helper\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return compose1(f, f)",
    "after": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n            return identity(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return repeated_helper\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return compose1(f, f)",
    "code": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n            return f(x)\n            return identity(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return repeated_helper\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return compose1(f, f)\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def repeated_helper(x):\n        if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity(x)\n"
      },
      {
        "count": 8,
        "value": "        else:\n            return f(repeated(f, n-1)(x))\n    return repeated_helper\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    return compose1(f, f)"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 313,
    "studentId": 42,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        i, total = 1, n\n        while i<=n:\n            total = f(total)\n            i += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        i, total = 1, x\n        while i<=n:\n            total = f(total)\n            i += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        i, total = 1, n\n        i, total = 1, x\n        while i<=n:\n            total = f(total)\n            i += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def h(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        i, total = 1, n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        i, total = 1, x\n"
      },
      {
        "count": 9,
        "value": "        while i<=n:\n            total = f(total)\n            i += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        i, total = 1, x"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        i, total = 1, n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 314,
    "studentId": 529,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    elif (n==1):\n        return lambda x: f(x)\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    elif (n==1):\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    elif (n==1):\n        return lambda x: f(x)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    elif (n==1):\n        return lambda x: f(x)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 315,
    "studentId": 863,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    new_func, i = f, 1\n    while i<n:\n        new_func = compose1(f, new_func)\n        i += 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    new_func, i = f, 1\n    while i<n:\n        new_func = compose1(f, new_func)\n        i += 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    new_func, i = f, 1\n    while i<n:\n        new_func = compose1(f, new_func)\n        i += 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    new_func, i = f, 1\n    while i<n:\n        new_func = compose1(f, new_func)\n        i += 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 316,
    "studentId": 754,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return \n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 6,
        "value": "        return \n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 317,
    "studentId": 1071,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-output_fuction))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-output_fuction, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def output_fuction(x):\n        i = 0\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def output_fuction(x):\n        i = 0\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return output_fuction\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def output_fuction(x):\n        i = 0\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return output_fuction\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def output_fuction(x):\n        i = 0\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return output_fuction\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 7,
        "code": "    return output_fuction"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 318,
    "studentId": 128,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    def new_function(x):\n        total = f(x)\n        y = 0\n        while (y<=n):\n            total = f(total)\n            y = y+1\n        return total\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def new_function(x):\n        total = x\n        y = 1\n        while (y<=n):\n            total = f(total)\n            y = y+1\n        return total\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def new_function(x):\n        total = f(x)\n        y = 0\n        total = x\n        y = 1\n        while (y<=n):\n            total = f(total)\n            y = y+1\n        return total\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def new_function(x):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        total = f(x)\n        y = 0\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        total = x\n        y = 1\n"
      },
      {
        "count": 9,
        "value": "        while (y<=n):\n            total = f(total)\n            y = y+1\n        return total\n    return new_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        total = x"
      },
      {
        "line": 5,
        "code": "        y = 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        total = f(x)"
      },
      {
        "line": 3,
        "code": "        y = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 10,
    "log": ">>> add_three(5)\n10\n\n# Error: expected\n#     8\n# but got\n#     10"
  },
  {
    "id": 319,
    "studentId": 839,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    new_func = f\n    n -= 1\n    while n>=0:\n        new_func = compose1(new_func, f)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    new_func = identity\n    n -= 1\n    while n>=0:\n        new_func = compose1(new_func, f)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    new_func = f\n    new_func = identity\n    n -= 1\n    while n>=0:\n        new_func = compose1(new_func, f)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    new_func = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    new_func = identity\n"
      },
      {
        "count": 9,
        "value": "    n -= 1\n    while n>=0:\n        new_func = compose1(new_func, f)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    new_func = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    new_func = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 320,
    "studentId": 259,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def repeated_help(x):\n        if n==0:\n            return x\n        return compose1(f, repeated(f, n-1))\n    return repeated_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_help(x):\n        if n==0:\n            return x\n        return compose1(f, repeated(f, n-1))(x)\n    return repeated_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_help(x):\n        if n==0:\n            return x\n        return compose1(f, repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))(x)\n    return repeated_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def repeated_help(x):\n        if n==0:\n            return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))(x)\n"
      },
      {
        "count": 5,
        "value": "    return repeated_help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x000001894ADADE18>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x000001894ADADE18>"
  },
  {
    "id": 321,
    "studentId": 95,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 5,
        "value": "    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f,n-1))\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 322,
    "studentId": 999,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 323,
    "studentId": 688,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = f\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = identity\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = f\n    a = identity\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    a = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    a = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 324,
    "studentId": 663,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f), n-1)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return compose1(f, repeated(f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    return compose1(f, repeated(f), n-1)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1((f,repeated(f)),n-1)\nTypeError: repeated() missing 1 required positional argument: 'n'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 325,
    "studentId": 811,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        def lol(x):\n            return lol(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        def lol(x):\n            return lol(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        def lol(x):\n            return lol(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 8,
        "value": "        def lol(x):\n            return lol(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 326,
    "studentId": 633,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    current = f\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    while (n>0):\n        current = compose1(f, current)\n        n -= 1\n    return current\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    current = identity\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    while (n>0):\n        current = compose1(f, current)\n        n -= 1\n    return current\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    current = f\n    current = identity\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    while (n>0):\n        current = compose1(f, current)\n        n -= 1\n    return current\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    current = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    current = identity\n"
      },
      {
        "count": 16,
        "value": "    if n==0:\n        return identity\n    if n==1:\n        return f\n    while (n>0):\n        current = compose1(f, current)\n        n -= 1\n    return current\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    current = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    current = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 327,
    "studentId": 611,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(g, k):\n        if k==0:\n            return g\n        else:\n            return helper(compose1(g, f), k-1)\n    return helper(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(g, k):\n        if k==0:\n            return g\n        else:\n            return helper(compose1(g, f), k-1)\n    return helper(identity, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(g, k):\n        if k==0:\n            return g\n        else:\n            return helper(compose1(g, f), k-1)\n    return helper(f, n)\n    return helper(identity, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def helper(g, k):\n        if k==0:\n            return g\n        else:\n            return helper(compose1(g, f), k-1)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return helper(f, n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return helper(identity, n)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "    return helper(identity, n)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "    return helper(f, n)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 328,
    "studentId": 378,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    counter = 0\n    x = identity\n    while counter<n:\n        x = compose(f, x)\n        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    counter = 0\n    x = identity\n    while counter<n:\n        x = compose1(f, x)\n        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    counter = 0\n    x = identity\n    while counter<n:\n        x = compose(f, x)\n        x = compose1(f, x)\n        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    counter = 0\n    x = identity\n    while counter<n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        x = compose(f, x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        x = compose1(f, x)\n"
      },
      {
        "count": 6,
        "value": "        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        x = compose1(f, x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        x = compose(f, x)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    x = compose(f, x)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 329,
    "studentId": 642,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 330,
    "studentId": 1041,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if (n==0):\n        return x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if (n==0):\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if (n==0):\n        return x\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if (n==0):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return x"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    else: return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    else: return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated\n    else: return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 45, in repeated\n    if(n==0): return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 331,
    "studentId": 227,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_func(x):\n        i = n-1\n        result = f(x)\n        while i>0:\n            result = f(result)\n            i -= 1\n        return result\n    return repeated_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_func(x):\n        i = n-1\n        result = f(x)\n        while i>0:\n            result = f(result)\n            i -= 1\n        return result\n    return repeated_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_func(x):\n        i = n-1\n        result = f(x)\n        while i>0:\n            result = f(result)\n            i -= 1\n        return result\n    return repeated_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def repeated_func(x):\n        i = n-1\n        result = f(x)\n        while i>0:\n            result = f(result)\n            i -= 1\n        return result\n    return repeated_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 332,
    "studentId": 174,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def inner1(x):\n        if n==0:\n            return f(x)\n        return repeated(f, n-1)(f(x))\n    return inner1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def inner1(x):\n        if n==0:\n            return identity(x)\n        return repeated(f, n-1)(f(x))\n    return inner1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def inner1(x):\n        if n==0:\n            return f(x)\n            return identity(x)\n        return repeated(f, n-1)(f(x))\n    return inner1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def inner1(x):\n        if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity(x)\n"
      },
      {
        "count": 6,
        "value": "        return repeated(f, n-1)(f(x))\n    return inner1\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 333,
    "studentId": 712,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(compose1(repeated(f, n-1), f(x)))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(compose1(repeated(f, n-1), f(x)))\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return lambda x: f(compose1(repeated(f, n-1), f(x)))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return lambda x: f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return lambda x: f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return lambda x: f(compose1(repeated(f, n-1), f(x)))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(compose1((repeated (f,n-1),f(x))))\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 334,
    "studentId": 699,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 335,
    "studentId": 1027,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    else:\n        return compose1(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    else:\n        return compose1(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if (n==0):\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose1(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n-1))\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 336,
    "studentId": 604,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def num(x):\n        a = n\n        tot = 1\n        tot = f(x)\n        while a-1>0:\n            tot = f(tot)\n            a = a-1\n        return tot\n    return num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def num(x):\n        a = n\n        tot = 1\n        tot = f(x)\n        while a-1>0:\n            tot = f(tot)\n            a = a-1\n        return tot\n    return num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def num(x):\n        a = n\n        tot = 1\n        tot = f(x)\n        while a-1>0:\n            tot = f(tot)\n            a = a-1\n        return tot\n    return num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 13,
        "value": "    def num(x):\n        a = n\n        tot = 1\n        tot = f(x)\n        while a-1>0:\n            tot = f(tot)\n            a = a-1\n        return tot\n    return num\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 337,
    "studentId": 520,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f(x)\n    func = compose1(f, f)\n    while n>2:\n        n -= 1\n        func = compose1(f, func)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f(x)\n    func = compose1(f, f)\n    while n>2:\n        n -= 1\n        func = compose1(f, func)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f(x)\n    func = compose1(f, f)\n    while n>2:\n        n -= 1\n        func = compose1(f, func)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 11,
        "value": "    if n==1:\n        return f(x)\n    func = compose1(f, f)\n    while n>2:\n        n -= 1\n        func = compose1(f, func)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 625,
    "log": ">>> repeated(square, 0)(5)\n625\n\n# Error: expected\n#     5\n# but got\n#     625"
  },
  {
    "id": 338,
    "studentId": 399,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 339,
    "studentId": 1021,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    def h(x):\n        if n==1:\n            return f(x)\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    if n ==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 340,
    "studentId": 973,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    elif n==1:\n        return f(n)\n    else:\n        return compose1(repeated(compose1(f, f), n-1), f(n))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    elif n==1:\n        return f(n)\n        return f\n    else:\n        return compose1(repeated(compose1(f, f), n-1), f(n))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 1,
        "value": "    elif n==1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(repeated(compose1(f, f), n-1), f(n))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6,
      9
    ],
    "removed": [
      2,
      5,
      8
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      },
      {
        "line": 6,
        "code": "        return f"
      },
      {
        "line": 9,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      },
      {
        "line": 5,
        "code": "        return f(n)"
      },
      {
        "line": 8,
        "code": "        return compose1(repeated(compose1(f, f), n-1), f(n))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 341,
    "studentId": 543,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    return_funct = f\n    for i in range(n-1):\n        return_funct = compose1(f, return_funct)\n    return return_funct\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return_funct = f\n    for i in range(n-1):\n        return_funct = compose1(f, return_funct)\n    return return_funct\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return identity\n    return_funct = f\n    for i in range(n-1):\n        return_funct = compose1(f, return_funct)\n    return return_funct\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 8,
        "value": "    return_funct = f\n    for i in range(n-1):\n        return_funct = compose1(f, return_funct)\n    return return_funct\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 342,
    "studentId": 421,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 1\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 1\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 1"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 343,
    "studentId": 1034,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    G = f\n    while n>1:\n        G = compose1(f, G)\n        n = n-1\n    return G\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    G = f\n    while n>1:\n        G = compose1(f, G)\n        n = n-1\n    return G\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    G = f\n    while n>1:\n        G = compose1(f, G)\n        n = n-1\n    return G\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    G = f\n    while n>1:\n        G = compose1(f, G)\n        n = n-1\n    return G\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 344,
    "studentId": 715,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f()\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f()\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f()\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f()"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return f()\nTypeError: increment() missing 1 required positional argument: 'x'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 345,
    "studentId": 848,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    result = lambda x: f(x)\n    i = 1\n    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\n    i = 1\n    x = lambda x: x\n    print(x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    result = lambda x: identity(x)\n    i = 1\n    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\n    i = 1\n    x = lambda x: x\n    print(x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    result = lambda x: f(x)\n    result = lambda x: identity(x)\n    i = 1\n    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\n    i = 1\n    x = lambda x: x\n    print(x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    result = lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    result = lambda x: identity(x)\n"
      },
      {
        "count": 12,
        "value": "    i = 1\n    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\n    i = 1\n    x = lambda x: x\n    print(x)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    result = lambda x: identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    result = lambda x: f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 346,
    "studentId": 731,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x, a = n):\n        if a==0:\n            return f(x)\n        else:\n            return f(helper(x, a-1))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x, a = n):\n        if a==0:\n            return identity(x)\n        else:\n            return f(helper(x, a-1))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x, a = n):\n        if a==0:\n            return f(x)\n            return identity(x)\n        else:\n            return f(helper(x, a-1))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(x, a = n):\n        if a==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity(x)\n"
      },
      {
        "count": 7,
        "value": "        else:\n            return f(helper(x, a-1))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 347,
    "studentId": 377,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def recursor(m):\n        i = 1\n        y = m\n        while i<=n:\n            y = compose1(f, f)(y)\n            i += 1\n        return y\n    return recursor\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def recursor(m):\n        i = 1\n        y = m\n        while i<=n:\n            y = compose1(identity, f)(y)\n            i += 1\n        return y\n    return recursor\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def recursor(m):\n        i = 1\n        y = m\n        while i<=n:\n            y = compose1(f, f)(y)\n            y = compose1(identity, f)(y)\n            i += 1\n        return y\n    return recursor\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def recursor(m):\n        i = 1\n        y = m\n        while i<=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            y = compose1(f, f)(y)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            y = compose1(identity, f)(y)\n"
      },
      {
        "count": 7,
        "value": "            i += 1\n        return y\n    return recursor\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            y = compose1(identity, f)(y)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            y = compose1(f, f)(y)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 11,
    "log": ">>> add_three(5)\n11\n\n# Error: expected\n#     8\n# but got\n#     11"
  },
  {
    "id": 348,
    "studentId": 668,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = lambda x: x\n    k = n-1\n    while k>=1:\n        a = compose1(f, a)\n        k -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = lambda x: x\n    k = n-0\n    while k>=1:\n        a = compose1(f, a)\n        k -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = lambda x: x\n    k = n-1\n    k = n-0\n    while k>=1:\n        a = compose1(f, a)\n        k -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    a = lambda x: x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    k = n-1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    k = n-0\n"
      },
      {
        "count": 8,
        "value": "    while k>=1:\n        a = compose1(f, a)\n        k -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    k = n-0"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    k = n-1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 349,
    "studentId": 398,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 350,
    "studentId": 289,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-internal, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-internal, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-internal, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    k = 1\n    def internal(args):\n        result = args\n        while k<=n:\n            result = f(result)\n            k += 1\n        return result\n    return internal\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def internal(args):\n        k = 1\n        result = args\n        while k<=n:\n            result = f(result)\n            k += 1\n        return result\n    return internal\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    k = 1\n    def internal(args):\n        k = 1\n        result = args\n        while k<=n:\n            result = f(result)\n            k += 1\n        return result\n    return internal\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    k = 1\n"
      },
      {
        "count": 1,
        "value": "    def internal(args):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        k = 1\n"
      },
      {
        "count": 10,
        "value": "        result = args\n        while k<=n:\n            result = f(result)\n            k += 1\n        return result\n    return internal\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        k = 1"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    k = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in internal\n    while k<=n:\nUnboundLocalError: local variable 'k' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 351,
    "studentId": 380,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 352,
    "studentId": 257,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        counter = 1\n        if n==0:\n            return x\n        h = f(x)\n        while counter<n:\n            counter += 1\n            s = f(h)\n        return s\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        counter = 1\n        if n==0:\n            return x\n        h = f(x)\n        while counter<n:\n            counter += 1\n            h = f(h)\n        return h\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        counter = 1\n        if n==0:\n            return x\n        h = f(x)\n        while counter<n:\n            counter += 1\n            s = f(h)\n        return s\n            h = f(h)\n        return h\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def helper(x):\n        counter = 1\n        if n==0:\n            return x\n        h = f(x)\n        while counter<n:\n            counter += 1\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "            s = f(h)\n        return s\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "            h = f(h)\n        return h\n"
      },
      {
        "count": 5,
        "value": "    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      10,
      11
    ],
    "removed": [
      8,
      9
    ],
    "addedLine": [
      {
        "line": 10,
        "code": "            h = f(h)"
      },
      {
        "line": 11,
        "code": "        return h"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "            s = f(h)"
      },
      {
        "line": 9,
        "code": "        return s"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 353,
    "studentId": 11,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 6,
        "value": "    while n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 354,
    "studentId": 326,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        a = 0\n        if n==0:\n            return x\n        while a<=n:\n            wow = lambda x: f(x)\n            b = wow(x)\n            x = wow(x)\n            a += 1\n        return b\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        a = 0\n        if n==0:\n            return x\n        while a<=n:\n            wow = lambda x: f(x)\n            b = identity(x)\n            x = wow(x)\n            a += 1\n        return b\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        a = 0\n        if n==0:\n            return x\n        while a<=n:\n            wow = lambda x: f(x)\n            b = wow(x)\n            b = identity(x)\n            x = wow(x)\n            a += 1\n        return b\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def h(x):\n        a = 0\n        if n==0:\n            return x\n        while a<=n:\n            wow = lambda x: f(x)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            b = wow(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            b = identity(x)\n"
      },
      {
        "count": 4,
        "value": "            x = wow(x)\n            a += 1\n        return b\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "            b = identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "            b = wow(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 355,
    "studentId": 60,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeat(x):\n        i = 1\n        if n==0:\n            return x\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat(x):\n        i = 0\n        if n==0:\n            return x\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeat(x):\n        i = 1\n        i = 0\n        if n==0:\n            return x\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def repeat(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        i = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        i = 0\n"
      },
      {
        "count": 11,
        "value": "        if n==0:\n            return x\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        i = 0"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        i = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 356,
    "studentId": 454,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_helper(counter):\n        if counter==2:\n            return compose1(f, f)\n        else:\n            return compose1(f, repeated_helper(n-1))\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return repeated_helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_helper(counter):\n        if counter==2:\n            return compose1(f, f)\n        else:\n            return compose1(f, repeated_helper(counter-1))\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return repeated_helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_helper(counter):\n        if counter==2:\n            return compose1(f, f)\n        else:\n            return compose1(f, repeated_helper(n-1))\n            return compose1(f, repeated_helper(counter-1))\n    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return repeated_helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def repeated_helper(counter):\n        if counter==2:\n            return compose1(f, f)\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated_helper(n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated_helper(counter-1))\n"
      },
      {
        "count": 10,
        "value": "    if n==0:\n        return lambda x: x\n    if n==1:\n        return f\n    else:\n        return repeated_helper(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return compose1(f, repeated_helper(counter-1))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return compose1(f, repeated_helper(n-1))"
      }
    ],
    "test": "repeated(triple, 5)",
    "expected": 243,
    "result": null,
    "log": ">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper\n    return compose1(f,repeated_helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper\n    return compose1(f,repeated_helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper\n    return compose1(f,repeated_helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper\n    return compose1(f,repeated_helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper\n    return compose1(f,repeated_helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper\n    return compose1(f,repeated_helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated_helper\n    if counter == 2:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     243\n# but got\n#     RecursionError"
  },
  {
    "id": 357,
    "studentId": 233,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-b)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def zero_helper(a):\n        if n==0:\n            return a\n        b = f(a)\n        c = 1\n        while c<n:\n            b = f(b)\n            c = c+1\n        return c\n    return zero_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def zero_helper(a):\n        if n==0:\n            return a\n        b = f(a)\n        c = 1\n        while c<n:\n            b = f(b)\n            c = c+1\n        return b\n    return zero_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def zero_helper(a):\n        if n==0:\n            return a\n        b = f(a)\n        c = 1\n        while c<n:\n            b = f(b)\n            c = c+1\n        return c\n        return b\n    return zero_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 9,
        "value": "def repeated(f, n):\n    def zero_helper(a):\n        if n==0:\n            return a\n        b = f(a)\n        c = 1\n        while c<n:\n            b = f(b)\n            c = c+1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return c\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return b\n"
      },
      {
        "count": 5,
        "value": "    return zero_helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      10
    ],
    "removed": [
      9
    ],
    "addedLine": [
      {
        "line": 10,
        "code": "        return b"
      }
    ],
    "removedLine": [
      {
        "line": 9,
        "code": "        return c"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 3,
    "log": ">>> add_three(5)\n3\n\n# Error: expected\n#     8\n# but got\n#     3"
  },
  {
    "id": 358,
    "studentId": 1026,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-recRep)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    def recRep(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def recRep(x):\n        i = 0\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return recRep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def recRep(x):\n        i = 1\n        while i<=n:\n        i = 0\n        while i<n:\n            x = f(x)\n            i += 1\n        return x\n    return g\n    return recRep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def recRep(x):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        i = 1\n        while i<=n:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        i = 0\n        while i<n:\n"
      },
      {
        "count": 3,
        "value": "            x = f(x)\n            i += 1\n        return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return g\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return recRep\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5,
      10
    ],
    "removed": [
      2,
      3,
      9
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        i = 0"
      },
      {
        "line": 5,
        "code": "        while i<n:"
      },
      {
        "line": 10,
        "code": "    return recRep"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        i = 1"
      },
      {
        "line": 3,
        "code": "        while i<=n:"
      },
      {
        "line": 9,
        "code": "    return g"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return g\nNameError: name 'g' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 359,
    "studentId": 685,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def func(x):\n        g = f(x)\n        for i in range(0, n):\n            g = f(g)\n        return g\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(x):\n        g = identity(x)\n        for i in range(0, n):\n            g = f(g)\n        return g\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def func(x):\n        g = f(x)\n        g = identity(x)\n        for i in range(0, n):\n            g = f(g)\n        return g\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def func(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        g = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        g = identity(x)\n"
      },
      {
        "count": 8,
        "value": "        for i in range(0, n):\n            g = f(g)\n        return g\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        g = identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        g = f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 360,
    "studentId": 445,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-var)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-store)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-store), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-var)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-var), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-store)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-store), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-store), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-var), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-store), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK)))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-var))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))))))))))))))))))))))",
    "before": "def repeated(f, n):\n    def final(f, n):\n        if (n==1):\n            return f\n        else:\n            return f(final(f, n-1))\n    return final(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def final(var):\n        store = n\n        while store>0:\n            var = f(var)\n            store -= 1\n        return var\n    return final\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def final(f, n):\n        if (n==1):\n            return f\n        else:\n            return f(final(f, n-1))\n    return final(f, n)\n    def final(var):\n        store = n\n        while store>0:\n            var = f(var)\n            store -= 1\n        return var\n    return final\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 6,
        "removed": true,
        "value": "    def final(f, n):\n        if (n==1):\n            return f\n        else:\n            return f(final(f, n-1))\n    return final(f, n)\n"
      },
      {
        "count": 7,
        "added": true,
        "value": "    def final(var):\n        store = n\n        while store>0:\n            var = f(var)\n            store -= 1\n        return var\n    return final\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7,
      8,
      9,
      10,
      11,
      12,
      13
    ],
    "removed": [
      1,
      2,
      3,
      4,
      5,
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "    def final(var):"
      },
      {
        "line": 8,
        "code": "        store = n"
      },
      {
        "line": 9,
        "code": "        while store>0:"
      },
      {
        "line": 10,
        "code": "            var = f(var)"
      },
      {
        "line": 11,
        "code": "            store -= 1"
      },
      {
        "line": 12,
        "code": "        return var"
      },
      {
        "line": 13,
        "code": "    return final"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def final(f, n):"
      },
      {
        "line": 2,
        "code": "        if (n==1):"
      },
      {
        "line": 3,
        "code": "            return f"
      },
      {
        "line": 4,
        "code": "        else:"
      },
      {
        "line": 5,
        "code": "            return f(final(f, n-1))"
      },
      {
        "line": 6,
        "code": "    return final(f, n)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return final(f, n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in final\n    return f(final(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in final\n    return f(final(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 361,
    "studentId": 155,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if x==0:\n        return f(n)\n    else:\n        x -= 1\n        return compose1(f, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if x==0:\n        return f(n)\n    if n==0:\n        return identity\n    else:\n        x -= 1\n        return compose1(f, f)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "    if x==0:\n        return f(n)\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        x -= 1\n        return compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      8
    ],
    "removed": [
      1,
      2,
      6,
      7
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    if n==0:"
      },
      {
        "line": 4,
        "code": "        return identity"
      },
      {
        "line": 8,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    if x==0:"
      },
      {
        "line": 2,
        "code": "        return f(n)"
      },
      {
        "line": 6,
        "code": "        x -= 1"
      },
      {
        "line": 7,
        "code": "        return compose1(f, f)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if x == 0:\nUnboundLocalError: local variable 'x' referenced before assignment\n\n# Error: expected\n#     \n# but got\n#     UnboundLocalError"
  },
  {
    "id": 362,
    "studentId": 343,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 363,
    "studentId": 171,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def a(x):\n        a = x\n        b = 0\n        i = n\n        while i>0:\n            b = f(a)\n            a = b\n            i = i-1\n        return b\n    return a\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def a(x):\n        a = x\n        b = 0\n        while n>0:\n            b = f(a)\n            a = b\n            n = n-1\n        return b\n    return a",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def a(x):\n        a = x\n        b = 0\n        i = n\n        while i>0:\n            b = f(a)\n            a = b\n            i = i-1\n        return b\n    return a\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def a(x):\n        a = x\n        b = 0\n        while n>0:\n            b = f(a)\n            a = b\n            n = n-1\n        return b\n    return a",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def a(x):\n        a = x\n        b = 0\n        i = n\n        while i>0:\n            b = f(a)\n            a = b\n            i = i-1\n        return b\n    return a\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def a(x):\n        a = x\n        b = 0\n        while n>0:\n            b = f(a)\n            a = b\n            n = n-1\n        return b\n    return a\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 23,
        "value": "    def a(x):\n        a = x\n        b = 0\n        i = n\n        while i>0:\n            b = f(a)\n            a = b\n            i = i-1\n        return b\n    return a\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def a(x):\n        a = x\n        b = 0\n        while n>0:\n            b = f(a)\n            a = b\n            n = n-1\n        return b\n    return a"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 0,
    "log": ">>> repeated(square, 0)(5)\n0\n\n# Error: expected\n#     5\n# but got\n#     0"
  },
  {
    "id": 364,
    "studentId": 1049,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = 1\n    func = f\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n        while k<=n:\n            func = compose1(func, f)\n            k += 1\n    return func",
    "after": "def repeated(f, n):\n    k = 1\n    func = identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n        while k<=n:\n            func = compose1(func, f)\n            k += 1\n    return func",
    "code": "def repeated(f, n):\n    k = 1\n    func = f\n    func = identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n        while k<=n:\n            func = compose1(func, f)\n            k += 1\n    return func\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    k = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func = identity\n"
      },
      {
        "count": 13,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n        while k<=n:\n            func = compose1(func, f)\n            k += 1\n    return func"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    func = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    func = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 365,
    "studentId": 102,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        for i in range(1, n):\n            x = f(x)\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        for i in range(1, n):\n        for i in range(0, n):\n            x = f(x)\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def h(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        for i in range(1, n):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        for i in range(0, n):\n"
      },
      {
        "count": 7,
        "value": "            x = f(x)\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        for i in range(0, n):"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        for i in range(1, n):"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 366,
    "studentId": 137,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(LeafConstNode(NameExpressionNode-identity)))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    for k in range(n):\n        g = identity\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = identity\n    for k in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = identity\n    for k in range(n):\n        g = identity\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 1,
        "value": "    for k in range(n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        g = identity\n"
      },
      {
        "count": 6,
        "value": "        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "        g = identity"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 367,
    "studentId": 964,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = f\n    while n>1:\n        x = compose1(x, f)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    x = f\n    while n>1:\n        x = compose1(x, f)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    x = f\n    while n>1:\n        x = compose1(x, f)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    x = f\n    while n>1:\n        x = compose1(x, f)\n        n -= 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 368,
    "studentId": 632,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a, total = 0, g\n    while a<n:\n        total = compose1(f, total)\n        a += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a, total = 0, identity\n    while a<n:\n        total = compose1(f, total)\n        a += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a, total = 0, g\n    a, total = 0, identity\n    while a<n:\n        total = compose1(f, total)\n        a += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a, total = 0, g\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a, total = 0, identity\n"
      },
      {
        "count": 8,
        "value": "    while a<n:\n        total = compose1(f, total)\n        a += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    a, total = 0, identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    a, total = 0, g"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    a, total = 0, g\nNameError: name 'g' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 369,
    "studentId": 390,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    o = f\n    while n>0:\n        o = compose(f, o)\n        n -= 1\n    return o\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    o = identity\n    while n>0:\n        o = compose1(f, o)\n        n -= 1\n    return o\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    o = f\n    o = identity\n    while n>0:\n        o = compose(f, o)\n        o = compose1(f, o)\n        n -= 1\n    return o\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    o = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    o = identity\n"
      },
      {
        "count": 1,
        "value": "    while n>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        o = compose(f, o)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        o = compose1(f, o)\n"
      },
      {
        "count": 6,
        "value": "        n -= 1\n    return o\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      5
    ],
    "removed": [
      1,
      4
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    o = identity"
      },
      {
        "line": 5,
        "code": "        o = compose1(f, o)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    o = f"
      },
      {
        "line": 4,
        "code": "        o = compose(f, o)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    o = compose(f, o)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 370,
    "studentId": 861,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return lambda x: f(repeated(f, n-1))\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return lambda x: f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return lambda x: f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return lambda x: f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return lambda x: f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 371,
    "studentId": 419,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 372,
    "studentId": 345,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def counter(i):\n        if i==n:\n            return f\n        else:\n            return compose1(counter(i+1), f)\n    return counter(0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def counter(i):\n        if i==n:\n            return identity\n        else:\n            return compose1(counter(i+1), f)\n    return counter(0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def counter(i):\n        if i==n:\n            return f\n            return identity\n        else:\n            return compose1(counter(i+1), f)\n    return counter(0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def counter(i):\n        if i==n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 7,
        "value": "        else:\n            return compose1(counter(i+1), f)\n    return counter(0)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 373,
    "studentId": 833,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f(x)\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f(x)\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f(x)"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 374,
    "studentId": 883,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    counter = 0\n    func = z\n    while counter<n:\n        counter += 1\n        func = compose1(func, f)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    counter = 0\n    func = identity\n    while counter<n:\n        counter += 1\n        func = compose1(func, f)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    counter = 0\n    func = z\n    func = identity\n    while counter<n:\n        counter += 1\n        func = compose1(func, f)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    counter = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func = z\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func = identity\n"
      },
      {
        "count": 8,
        "value": "    while counter<n:\n        counter += 1\n        func = compose1(func, f)\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "    func = identity"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "    func = z"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    func = z\nNameError: name 'z' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 375,
    "studentId": 808,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    i = 0\n    g = f\n    while i<n:\n        g = compose(g, f)\n        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 0\n    g = identity\n    while i<n:\n        g = compose1(g, f)\n        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 0\n    g = f\n    g = identity\n    while i<n:\n        g = compose(g, f)\n        g = compose1(g, f)\n        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    i = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 1,
        "value": "    while i<n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        g = compose(g, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        g = compose1(g, f)\n"
      },
      {
        "count": 6,
        "value": "        i += 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    g = identity"
      },
      {
        "line": 6,
        "code": "        g = compose1(g, f)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    g = f"
      },
      {
        "line": 5,
        "code": "        g = compose(g, f)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    g = compose(g, f)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 376,
    "studentId": 534,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 377,
    "studentId": 234,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def wrapper(arg):\n        if n==1:\n            return f(arg)\n        else:\n            return f(repeated(f, n-1)(arg))\n    return wrapper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper\n    return f(repeated(f, n - 1)(arg))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in wrapper\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 378,
    "studentId": 655,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeated_tracker))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-repeated_tracker, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_tracker(k):\n        counter = 1\n        while counter<=n:\n            k = f(k)\n            counter += 1\n        return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_tracker(k):\n        counter = 1\n        while counter<=n:\n            k = f(k)\n            counter += 1\n        return k\n    return repeated_tracker\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_tracker(k):\n        counter = 1\n        while counter<=n:\n            k = f(k)\n            counter += 1\n        return k\n    return repeated_tracker\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def repeated_tracker(k):\n        counter = 1\n        while counter<=n:\n            k = f(k)\n            counter += 1\n        return k\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return repeated_tracker\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 7,
        "code": "    return repeated_tracker"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 379,
    "studentId": 844,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeater(combiner):\n        return f(repeated(f, n-1)(combiner))\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeater(combiner):\n        return f(repeated(f, n-1)(combiner))\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeater(combiner):\n        return f(repeated(f, n-1)(combiner))\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    def repeater(combiner):\n        return f(repeated(f, n-1)(combiner))\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater\n    return f(repeated(f, n-1)(combiner))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater\n    return f(repeated(f, n-1)(combiner))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater\n    return f(repeated(f, n-1)(combiner))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater\n    return f(repeated(f, n-1)(combiner))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater\n    return f(repeated(f, n-1)(combiner))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater\n    return f(repeated(f, n-1)(combiner))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater\n    return f(repeated(f, n-1)(combiner))\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     8\n# but got\n#     RecursionError"
  },
  {
    "id": 380,
    "studentId": 22,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 0\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 0\n    return f(repeated(f, n-1))\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return 0\n    return f(repeated(f, n-1))\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 5,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      },
      {
        "line": 3,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 381,
    "studentId": 100,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 382,
    "studentId": 284,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    OG = f\n    while n>1:\n        f = compose1(OG, f)\n        n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    OG = f\n    while n>1:\n        f = compose1(OG, f)\n        n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    OG = f\n    while n>1:\n        f = compose1(OG, f)\n        n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    OG = f\n    while n>1:\n        f = compose1(OG, f)\n        n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 383,
    "studentId": 166,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 384,
    "studentId": 566,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(i, fn):\n        if i==n:\n            return fn\n        else:\n            return lambda x: fn(helper(i+1, fn)(x))\n    return helper(0, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(i, fn):\n        if i==n:\n            return identity\n        else:\n            return lambda x: fn(helper(i+1, fn)(x))\n    return helper(0, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(i, fn):\n        if i==n:\n            return fn\n            return identity\n        else:\n            return lambda x: fn(helper(i+1, fn)(x))\n    return helper(0, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(i, fn):\n        if i==n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return fn\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 7,
        "value": "        else:\n            return lambda x: fn(helper(i+1, fn)(x))\n    return helper(0, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return fn"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 385,
    "studentId": 465,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeat(x):\n        i = 1\n        k = f(x)\n        while i<n:\n            k = f(k)\n            i += 1\n        return k\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeat(x):\n        i = 1\n        k = f(x)\n        while i<n:\n            k = f(k)\n            i += 1\n        return k\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeat(x):\n        i = 1\n        k = f(x)\n        while i<n:\n            k = f(k)\n            i += 1\n        return k\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def repeat(x):\n        i = 1\n        k = f(x)\n        while i<n:\n            k = f(k)\n            i += 1\n        return k\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 386,
    "studentId": 503,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    if n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 387,
    "studentId": 588,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 388,
    "studentId": 384,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(f, n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(f, n-1)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(f, n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(f, n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 389,
    "studentId": 922,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        i = n\n        while i>=0:\n            x = f(x)\n            i -= 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        i = n\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        i = n\n        while i>=0:\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(x):\n        i = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while i>=0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while i>0:\n"
      },
      {
        "count": 8,
        "value": "            x = f(x)\n            i -= 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        while i>0:"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        while i>=0:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 390,
    "studentId": 185,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 0\n    total = f\n    while i<n:\n        total = compose1(total, f)\n        i += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 0\n    total = identity\n    while i<n:\n        total = compose1(total, f)\n        i += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 0\n    total = f\n    total = identity\n    while i<n:\n        total = compose1(total, f)\n        i += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    i = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    total = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    total = identity\n"
      },
      {
        "count": 8,
        "value": "    while i<n:\n        total = compose1(total, f)\n        i += 1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    total = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    total = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 391,
    "studentId": 773,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = f\n    for i in range(1, n):\n        k = compose1(k, f)\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = f\n    for i in range(1, n):\n        k = compose1(k, f)\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = f\n    for i in range(1, n):\n        k = compose1(k, f)\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    k = f\n    for i in range(1, n):\n        k = compose1(k, f)\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 392,
    "studentId": 522,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        def recursive(n):\n            if n<2:\n                return f(x)\n            else:\n                return f(recursive(n-1))\n        return recursive(n)\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        def recursive(n):\n            if n<2:\n                return f(x)\n            else:\n                return f(recursive(n-1))\n        return recursive(n)\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        def recursive(n):\n            if n<2:\n                return f(x)\n            else:\n                return f(recursive(n-1))\n        return recursive(n)\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def helper(x):\n        def recursive(n):\n            if n<2:\n                return f(x)\n            else:\n                return f(recursive(n-1))\n        return recursive(n)\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 4)",
    "expected": 152587890625,
    "result": 152587890625,
    "log": ">>> repeated(square, 4)(5) # square(square(square(square(5))))\n152587890625\n\n# Error: expected\n#     152587890625t\n# but got\n#     152587890625"
  },
  {
    "id": 393,
    "studentId": 641,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def much_repeated(x, m):\n        if m==1:\n            return f(x)\n        else:\n            return f(much_repeated(x, m-1))\n    return lambda j: much_repeated(j, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def much_repeated(x, m):\n        if m==1:\n            return f(x)\n        else:\n            return f(much_repeated(x, m-1))\n    return lambda j: much_repeated(j, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def much_repeated(x, m):\n        if m==1:\n            return f(x)\n        else:\n            return f(much_repeated(x, m-1))\n    return lambda j: much_repeated(j, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def much_repeated(x, m):\n        if m==1:\n            return f(x)\n        else:\n            return f(much_repeated(x, m-1))\n    return lambda j: much_repeated(j, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated\n    return f(much_repeated(x, m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated\n    return f(much_repeated(x, m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated\n    return f(much_repeated(x, m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated\n    return f(much_repeated(x, m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated\n    return f(much_repeated(x, m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated\n    return f(much_repeated(x, m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in much_repeated\n    if m == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 394,
    "studentId": 20,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def fun_stuff(first_num):\n        def call(num, index):\n            print(num)\n            if index==n:\n                return num\n            return call(f(num), index+1)\n        return call(first_num, 0)\n    return fun_stuff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def fun_stuff(first_num):\n        def call(num, index):\n            print(identity)\n            if index==n:\n                return num\n            return call(f(num), index+1)\n        return call(first_num, 0)\n    return fun_stuff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def fun_stuff(first_num):\n        def call(num, index):\n            print(num)\n            print(identity)\n            if index==n:\n                return num\n            return call(f(num), index+1)\n        return call(first_num, 0)\n    return fun_stuff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def fun_stuff(first_num):\n        def call(num, index):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            print(num)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            print(identity)\n"
      },
      {
        "count": 9,
        "value": "            if index==n:\n                return num\n            return call(f(num), index+1)\n        return call(first_num, 0)\n    return fun_stuff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            print(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            print(num)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n6\n7\n8\n8\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 395,
    "studentId": 669,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    function = f\n    while n>1:\n        function = compose1(function, f)\n        n = n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    function = f\n    while n>1:\n        function = compose1(function, f)\n        n = n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    function = f\n    while n>1:\n        function = compose1(function, f)\n        n = n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    function = f\n    while n>1:\n        function = compose1(function, f)\n        n = n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 396,
    "studentId": 85,
    "rule": "Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        i = n\n        g = identity(x)\n        while i!=0:\n            g = compose1(f, g)\n            i -= 1\n        return g\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        i = n\n        g = identity(x)\n        while i!=0:\n            g = f(g)\n            i -= 1\n        return g\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        i = n\n        g = identity(x)\n        while i!=0:\n            g = compose1(f, g)\n            g = f(g)\n            i -= 1\n        return g\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def helper(x):\n        i = n\n        g = identity(x)\n        while i!=0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            g = compose1(f, g)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            g = f(g)\n"
      },
      {
        "count": 7,
        "value": "            i -= 1\n        return g\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            g = f(g)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            g = compose1(f, g)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x000002984351FEA0>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x000002984351FEA0>"
  },
  {
    "id": 397,
    "studentId": 607,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 398,
    "studentId": 30,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 399,
    "studentId": 141,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def returner(x):\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return returner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def returner(x):\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return returner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def returner(x):\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return returner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def returner(x):\n        if n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return returner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner\n    return f(repeated(f,n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in returner\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 400,
    "studentId": 164,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(x)\n    else:\n        q = f\n        while n>1:\n            q = compose1(f, q)\n            n -= 1\n        return q\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity(identity)\n    else:\n        q = f\n        while n>1:\n            q = compose1(f, q)\n            n -= 1\n        return q\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(x)\n        return identity(identity)\n    else:\n        q = f\n        while n>1:\n            q = compose1(f, q)\n            n -= 1\n        return q\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return identity(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity(identity)\n"
      },
      {
        "count": 10,
        "value": "    else:\n        q = f\n        while n>1:\n            q = compose1(f, q)\n            n -= 1\n        return q\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return identity(x)"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return identity(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 401,
    "studentId": 972,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>0:\n        g = compose1(g, f)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    while n>0:\n        g = compose1(g, f)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    g = identity\n    while n>0:\n        g = compose1(g, f)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        g = compose1(g, f)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 402,
    "studentId": 908,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 403,
    "studentId": 37,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-helper)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return h\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def helper(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return h\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return helper\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "    return helper"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "    return h"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return h\nNameError: name 'h' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 404,
    "studentId": 75,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        counter = n\n        while (n!=0):\n            x = f(x)\n            counter = counter-1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        counter = n\n        while (counter!=0):\n            x = f(x)\n            counter = counter-1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        counter = n\n        while (n!=0):\n        while (counter!=0):\n            x = f(x)\n            counter = counter-1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(x):\n        counter = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while (n!=0):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while (counter!=0):\n"
      },
      {
        "count": 8,
        "value": "            x = f(x)\n            counter = counter-1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        while (counter!=0):"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        while (n!=0):"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     8\n# but got\n#     Timeout"
  },
  {
    "id": 405,
    "studentId": 197,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return (x)\n        else:\n            return f(repeated(f, n-1))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return (x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return (x)\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return (x)\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 406,
    "studentId": 369,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in <lambda>\n    return lambda x: f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     8\n# but got\n#     NameError"
  },
  {
    "id": 407,
    "studentId": 402,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(f, repeated(n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose1(f, repeated(n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(n-1))\nTypeError: repeated() missing 1 required positional argument: 'n'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 408,
    "studentId": 341,
    "rule": "Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(j):\n        if n==0:\n            return j\n        else:\n            return compose1(f, repeated(f, n-1)(j))\n    return helper",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(j):\n        if n==0:\n            return j\n        else:\n            return f(repeated(f, n-1)(j))\n    return helper",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(j):\n        if n==0:\n            return j\n        else:\n            return compose1(f, repeated(f, n-1)(j))\n            return f(repeated(f, n-1)(j))\n    return helper\n",
    "diffs": [
      {
        "count": 9,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    def helper(j):\n        if n==0:\n            return j\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated(f, n-1)(j))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(j))\n"
      },
      {
        "count": 1,
        "value": "    return helper"
      }
    ],
    "added": [
      10
    ],
    "removed": [
      9
    ],
    "addedLine": [
      {
        "line": 10,
        "code": "            return f(repeated(f, n-1)(j))"
      }
    ],
    "removedLine": [
      {
        "line": 9,
        "code": "            return compose1(f, repeated(f, n-1)(j))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function repeated.<locals>.compose1.<locals>.h at 0x0000016BC8A3FE18>\n\n# Error: expected\n#     8\n# but got\n#     <function repeated.<locals>.compose1.<locals>.h at 0x0000016BC8A3FE18>"
  },
  {
    "id": 409,
    "studentId": 358,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i, result = 1, f\n    if n==0:\n        return \n    while i<n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i, result = 1, f\n    if n==0:\n        return \n    while i<n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i, result = 1, f\n    if n==0:\n        return \n    while i<n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 11,
        "value": "    i, result = 1, f\n    if n==0:\n        return \n    while i<n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 410,
    "studentId": 695,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(n-1))\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return compose1(f, repeated(n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "    return compose1(f, repeated(n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(n-1))\nTypeError: repeated() missing 1 required positional argument: 'n'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 411,
    "studentId": 26,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        return x\n    if n==0:\n        return helper\n    else:\n        return repeated(compose1(f, helper), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        return x\n    if n==0:\n        return helper\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        return x\n    if n==0:\n        return helper\n    else:\n        return repeated(compose1(f, helper), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def helper(x):\n        return x\n    if n==0:\n        return helper\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, helper), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, helper), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 412,
    "studentId": 248,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = f\n    counter = 1\n    while counter<=n:\n        x = compose1(x, f)\n        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    x = identity\n    counter = 1\n    while counter<=n:\n        x = compose1(x, f)\n        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = f\n    x = identity\n    counter = 1\n    while counter<=n:\n        x = compose1(x, f)\n        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    x = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    x = identity\n"
      },
      {
        "count": 9,
        "value": "    counter = 1\n    while counter<=n:\n        x = compose1(x, f)\n        counter += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    x = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    x = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 413,
    "studentId": 874,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return \n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return \n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return \n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return "
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 414,
    "studentId": 265,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    f2 = lambda x: x\n    f = compose1(f)\n    while n>0:\n        f2 = compose1(f2, f)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    f2 = lambda x: x\n    f = identity(f)\n    while n>0:\n        f2 = compose1(f2, f)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    f2 = lambda x: x\n    f = compose1(f)\n    f = identity(f)\n    while n>0:\n        f2 = compose1(f2, f)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    f2 = lambda x: x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    f = compose1(f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    f = identity(f)\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        f2 = compose1(f2, f)\n        n -= 1\n    return f2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    f = identity(f)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    f = compose1(f)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    f = compose1(f)\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 415,
    "studentId": 242,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def iterator(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, iterator(x-1))\n    return iterator(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def iterator(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, iterator(x-1))\n    return iterator(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def iterator(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, iterator(x-1))\n    return iterator(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def iterator(x):\n        if x==1:\n            return f\n        else:\n            return compose1(f, iterator(x-1))\n    return iterator(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator\n    return compose1(f, iterator(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator\n    return compose1(f, iterator(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator\n    return compose1(f, iterator(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator\n    return compose1(f, iterator(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator\n    return compose1(f, iterator(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator\n    return compose1(f, iterator(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in iterator\n    if x==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 416,
    "studentId": 466,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 2\n    x = f\n    while i<=n:\n        x = compose1(f, x)\n        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 2\n    x = f\n    while i<=n:\n        x = compose1(f, x)\n        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 2\n    x = f\n    while i<=n:\n        x = compose1(f, x)\n        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    i = 2\n    x = f\n    while i<=n:\n        x = compose1(f, x)\n        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 417,
    "studentId": 717,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 5,
        "value": "    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f,repeated(f, n-1))\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 418,
    "studentId": 252,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_counter(f, n):\n        if n==0:\n            return \n        elif n==1:\n            return f\n        elif n==2:\n            return compose1(f, f)\n        else:\n            return compose1(repeated(f, n-1), f)\n    return repeated_counter(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_counter(f, n):\n        if n==0:\n            return \n        elif n==1:\n            return f\n        elif n==2:\n            return compose1(f, f)\n        else:\n            return compose1(repeated(f, n-1), f)\n    return repeated_counter(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_counter(f, n):\n        if n==0:\n            return \n        elif n==1:\n            return f\n        elif n==2:\n            return compose1(f, f)\n        else:\n            return compose1(repeated(f, n-1), f)\n    return repeated_counter(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 14,
        "value": "    def repeated_counter(f, n):\n        if n==0:\n            return \n        elif n==1:\n            return f\n        elif n==2:\n            return compose1(f, f)\n        else:\n            return compose1(repeated(f, n-1), f)\n    return repeated_counter(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 419,
    "studentId": 1059,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if (n==1):\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        if (n==1):\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        if (n==1):\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def helper(x):\n        if (n==1):\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    return f(repeated(f, n-1)(x));\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    return f(repeated(f, n-1)(x));\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    return f(repeated(f, n-1)(x));\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    return f(repeated(f, n-1)(x));\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    return f(repeated(f, n-1)(x));\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    return f(repeated(f, n-1)(x));\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in helper\n    if (n == 1):\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 420,
    "studentId": 231,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = f\n    while n>=1:\n        k = compose1(f, k)\n        n = n-1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    k = identity\n    while n>=1:\n        k = compose1(f, k)\n        n = n-1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    k = f\n    k = identity\n    while n>=1:\n        k = compose1(f, k)\n        n = n-1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    k = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    k = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>=1:\n        k = compose1(f, k)\n        n = n-1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    k = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    k = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 421,
    "studentId": 68,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    return f(repeated(f, n-1))\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 422,
    "studentId": 425,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        for i in range(n):\n            function_to_repeat = f(x)\n        return function_to_repeat\n    return helper",
    "after": "def repeated(f, n):\n    def helper(x):\n        for i in range(n):\n            x = f(x)\n        return x\n    return helper",
    "code": "def repeated(f, n):\n    def helper(x):\n        for i in range(n):\n            function_to_repeat = f(x)\n        return function_to_repeat\n            x = f(x)\n        return x\n    return helper\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(x):\n        for i in range(n):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "            function_to_repeat = f(x)\n        return function_to_repeat\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "            x = f(x)\n        return x\n"
      },
      {
        "count": 1,
        "value": "    return helper"
      }
    ],
    "added": [
      5,
      6
    ],
    "removed": [
      3,
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x = f(x)"
      },
      {
        "line": 6,
        "code": "        return x"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            function_to_repeat = f(x)"
      },
      {
        "line": 4,
        "code": "        return function_to_repeat"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 423,
    "studentId": 181,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    function = f\n    while n>0:\n        function, n = compose1(function, f), n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    function = identity\n    while n>0:\n        function, n = compose1(function, f), n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    function = f\n    function = identity\n    while n>0:\n        function, n = compose1(function, f), n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    function = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    function = identity\n"
      },
      {
        "count": 7,
        "value": "    while n>0:\n        function, n = compose1(function, f), n-1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    function = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    function = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)    \n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 424,
    "studentId": 643,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    function = f\n    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    function = identity\n    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    function = f\n    function = identity\n    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    function = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    function = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        function = compose1(f, function)\n        n -= 1\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    function = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    function = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 425,
    "studentId": 1036,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))), 2), Selected(\\x => Match(x, StartsWithTarget(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(LeafWildcard(\"any\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def inner(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def inner(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def inner(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def inner(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return x\n"
      },
      {
        "count": 5,
        "value": "    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 6,
        "code": "        return x"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n\n# Error: expected\n#     8\n# but got\n#     "
  },
  {
    "id": 426,
    "studentId": 889,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_2(x):\n        k = n\n        sum5 = x\n        while k!=1:\n            sum5 = f(sum5)\n            k -= 1\n        return sum5\n    return repeated_2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_2(x):\n        k = n\n        sum5 = x\n        while k!=0:\n            sum5 = f(sum5)\n            k -= 1\n        return sum5\n    return repeated_2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_2(x):\n        k = n\n        sum5 = x\n        while k!=1:\n        while k!=0:\n            sum5 = f(sum5)\n            k -= 1\n        return sum5\n    return repeated_2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def repeated_2(x):\n        k = n\n        sum5 = x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while k!=1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while k!=0:\n"
      },
      {
        "count": 8,
        "value": "            sum5 = f(sum5)\n            k -= 1\n        return sum5\n    return repeated_2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        while k!=0:"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        while k!=1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 427,
    "studentId": 76,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 1\n    new = f\n    if n==0:\n        return x\n    elif n==1:\n        return f\n    while i<n:\n        new = compose1(f, new)\n        i += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 1\n    new = f\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    while i<n:\n        new = compose1(f, new)\n        i += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 1\n    new = f\n    if n==0:\n        return x\n        return identity\n    elif n==1:\n        return f\n    while i<n:\n        new = compose1(f, new)\n        i += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    i = 1\n    new = f\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    elif n==1:\n        return f\n    while i<n:\n        new = compose1(f, new)\n        i += 1\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 428,
    "studentId": 64,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    elif n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    elif n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return compose1(identity, identity)\n    elif n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 5,
        "value": "    elif n==1:\n        return f\n    elif n==2:\n        return compose1(f, f)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      10
    ],
    "removed": [
      2,
      9
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 10,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      },
      {
        "line": 9,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 429,
    "studentId": 183,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def compute(x):\n        if n==0:\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))\n    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compute(x):\n        if n==0:\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))(x)\n    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compute(x):\n        if n==0:\n            return x\n        else:\n            return compose1(f, repeated(f, n-1))\n            return compose1(f, repeated(f, n-1))(x)\n    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def compute(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated(f, n-1))(x)\n"
      },
      {
        "count": 5,
        "value": "    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return compose1(f, repeated(f, n-1))(x)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)            # increment(increment(increment(5)))\n<function compose1.<locals>.h at 0x000001C86D2E7E18>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x000001C86D2E7E18>"
  },
  {
    "id": 430,
    "studentId": 335,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast)))))))))))))",
    "before": "def repeated(f, n):\n    x = 0\n    total = 0\n    if x<=n:\n        x += n\n        return compose1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = 0\n    total = 0\n    if x<=n:\n        x += n\n        return compose1\n    return total\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 6,
        "removed": true,
        "value": "    x = 0\n    total = 0\n    if x<=n:\n        x += n\n        return compose1\n    return total\n"
      },
      {
        "count": 3,
        "added": true,
        "value": "    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7,
      8,
      9
    ],
    "removed": [
      1,
      2,
      3,
      4,
      5,
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "    if n==0:"
      },
      {
        "line": 8,
        "code": "        return identity"
      },
      {
        "line": 9,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    x = 0"
      },
      {
        "line": 2,
        "code": "    total = 0"
      },
      {
        "line": 3,
        "code": "    if x<=n:"
      },
      {
        "line": 4,
        "code": "        x += n"
      },
      {
        "line": 5,
        "code": "        return compose1"
      },
      {
        "line": 6,
        "code": "    return total"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: compose1() missing 1 required positional argument: 'g'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 431,
    "studentId": 953,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 432,
    "studentId": 262,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = f\n    if k==0:\n        return identity\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = f\n    if k==0:\n        return identity\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = f\n    if k==0:\n        return identity\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 11,
        "value": "    k = f\n    if k==0:\n        return identity\n    while n>1:\n        k = compose1(f, k)\n        n -= 1\n    return k\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 433,
    "studentId": 710,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 434,
    "studentId": 161,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n>1:\n        return f(repeated(f, n-1))\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n>1:\n        return compose1(f, repeated(f, n-1))\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n>1:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\n    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n>1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 435,
    "studentId": 993,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    def repeater(f, i):\n        if i==1:\n            return f\n        else:\n            return f(repeater(f, i-1))\n    if n==0:\n        return lambda x: x\n    else:\n        return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(f, i):\n        if i==1:\n            return f\n        else:\n            return compose1(f, repeater(f, i-1))\n    if n==0:\n        return lambda x: x\n    else:\n        return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(f, i):\n        if i==1:\n            return f\n        else:\n            return f(repeater(f, i-1))\n            return compose1(f, repeater(f, i-1))\n    if n==0:\n        return lambda x: x\n    else:\n        return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def repeater(f, i):\n        if i==1:\n            return f\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeater(f, i-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeater(f, i-1))\n"
      },
      {
        "count": 8,
        "value": "    if n==0:\n        return lambda x: x\n    else:\n        return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return compose1(f, repeater(f, i-1))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeater(f, i-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in repeated\n    return repeater(f, n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(f, i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater\n    return f(repeater(f, i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 436,
    "studentId": 803,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n-1>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n-1>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n-1>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n-1>0:\n        n = n-1\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 437,
    "studentId": 841,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        k = 0\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        k = 0\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def h(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        k = 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        k = 1\n"
      },
      {
        "count": 9,
        "value": "        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        k = 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        k = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 438,
    "studentId": 299,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def base(i):\n        if n==0:\n            return i\n        else:\n            return compose1(f, repeated(f, n-1))\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def base(i):\n        if n==0:\n            return i\n        else:\n            return compose1(f, repeated(f, n-1))(i)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def base(i):\n        if n==0:\n            return i\n        else:\n            return compose1(f, repeated(f, n-1))\n            return compose1(f, repeated(f, n-1))(i)\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def base(i):\n        if n==0:\n            return i\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(f, repeated(f, n-1))(i)\n"
      },
      {
        "count": 5,
        "value": "    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return compose1(f, repeated(f, n-1))(i)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return compose1(f, repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x0000023D36DBDE18>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x0000023D36DBDE18>"
  },
  {
    "id": 439,
    "studentId": 567,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return \n    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return \n    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return \n    if n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      3
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 2,
        "code": "        return identity"
      },
      {
        "line": 3,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 440,
    "studentId": 90,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeater))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-repeater, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def repeater(x):\n        i = 0\n        total = repeater(x)\n        while i<=n:\n            if n==0:\n                return total\n            else:\n                i += 1\n                total = f(total)\n        return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(x):\n        i = 0\n        total = x\n        while i<n:\n            if n==0:\n                return total\n            else:\n                i += 1\n                total = f(total)\n        return total\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(x):\n        i = 0\n        total = repeater(x)\n        while i<=n:\n        total = x\n        while i<n:\n            if n==0:\n                return total\n            else:\n                i += 1\n                total = f(total)\n        return total\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def repeater(x):\n        i = 0\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        total = repeater(x)\n        while i<=n:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        total = x\n        while i<n:\n"
      },
      {
        "count": 6,
        "value": "            if n==0:\n                return total\n            else:\n                i += 1\n                total = f(total)\n        return total\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return repeater\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      6,
      13
    ],
    "removed": [
      3,
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        total = x"
      },
      {
        "line": 6,
        "code": "        while i<n:"
      },
      {
        "line": 13,
        "code": "    return repeater"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        total = repeater(x)"
      },
      {
        "line": 4,
        "code": "        while i<=n:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 441,
    "studentId": 25,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def nrep(x):\n        i = n\n        while i>=0:\n            x = f(x)\n            i -= 1\n        return x\n    return nrep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def nrep(x):\n        i = n\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return nrep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def nrep(x):\n        i = n\n        while i>=0:\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return nrep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def nrep(x):\n        i = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        while i>=0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while i>0:\n"
      },
      {
        "count": 8,
        "value": "            x = f(x)\n            i -= 1\n        return x\n    return nrep\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        while i>0:"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        while i>=0:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 442,
    "studentId": 997,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 5,
        "value": "    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 443,
    "studentId": 554,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def n(x):\n        i = k\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return n\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, k):\n    def n(x):\n        i = k\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return n\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\ndef repeated(f, k):\n    def n(x):\n        i = k\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return n\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "removed": true,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "def repeated(f, k):\n"
      },
      {
        "count": 11,
        "value": "    def n(x):\n        i = k\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return n\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1
    ],
    "removed": [
      0
    ],
    "addedLine": [
      {
        "line": 1,
        "code": "def repeated(f, k):"
      }
    ],
    "removedLine": [
      {
        "line": 0,
        "code": "def repeated(f, n):"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in n\n    i = k\nNameError: name 'k' is not defined\n\n# Error: expected\n#     8\n# but got\n#     NameError"
  },
  {
    "id": 444,
    "studentId": 591,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 11,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(x)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 445,
    "studentId": 103,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    adding = f\n    while n!=0:\n        adding = compose1(adding, f)\n        n -= 1\n    return adding\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    adding = identity\n    while n!=0:\n        adding = compose1(adding, f)\n        n -= 1\n    return adding\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    adding = f\n    adding = identity\n    while n!=0:\n        adding = compose1(adding, f)\n        n -= 1\n    return adding\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    adding = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    adding = identity\n"
      },
      {
        "count": 8,
        "value": "    while n!=0:\n        adding = compose1(adding, f)\n        n -= 1\n    return adding\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    adding = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    adding = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 446,
    "studentId": 460,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        application = 0\n        total = x\n        while application<=n:\n            total = f(total)\n            application += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        application = 1\n        total = x\n        while application<=n:\n            total = f(total)\n            application += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        application = 0\n        application = 1\n        total = x\n        while application<=n:\n            total = f(total)\n            application += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def h(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        application = 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        application = 1\n"
      },
      {
        "count": 10,
        "value": "        total = x\n        while application<=n:\n            total = f(total)\n            application += 1\n        return total\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        application = 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        application = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 447,
    "studentId": 753,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 0\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 0\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 448,
    "studentId": 569,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated(k):\n        j, result = 0, k\n        while j<n:\n            result = f(result)\n            k += 1\n        return result\n    return repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated(k):\n        j, result = 0, k\n        while j<n:\n            result = f(result)\n            j += 1\n        return result\n    return repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated(k):\n        j, result = 0, k\n        while j<n:\n            result = f(result)\n            k += 1\n            j += 1\n        return result\n    return repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def repeated(k):\n        j, result = 0, k\n        while j<n:\n            result = f(result)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            k += 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            j += 1\n"
      },
      {
        "count": 6,
        "value": "        return result\n    return repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            j += 1"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            k += 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     8\n# but got\n#     Timeout"
  },
  {
    "id": 449,
    "studentId": 162,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return \n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return \n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return \n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return \n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h\n    return f(g(x))\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 450,
    "studentId": 360,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 5,
        "value": "    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f, repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    return compose1(f, repeated(f,n-1))\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 451,
    "studentId": 319,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def layer(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    out = f\n    while (n>1):\n        out = layer(out, f)\n        n -= 1\n    return out\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def layer(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    out = f\n    while (n>1):\n        out = layer(out, f)\n        n -= 1\n    return out\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def layer(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    out = f\n    while (n>1):\n        out = layer(out, f)\n        n -= 1\n    return out\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 13,
        "value": "    def layer(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    out = f\n    while (n>1):\n        out = layer(out, f)\n        n -= 1\n    return out\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 452,
    "studentId": 720,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 453,
    "studentId": 218,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 454,
    "studentId": 1066,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 455,
    "studentId": 105,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-value)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-application, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(OrExpressionNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))))))))))))",
    "before": "def repeated(f, n):\n    def application(value):\n        if n==1 or n==2:\n            return compose1(f, f)(value)\n        else:\n            return repeated(f, n-2)(compose1(f, f)(value))\n    return application\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def application(value):\n        if n==0:\n            return value\n        if n==1:\n            return f(value)\n        else:\n            return repeated(f, n-1)(f(value))\n    return application\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def application(value):\n        if n==1 or n==2:\n            return compose1(f, f)(value)\n        if n==0:\n            return value\n        if n==1:\n            return f(value)\n        else:\n            return repeated(f, n-2)(compose1(f, f)(value))\n            return repeated(f, n-1)(f(value))\n    return application\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def application(value):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        if n==1 or n==2:\n            return compose1(f, f)(value)\n"
      },
      {
        "count": 4,
        "added": true,
        "value": "        if n==0:\n            return value\n        if n==1:\n            return f(value)\n"
      },
      {
        "count": 1,
        "value": "        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return repeated(f, n-2)(compose1(f, f)(value))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return repeated(f, n-1)(f(value))\n"
      },
      {
        "count": 5,
        "value": "    return application\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5,
      6,
      7,
      10
    ],
    "removed": [
      2,
      3,
      9
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        if n==0:"
      },
      {
        "line": 5,
        "code": "            return value"
      },
      {
        "line": 6,
        "code": "        if n==1:"
      },
      {
        "line": 7,
        "code": "            return f(value)"
      },
      {
        "line": 10,
        "code": "            return repeated(f, n-1)(f(value))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        if n==1 or n==2:"
      },
      {
        "line": 3,
        "code": "            return compose1(f, f)(value)"
      },
      {
        "line": 9,
        "code": "            return repeated(f, n-2)(compose1(f, f)(value))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 456,
    "studentId": 142,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 0\n    composition = f\n    while i<n:\n        i += 1\n        composition = compose1(composition, f)\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 0\n    composition = identity\n    while i<n:\n        i += 1\n        composition = compose1(composition, f)\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 0\n    composition = f\n    composition = identity\n    while i<n:\n        i += 1\n        composition = compose1(composition, f)\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    i = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    composition = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    composition = identity\n"
      },
      {
        "count": 8,
        "value": "    while i<n:\n        i += 1\n        composition = compose1(composition, f)\n    return composition\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    composition = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    composition = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 457,
    "studentId": 1000,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n<1:\n        return x\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n<1:\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n<1:\n        return x\n    return f(repeated(f, n-1))\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n<1:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return x\n    return f(repeated(f, n-1))\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8,
      9
    ],
    "removed": [
      6,
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 9,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return x"
      },
      {
        "line": 7,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 458,
    "studentId": 479,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f(b)\n    elif n>0:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    elif n>0:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f(b)\n        return compose1(identity, identity)\n    elif n>0:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(b)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    elif n>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f(b)"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f , n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f , n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f , n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return f(b)\nNameError: name 'b' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 459,
    "studentId": 417,
    "rule": "Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def apply_func(x):\n        if n==0:\n            return x\n        else:\n            y, a = 1, x\n            while y<=n:\n                a = compose1(f, a)\n                y += 1\n            return a\n    return apply_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def apply_func(x):\n        if n==0:\n            return x\n        else:\n            y, a = 1, x\n            while y<=n:\n                a = f(a)\n                y += 1\n            return a\n    return apply_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def apply_func(x):\n        if n==0:\n            return x\n        else:\n            y, a = 1, x\n            while y<=n:\n                a = compose1(f, a)\n                a = f(a)\n                y += 1\n            return a\n    return apply_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def apply_func(x):\n        if n==0:\n            return x\n        else:\n            y, a = 1, x\n            while y<=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                a = compose1(f, a)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                a = f(a)\n"
      },
      {
        "count": 7,
        "value": "                y += 1\n            return a\n    return apply_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "                a = f(a)"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "                a = compose1(f, a)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function compose1.<locals>.h at 0x0000010A4CB01EA0>\n\n# Error: expected\n#     8\n# but got\n#     <function compose1.<locals>.h at 0x0000010A4CB01EA0>"
  },
  {
    "id": 460,
    "studentId": 132,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n    return f(repeated(f, n-1))\n        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return f\n    return f(repeated(f, n-1))\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return compose1(identity, identity)\n    return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 5,
        "code": "    return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 3,
        "code": "    return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 461,
    "studentId": 595,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(x)\n    elif n==1:\n        return f\n    else:\n        def compose1(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity(identity)\n    elif n==1:\n        return f\n    else:\n        def compose1(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(x)\n        return identity(identity)\n    elif n==1:\n        return f\n    else:\n        def compose1(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return identity(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity(identity)\n"
      },
      {
        "count": 12,
        "value": "    elif n==1:\n        return f\n    else:\n        def compose1(f, g):\n            def h(x):\n                return f(g(x))\n            return h\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return identity(x)"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return identity(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 462,
    "studentId": 550,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-x), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ReturnStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def step(x, z = n):\n        if z==0:\n            return f()\n        else:\n            return f(step(x, z-1))\n    return step\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def step(x, z = n):\n        if z==0:\n            return x\n        else:\n            return f(step(x, z-1))\n    return step\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def step(x, z = n):\n        if z==0:\n            return f()\n            return x\n        else:\n            return f(step(x, z-1))\n    return step\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def step(x, z = n):\n        if z==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f()\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return x\n"
      },
      {
        "count": 7,
        "value": "        else:\n            return f(step(x, z-1))\n    return step\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return x"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f()"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in step\n    return f(step(x,z - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in step\n    return f(step(x,z - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in step\n    return f(step(x,z - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in step\n    return f()\nTypeError: increment() missing 1 required positional argument: 'x'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 463,
    "studentId": 176,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n    func = f\n    while i<n:\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n    func = identity\n    while i<n:\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n    func = f\n    func = identity\n    while i<n:\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func = identity\n"
      },
      {
        "count": 8,
        "value": "    while i<n:\n        func = compose1(f, func)\n        i += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "    func = identity"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "    func = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 464,
    "studentId": 853,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n>1:\n        returnFunc = compose1(f, f)\n        if n>2:\n            returnFunc = compose1(f, returnFunc)\n        return returnFunc\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n>1:\n        returnFunc = compose1(f, f)\n        while n>2:\n            returnFunc = compose1(f, returnFunc)\n            n -= 1\n        return returnFunc\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n>1:\n        returnFunc = compose1(f, f)\n        if n>2:\n        while n>2:\n            returnFunc = compose1(f, returnFunc)\n            n -= 1\n        return returnFunc\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    if n>1:\n        returnFunc = compose1(f, f)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if n>2:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        while n>2:\n"
      },
      {
        "count": 1,
        "value": "            returnFunc = compose1(f, returnFunc)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            n -= 1\n"
      },
      {
        "count": 7,
        "value": "        return returnFunc\n    else:\n        return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      6
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        while n>2:"
      },
      {
        "line": 6,
        "code": "            n -= 1"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        if n>2:"
      }
    ],
    "test": "repeated(triple, 5)",
    "expected": 243,
    "result": 27,
    "log": ">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n27\n\n# Error: expected\n#     243\n# but got\n#     27"
  },
  {
    "id": 465,
    "studentId": 793,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-h))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        k = 0\n        while k<n:\n            x, k = compose1(f, n), k+1\n            return x\n        return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        k = 0\n        while k<n:\n            x, k = f(x), k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        k = 0\n        while k<n:\n            x, k = compose1(f, n), k+1\n            return x\n        return h\n            x, k = f(x), k+1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        k = 0\n        while k<n:\n"
      },
      {
        "count": 3,
        "removed": true,
        "value": "            x, k = compose1(f, n), k+1\n            return x\n        return h\n"
      },
      {
        "count": 3,
        "added": true,
        "value": "            x, k = f(x), k+1\n        return x\n    return h\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7,
      8,
      9
    ],
    "removed": [
      4,
      5,
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "            x, k = f(x), k+1"
      },
      {
        "line": 8,
        "code": "        return x"
      },
      {
        "line": 9,
        "code": "    return h"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            x, k = compose1(f, n), k+1"
      },
      {
        "line": 5,
        "code": "            return x"
      },
      {
        "line": 6,
        "code": "        return h"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 466,
    "studentId": 911,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return n\n    else:\n        g = f\n        while n>1:\n            f = compose1(f, g)\n            n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        g = f\n        while n>1:\n            f = compose1(f, g)\n            n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return n\n        return identity\n    else:\n        g = f\n        while n>1:\n            f = compose1(f, g)\n            n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    else:\n        g = f\n        while n>1:\n            f = compose1(f, g)\n            n -= 1\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return n"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 467,
    "studentId": 1062,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(n)\n    else:\n        n -= 1\n        return compose1(f, f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(n)\n        return identity\n    else:\n        n -= 1\n        return compose1(f, f)\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        n -= 1\n        return compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7,
      11
    ],
    "removed": [
      6,
      9,
      10
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return identity"
      },
      {
        "line": 11,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return f(n)"
      },
      {
        "line": 9,
        "code": "        n -= 1"
      },
      {
        "line": 10,
        "code": "        return compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 468,
    "studentId": 187,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 469,
    "studentId": 743,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = 1\n    if n==0:\n        return x\n    result = f\n    while k<n:\n        result = compose1(result, f)\n        k += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    k = 1\n    if n==0:\n        return identity\n    result = f\n    while k<n:\n        result = compose1(result, f)\n        k += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    k = 1\n    if n==0:\n        return x\n        return identity\n    result = f\n    while k<n:\n        result = compose1(result, f)\n        k += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    k = 1\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 9,
        "value": "    result = f\n    while k<n:\n        result = compose1(result, f)\n        k += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  },
  {
    "id": 470,
    "studentId": 270,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 471,
    "studentId": 832,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper_function(x):\n        if n==0:\n            return x\n        counter = 1\n        function = f(x)\n        while counter<=n:\n            counter += 1\n            function = f(function)\n        return function\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper_function(x):\n        if n==0:\n            return x\n        counter = 1\n        function = identity(x)\n        while counter<=n:\n            counter += 1\n            function = f(function)\n        return function\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper_function(x):\n        if n==0:\n            return x\n        counter = 1\n        function = f(x)\n        function = identity(x)\n        while counter<=n:\n            counter += 1\n            function = f(function)\n        return function\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def helper_function(x):\n        if n==0:\n            return x\n        counter = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        function = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        function = identity(x)\n"
      },
      {
        "count": 9,
        "value": "        while counter<=n:\n            counter += 1\n            function = f(function)\n        return function\n    return helper_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "        function = identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "        function = f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 472,
    "studentId": 221,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 473,
    "studentId": 901,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ParameterNode-a, SingleChild(LeafConstNode(NameExpressionNode-n))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Target(Node(FunctionDefinitionNode-applyrepeated, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-applyrepeated, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-a), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    a = n\n    def applyrepeated(x):\n        if a==0:\n            return x\n        a -= 1\n        return f(applyrepeated(x))\n    return applyrepeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = n\n    def applyrepeated(x, a = n):\n        if a==0:\n            return x\n        return f(applyrepeated(x, a-1))\n    return applyrepeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = n\n    def applyrepeated(x):\n    def applyrepeated(x, a = n):\n        if a==0:\n            return x\n        a -= 1\n        return f(applyrepeated(x))\n        return f(applyrepeated(x, a-1))\n    return applyrepeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    a = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    def applyrepeated(x):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    def applyrepeated(x, a = n):\n"
      },
      {
        "count": 2,
        "value": "        if a==0:\n            return x\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        a -= 1\n        return f(applyrepeated(x))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f(applyrepeated(x, a-1))\n"
      },
      {
        "count": 5,
        "value": "    return applyrepeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      8
    ],
    "removed": [
      2,
      6,
      7
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    def applyrepeated(x, a = n):"
      },
      {
        "line": 8,
        "code": "        return f(applyrepeated(x, a-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    def applyrepeated(x):"
      },
      {
        "line": 6,
        "code": "        a -= 1"
      },
      {
        "line": 7,
        "code": "        return f(applyrepeated(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in applyrepeated\n    if a == 0:\nUnboundLocalError: local variable 'a' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 474,
    "studentId": 464,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    func = f\n    while n>=1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    func = identity\n    while n>=1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    func = f\n    func = identity\n    while n>=1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>=1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    func = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    func = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 475,
    "studentId": 362,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 1\n    intermediate = identity\n    while i<n:\n        intermediate = compose1(f, intermediate)\n        i += 1\n    return intermediate\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 0\n    intermediate = identity\n    while i<n:\n        intermediate = compose1(f, intermediate)\n        i += 1\n    return intermediate\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    i = 1\n    i = 0\n    intermediate = identity\n    while i<n:\n        intermediate = compose1(f, intermediate)\n        i += 1\n    return intermediate\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    i = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    i = 0\n"
      },
      {
        "count": 9,
        "value": "    intermediate = identity\n    while i<n:\n        intermediate = compose1(f, intermediate)\n        i += 1\n    return intermediate\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "    i = 0"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "    i = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 476,
    "studentId": 1032,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 477,
    "studentId": 320,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    composite = compose1(f, f)\n    composite2 = compose1(f, composite)\n    while n>0:\n        composite2 = compose1(f, composite2)\n        n -= 1\n    return composite2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    composite = compose1(f, f)\n    composite2 = compose1(identity, identity)\n    while n>0:\n        composite2 = compose1(f, composite2)\n        n -= 1\n    return composite2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    composite = compose1(f, f)\n    composite2 = compose1(f, composite)\n    composite2 = compose1(identity, identity)\n    while n>0:\n        composite2 = compose1(f, composite2)\n        n -= 1\n    return composite2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    composite = compose1(f, f)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    composite2 = compose1(f, composite)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    composite2 = compose1(identity, identity)\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        composite2 = compose1(f, composite2)\n        n -= 1\n    return composite2\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    composite2 = compose1(identity, identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    composite2 = compose1(f, composite)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 11,
    "log": ">>> add_three(5)\n11\n\n# Error: expected\n#     8\n# but got\n#     11"
  },
  {
    "id": 478,
    "studentId": 91,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return compose1(f, f)\n    else:\n        return repeated(repeated(f, n), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return compose1(f, f)\n        return compose1(identity, identity)\n    else:\n        return repeated(repeated(f, n), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(repeated(f, n), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return compose1(f, f)"
      },
      {
        "line": 5,
        "code": "        return repeated(repeated(f, n), n-1)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return repeated(repeated(f, n), n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return repeated(repeated(f, n), n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return repeated(repeated(f, n), n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return repeated(repeated(f, n), n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return repeated(repeated(f, n), n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return repeated(repeated(f, n), n-1)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 479,
    "studentId": 806,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return lambda x: f(x)\n    return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return lambda x: f(x)\n    return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return lambda x: f(x)\n    return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return lambda x: f(x)\n    return lambda x: f(repeated(f, n-1)(x))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>\n    return lambda x:f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>\n    return lambda x:f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>\n    return lambda x:f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>\n    return lambda x:f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>\n    return lambda x:f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>\n    return lambda x:f(repeated(f, n-1)(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 480,
    "studentId": 542,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    x = n\n    g = compose1(f, f)\n    while x>0:\n        g = compose1(g, f)\n        x -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    x = n\n    g = compose1(identity, identity)\n    while x>0:\n        g = compose1(g, f)\n        x -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    x = n\n    g = compose1(f, f)\n    g = compose1(identity, identity)\n    while x>0:\n        g = compose1(g, f)\n        x -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    x = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = compose1(identity, identity)\n"
      },
      {
        "count": 8,
        "value": "    while x>0:\n        g = compose1(g, f)\n        x -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    g = compose1(identity, identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    g = compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 10,
    "log": ">>> add_three(5)\n10\n\n# Error: expected\n#     8\n# but got\n#     10"
  },
  {
    "id": 481,
    "studentId": 845,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def repeater(fn, x):\n        if x==0:\n            return x\n        else:\n            return fn(repeater(fn, x-1))\n    return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(fn, x):\n        if x==0:\n            return compose1(identity, identity)\n        else:\n            return compose1(fn, repeater(fn, x-1))\n    return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(fn, x):\n        if x==0:\n            return x\n            return compose1(identity, identity)\n        else:\n            return fn(repeater(fn, x-1))\n            return compose1(fn, repeater(fn, x-1))\n    return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def repeater(fn, x):\n        if x==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return fn(repeater(fn, x-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return compose1(fn, repeater(fn, x-1))\n"
      },
      {
        "count": 5,
        "value": "    return repeater(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      7
    ],
    "removed": [
      3,
      6
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return compose1(identity, identity)"
      },
      {
        "line": 7,
        "code": "            return compose1(fn, repeater(fn, x-1))"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return x"
      },
      {
        "line": 6,
        "code": "            return fn(repeater(fn, x-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 482,
    "studentId": 528,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 483,
    "studentId": 869,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(e, t):\n        if n==0:\n            return f\n        elif t==n:\n            return f\n        else:\n            return compose1(f, helper(f, t+1))\n    return helper(f, 1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(e, t):\n        if n==0:\n            return identity\n        elif t==n:\n            return f\n        else:\n            return compose1(f, helper(f, t+1))\n    return helper(f, 1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(e, t):\n        if n==0:\n            return f\n            return identity\n        elif t==n:\n            return f\n        else:\n            return compose1(f, helper(f, t+1))\n    return helper(f, 1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def helper(e, t):\n        if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return identity\n"
      },
      {
        "count": 9,
        "value": "        elif t==n:\n            return f\n        else:\n            return compose1(f, helper(f, t+1))\n    return helper(f, 1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 484,
    "studentId": 313,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    def repeater(x):\n        i = n\n        while n>0:\n            x = f(x)\n            i -= 1\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(x):\n        j = n\n        while j>0:\n            x = f(x)\n            j -= 1\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(x):\n        i = n\n        while n>0:\n        j = n\n        while j>0:\n            x = f(x)\n            i -= 1\n            j -= 1\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def repeater(x):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        i = n\n        while n>0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        j = n\n        while j>0:\n"
      },
      {
        "count": 1,
        "value": "            x = f(x)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            i -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            j -= 1\n"
      },
      {
        "count": 6,
        "value": "        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5,
      8
    ],
    "removed": [
      2,
      3,
      7
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        j = n"
      },
      {
        "line": 5,
        "code": "        while j>0:"
      },
      {
        "line": 8,
        "code": "            j -= 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        i = n"
      },
      {
        "line": 3,
        "code": "        while n>0:"
      },
      {
        "line": 7,
        "code": "            i -= 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     8\n# but got\n#     Timeout"
  },
  {
    "id": 485,
    "studentId": 57,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-current_function)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeater, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-current_function)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def repeater(x):\n        i = 1\n        while i<=n:\n            current_function = f(x)\n            i += 1\n        return current_function\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(current_function):\n        i = 1\n        while i<=n:\n            current_function = f(current_function)\n            i += 1\n        return current_function\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(x):\n    def repeater(current_function):\n        i = 1\n        while i<=n:\n            current_function = f(x)\n            current_function = f(current_function)\n            i += 1\n        return current_function\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    def repeater(x):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    def repeater(current_function):\n"
      },
      {
        "count": 2,
        "value": "        i = 1\n        while i<=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            current_function = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            current_function = f(current_function)\n"
      },
      {
        "count": 7,
        "value": "            i += 1\n        return current_function\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2,
      6
    ],
    "removed": [
      1,
      5
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    def repeater(current_function):"
      },
      {
        "line": 6,
        "code": "            current_function = f(current_function)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    def repeater(x):"
      },
      {
        "line": 5,
        "code": "            current_function = f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 6,
    "log": ">>> add_three(5)\n6\n\n# Error: expected\n#     8\n# but got\n#     6"
  },
  {
    "id": 486,
    "studentId": 436,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))))))",
    "before": "def repeated(f, n):\n    counter = n\n    def helper(m):\n        while counter>0:\n            if counter==1:\n                m = f(m)\n                counter -= 1\n            else:\n                m = compose1(f, f)(m)\n                counter -= 2\n        return m\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(m):\n        i = n\n        while i>0:\n            if i==1:\n                m = f(m)\n                i -= 1\n            else:\n                m = compose1(f, f)(m)\n                i -= 2\n        return m\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    counter = n\n    def helper(m):\n        while counter>0:\n            if counter==1:\n        i = n\n        while i>0:\n            if i==1:\n                m = f(m)\n                counter -= 1\n                i -= 1\n            else:\n                m = compose1(f, f)(m)\n                counter -= 2\n                i -= 2\n        return m\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    counter = n\n"
      },
      {
        "count": 1,
        "value": "    def helper(m):\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        while counter>0:\n            if counter==1:\n"
      },
      {
        "count": 3,
        "added": true,
        "value": "        i = n\n        while i>0:\n            if i==1:\n"
      },
      {
        "count": 1,
        "value": "                m = f(m)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                counter -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                i -= 1\n"
      },
      {
        "count": 2,
        "value": "            else:\n                m = compose1(f, f)(m)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                counter -= 2\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                i -= 2\n"
      },
      {
        "count": 6,
        "value": "        return m\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      6,
      7,
      10,
      14
    ],
    "removed": [
      1,
      3,
      4,
      9,
      13
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        i = n"
      },
      {
        "line": 6,
        "code": "        while i>0:"
      },
      {
        "line": 7,
        "code": "            if i==1:"
      },
      {
        "line": 10,
        "code": "                i -= 1"
      },
      {
        "line": 14,
        "code": "                i -= 2"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    counter = n"
      },
      {
        "line": 3,
        "code": "        while counter>0:"
      },
      {
        "line": 4,
        "code": "            if counter==1:"
      },
      {
        "line": 9,
        "code": "                counter -= 1"
      },
      {
        "line": 13,
        "code": "                counter -= 2"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in helper\n    while counter > 0:\nUnboundLocalError: local variable 'counter' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 487,
    "studentId": 241,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        return f(repeated(f, n-1))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        return f(repeated(f, n-1))\n        return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in h\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 488,
    "studentId": 400,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def donothing(n):\n        return n\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    newfunc = f\n    count = 1\n    while count<n:\n        newfunc = compose1(f, newfunc)\n        count += 1\n    return newfunc",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def donothing(n):\n        return n\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    newfunc = f\n    count = 1\n    while count<n:\n        newfunc = compose1(f, newfunc)\n        count += 1\n    return newfunc",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def donothing(n):\n        return n\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    newfunc = f\n    count = 1\n    while count<n:\n        newfunc = compose1(f, newfunc)\n        count += 1\n    return newfunc\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def donothing(n):\n        return n\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    newfunc = f\n    count = 1\n    while count<n:\n        newfunc = compose1(f, newfunc)\n        count += 1\n    return newfunc"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 489,
    "studentId": 671,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return x\n    if n==1:\n        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return identity\n    if n==0:\n        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return x\n    if n==1:\n        return identity\n    if n==0:\n        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return x\n    if n==1:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8,
      9
    ],
    "removed": [
      6,
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "        return identity"
      },
      {
        "line": 9,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return x"
      },
      {
        "line": 7,
        "code": "    if n==1:"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return f(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 490,
    "studentId": 927,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    count = 1\n    func = f\n    while count<=n:\n        func = compose1(func, f)\n        count += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    count = 1\n    func = identity\n    while count<=n:\n        func = compose1(func, f)\n        count += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    count = 1\n    func = f\n    func = identity\n    while count<=n:\n        func = compose1(func, f)\n        count += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    count = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func = identity\n"
      },
      {
        "count": 8,
        "value": "    while count<=n:\n        func = compose1(func, f)\n        count += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    func = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    func = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 491,
    "studentId": 27,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    x = n\n    func = f\n    while x>1:\n        func = compose1(func, f)\n        x -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    x = n\n    func = f\n    while x>1:\n        func = compose1(func, f)\n        x -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    x = n\n    func = f\n    while x>1:\n        func = compose1(func, f)\n        x -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    x = n\n    func = f\n    while x>1:\n        func = compose1(func, f)\n        x -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 492,
    "studentId": 87,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return f(n)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        if n==0:\n            return f(n)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        if n==0:\n            return f(n)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def helper(x):\n        if n==0:\n            return f(n)\n        else:\n            return f(repeated(f, n-1)(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": 4,
    "log": ">>> add_three(5)\n4\n\n# Error: expected\n#     8\n# but got\n#     4"
  },
  {
    "id": 493,
    "studentId": 777,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n<1:\n        return lambda x: x\n    elif n==1:\n        return f\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return f(repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 494,
    "studentId": 504,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    result = 0\n    if n==0:\n        return identity\n    elif n==1:\n        return f(identity)\n    else:\n        resut = compose1(repeated(f, n-1), f)\n        return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    result = 0\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    result = 0\n    if n==0:\n        return identity\n    elif n==1:\n        return f(identity)\n        return f\n    else:\n        resut = compose1(repeated(f, n-1), f)\n        return result\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    result = 0\n    if n==0:\n        return identity\n    elif n==1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(identity)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        resut = compose1(repeated(f, n-1), f)\n        return result\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6,
      10
    ],
    "removed": [
      5,
      8,
      9
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "        return f"
      },
      {
        "line": 10,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "        return f(identity)"
      },
      {
        "line": 8,
        "code": "        resut = compose1(repeated(f, n-1), f)"
      },
      {
        "line": 9,
        "code": "        return result"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    resut = compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    resut = compose1(repeated(f, n-1), f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(identity)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 495,
    "studentId": 304,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    t = 1\n    func = compose1(f, f)\n    while t<=n:\n        func = compose1(f, func)\n        t += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    t = 1\n    func = compose1(identity, identity)\n    while t<=n:\n        func = compose1(f, func)\n        t += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    t = 1\n    func = compose1(f, f)\n    func = compose1(identity, identity)\n    while t<=n:\n        func = compose1(f, func)\n        t += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    t = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func = compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func = compose1(identity, identity)\n"
      },
      {
        "count": 8,
        "value": "    while t<=n:\n        func = compose1(f, func)\n        t += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    func = compose1(identity, identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    func = compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 10,
    "log": ">>> add_three(5)\n10\n\n# Error: expected\n#     8\n# but got\n#     10"
  },
  {
    "id": 496,
    "studentId": 278,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i = 1\n    f_next = f\n    while i<=n:\n        f_next = compose1(f_next, f)\n        i += 1\n    return f_next\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i = 1\n    f_next = identity\n    while i<=n:\n        f_next = compose1(f_next, f)\n        i += 1\n    return f_next\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 1\n    f_next = f\n    f_next = identity\n    while i<=n:\n        f_next = compose1(f_next, f)\n        i += 1\n    return f_next\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    i = 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    f_next = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    f_next = identity\n"
      },
      {
        "count": 8,
        "value": "    while i<=n:\n        f_next = compose1(f_next, f)\n        i += 1\n    return f_next\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    f_next = identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    f_next = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 497,
    "studentId": 721,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    func = lambda x: f(x)\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    func = lambda x: f(x)\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    func = lambda x: f(x)\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    func = lambda x: f(x)\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return lambda x: f(x)\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 498,
    "studentId": 735,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-finalfunc)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f(n)\n    else:\n        s = compose1(f, f)\n        while n>2:\n            s = f(s)\n            n -= 1\n        return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f(finalfunc)\n    else:\n        s = compose1(f, f)\n        while n>2:\n            s = compose1(f, s)\n            n -= 1\n        return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n        return f(n)\n        return f(finalfunc)\n    else:\n        s = compose1(f, f)\n        while n>2:\n            s = f(s)\n            s = compose1(f, s)\n            n -= 1\n        return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    elif n==1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return f(finalfunc)\n"
      },
      {
        "count": 3,
        "value": "    else:\n        s = compose1(f, f)\n        while n>2:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            s = f(s)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            s = compose1(f, s)\n"
      },
      {
        "count": 6,
        "value": "            n -= 1\n        return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5,
      10
    ],
    "removed": [
      4,
      9
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return f(finalfunc)"
      },
      {
        "line": 10,
        "code": "            s = compose1(f, s)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return f(n)"
      },
      {
        "line": 9,
        "code": "            s = f(s)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated\n    s = f(s)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 499,
    "studentId": 659,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 500,
    "studentId": 758,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def s(x):\n        s = identity\n        for i in range(1, n+1):\n            s = f(s(x))\n        return s(x)\n    return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def s(x):\n        s = identity\n        for i in range(1, n+1):\n            x = f(s(x))\n        return s(x)\n    return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def s(x):\n        s = identity\n        for i in range(1, n+1):\n            s = f(s(x))\n            x = f(s(x))\n        return s(x)\n    return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def s(x):\n        s = identity\n        for i in range(1, n+1):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            s = f(s(x))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(s(x))\n"
      },
      {
        "count": 6,
        "value": "        return s(x)\n    return s\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x = f(s(x))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            s = f(s(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in s\n    s = f(s(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 501,
    "studentId": 353,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-times, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-times, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-count), SingleChild(LeafConstNode(NameExpressionNode-n)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-times, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    count = n\n    def times(x):\n        temp_value = x\n        while count:\n            temp_value = f(temp_value)\n            count -= 1\n        return temp_value\n    return times\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def times(x):\n        temp_value = x\n        count = n\n        while count:\n            temp_value = f(temp_value)\n            count -= 1\n        return temp_value\n    return times\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    count = n\n    def times(x):\n        temp_value = x\n        count = n\n        while count:\n            temp_value = f(temp_value)\n            count -= 1\n        return temp_value\n    return times\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    count = n\n"
      },
      {
        "count": 2,
        "value": "    def times(x):\n        temp_value = x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        count = n\n"
      },
      {
        "count": 9,
        "value": "        while count:\n            temp_value = f(temp_value)\n            count -= 1\n        return temp_value\n    return times\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        count = n"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    count = n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in times\n    while count:\nUnboundLocalError: local variable 'count' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 502,
    "studentId": 189,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        counter = 1\n        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(x):\n        counter = 0\n        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(x):\n        counter = 1\n        counter = 0\n        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def helper(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        counter = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        counter = 0\n"
      },
      {
        "count": 9,
        "value": "        while counter<n:\n            x = f(x)\n            counter += 1\n        return x\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        counter = 0"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        counter = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 503,
    "studentId": 305,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n        return compose1(f, repeated(f, n))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    if n==1:\n        return f\n    elif n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(f, repeated(f, n))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f, repeated(f, n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f, repeated(f, n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f, repeated(f, n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f, repeated(f, n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f, repeated(f, n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return compose1(f, repeated(f, n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 504,
    "studentId": 188,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def func(value):\n        i = 1\n        result = f(value)\n        while i<n:\n            result = f(result)\n            i += 1\n        return result\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def func(value):\n        i = 1\n        result = f(value)\n        while i<n:\n            result = f(result)\n            i += 1\n        return result\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def func(value):\n        i = 1\n        result = f(value)\n        while i<n:\n            result = f(result)\n            i += 1\n        return result\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def func(value):\n        i = 1\n        result = f(value)\n        while i<n:\n            result = f(result)\n            i += 1\n        return result\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 505,
    "studentId": 926,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-b)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(f, n):\n        if n==0:\n            return lambda input_a: input_a\n        b = f\n        while n>=2:\n            b = compose1(f, b)\n            n -= 1\n        return g\n    return helper(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def helper(f, n):\n        if n==0:\n            return lambda input_a: input_a\n        b = f\n        while n>=2:\n            b = compose1(f, b)\n            n -= 1\n        return b\n    return helper(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def helper(f, n):\n        if n==0:\n            return lambda input_a: input_a\n        b = f\n        while n>=2:\n            b = compose1(f, b)\n            n -= 1\n        return g\n        return b\n    return helper(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 8,
        "value": "def repeated(f, n):\n    def helper(f, n):\n        if n==0:\n            return lambda input_a: input_a\n        b = f\n        while n>=2:\n            b = compose1(f, b)\n            n -= 1\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return g\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return b\n"
      },
      {
        "count": 5,
        "value": "    return helper(f, n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      9
    ],
    "removed": [
      8
    ],
    "addedLine": [
      {
        "line": 9,
        "code": "        return b"
      }
    ],
    "removedLine": [
      {
        "line": 8,
        "code": "        return g"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return helper(f, n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return g\nNameError: name 'g' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 506,
    "studentId": 678,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def eff(x):\n        y = f(x)\n        for i in range(n-1):\n            y = f(y)\n        return (y)\n    return eff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def eff(x):\n        y = f(x)\n        for i in range(n-1):\n            y = f(y)\n        return (y)\n    return eff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def eff(x):\n        y = f(x)\n        for i in range(n-1):\n            y = f(y)\n        return (y)\n    return eff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def eff(x):\n        y = f(x)\n        for i in range(n-1):\n            y = f(y)\n        return (y)\n    return eff\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 507,
    "studentId": 163,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity(identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity(n)\n        return identity(identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return identity(n)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity(identity)\n"
      },
      {
        "count": 6,
        "value": "    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return identity(n)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 508,
    "studentId": 408,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def pooh(x):\n        k = n\n        if k==0:\n            return x\n        if k==1:\n            return f(x)\n        h = f\n        while k>1:\n            h = compose1(f, f)\n            k -= 1\n        return h(x)\n    return pooh\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def pooh(x):\n        k = n\n        if k==0:\n            return x\n        if k==1:\n            return f(x)\n        h = f\n        while k>1:\n            h = compose1(h, f)\n            k -= 1\n        return h(x)\n    return pooh\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def pooh(x):\n        k = n\n        if k==0:\n            return x\n        if k==1:\n            return f(x)\n        h = f\n        while k>1:\n            h = compose1(f, f)\n            h = compose1(h, f)\n            k -= 1\n        return h(x)\n    return pooh\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 9,
        "value": "def repeated(f, n):\n    def pooh(x):\n        k = n\n        if k==0:\n            return x\n        if k==1:\n            return f(x)\n        h = f\n        while k>1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            h = compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            h = compose1(h, f)\n"
      },
      {
        "count": 7,
        "value": "            k -= 1\n        return h(x)\n    return pooh\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      10
    ],
    "removed": [
      9
    ],
    "addedLine": [
      {
        "line": 10,
        "code": "            h = compose1(h, f)"
      }
    ],
    "removedLine": [
      {
        "line": 9,
        "code": "            h = compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 509,
    "studentId": 1004,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    counter = n\n    if n==0:\n        return n\n    def fxn(num):\n        return num\n    while (counter>0):\n        fxn = compose1(f, fxn)\n        counter -= 1\n    return fxn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    counter = n\n    if identity==0:\n        return n\n    def fxn(num):\n        return num\n    while (counter>0):\n        fxn = compose1(f, fxn)\n        counter -= 1\n    return fxn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    counter = n\n    if n==0:\n    if identity==0:\n        return n\n    def fxn(num):\n        return num\n    while (counter>0):\n        fxn = compose1(f, fxn)\n        counter -= 1\n    return fxn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    counter = n\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    if n==0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    if identity==0:\n"
      },
      {
        "count": 11,
        "value": "        return n\n    def fxn(num):\n        return num\n    while (counter>0):\n        fxn = compose1(f, fxn)\n        counter -= 1\n    return fxn\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    if identity==0:"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    if n==0:"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 510,
    "studentId": 39,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def inner(x):\n        def helper(total, n):\n            if n==0:\n                return n\n            if n==1:\n                return f(total)\n            return helper(f(total), n-1)\n        return helper(x, n)\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def inner(x):\n        def helper(total, n):\n            if n==0:\n                return x\n            if n==1:\n                return f(total)\n            return helper(f(total), n-1)\n        return helper(x, n)\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def inner(x):\n        def helper(total, n):\n            if n==0:\n                return n\n                return x\n            if n==1:\n                return f(total)\n            return helper(f(total), n-1)\n        return helper(x, n)\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def inner(x):\n        def helper(total, n):\n            if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                return x\n"
      },
      {
        "count": 9,
        "value": "            if n==1:\n                return f(total)\n            return helper(f(total), n-1)\n        return helper(x, n)\n    return inner\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "                return x"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "                return n"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 0,
    "log": ">>> repeated(square, 0)(5)\n0\n\n# Error: expected\n#     5\n# but got\n#     0"
  },
  {
    "id": 511,
    "studentId": 766,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        elif n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        elif n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        elif n==1:\n            return f(x)\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 7,
        "value": "def repeated(f, n):\n    def h(x):\n        if n==0:\n            return x\n        elif n==1:\n            return f(x)\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 7,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in h\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 512,
    "studentId": 1056,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = identity\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    while n>0:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = identity\n    while n>1:\n    while n>0:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    g = identity\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    while n>1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    while n>0:\n"
      },
      {
        "count": 7,
        "value": "        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    while n>0:"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    while n>1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 513,
    "studentId": 560,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-finalfunc)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    finalfunc = identity\n    x = 1\n    while x<=n:\n        finalfunc = f(identity)\n        x += 1\n    return finalfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    finalfunc = identity\n    x = 1\n    while x<=n:\n        finalfunc = compose1(f, finalfunc)\n        x += 1\n    return finalfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    finalfunc = identity\n    x = 1\n    while x<=n:\n        finalfunc = f(identity)\n        finalfunc = compose1(f, finalfunc)\n        x += 1\n    return finalfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    finalfunc = identity\n    x = 1\n    while x<=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        finalfunc = f(identity)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        finalfunc = compose1(f, finalfunc)\n"
      },
      {
        "count": 6,
        "value": "        x += 1\n    return finalfunc\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        finalfunc = compose1(f, finalfunc)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        finalfunc = f(identity)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    finalfunc = f(identity)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 514,
    "studentId": 244,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    superFunction = f\n    def functionMaker(f, n, superFunction):\n        if n>0:\n            superFunction = compose1(f, superFunction)\n            n = n-1\n            return functionMaker(f, n, superFunction)\n        else:\n            return superFunction\n    return functionMaker(f, n, superFunction)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    superFunction = identity\n    def functionMaker(f, n, superFunction):\n        if n>0:\n            superFunction = compose1(f, superFunction)\n            n = n-1\n            return functionMaker(f, n, superFunction)\n        else:\n            return superFunction\n    return functionMaker(f, n, superFunction)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    superFunction = f\n    superFunction = identity\n    def functionMaker(f, n, superFunction):\n        if n>0:\n            superFunction = compose1(f, superFunction)\n            n = n-1\n            return functionMaker(f, n, superFunction)\n        else:\n            return superFunction\n    return functionMaker(f, n, superFunction)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    superFunction = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    superFunction = identity\n"
      },
      {
        "count": 12,
        "value": "    def functionMaker(f, n, superFunction):\n        if n>0:\n            superFunction = compose1(f, superFunction)\n            n = n-1\n            return functionMaker(f, n, superFunction)\n        else:\n            return superFunction\n    return functionMaker(f, n, superFunction)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    superFunction = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    superFunction = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 515,
    "studentId": 576,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeat(x):\n        i = 0\n        h = f\n        while i<n:\n            h = compose1(h, f)\n            i += 1\n        return h(x)\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeat(x):\n        i = 0\n        h = identity\n        while i<n:\n            h = compose1(h, f)\n            i += 1\n        return h(x)\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeat(x):\n        i = 0\n        h = f\n        h = identity\n        while i<n:\n            h = compose1(h, f)\n            i += 1\n        return h(x)\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def repeat(x):\n        i = 0\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        h = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        h = identity\n"
      },
      {
        "count": 9,
        "value": "        while i<n:\n            h = compose1(h, f)\n            i += 1\n        return h(x)\n    return repeat\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        h = identity"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        h = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 516,
    "studentId": 444,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def identity(x):\n        return x\n    for i in range(0, n):\n        identity = compose1(f, identity)\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def identity(x):\n        return x\n    for i in range(0, n):\n        identity = compose1(f, identity)\n    return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def identity(x):\n        return x\n    for i in range(0, n):\n        identity = compose1(f, identity)\n    return result\n    return identity\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def identity(x):\n        return x\n    for i in range(0, n):\n        identity = compose1(f, identity)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return result\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return identity\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "    return identity"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "    return result"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return result\nNameError: name 'result' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 517,
    "studentId": 602,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    a = lambda x: x\n    while n>=0:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = lambda x: x\n    while n>=1:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = lambda x: x\n    while n>=0:\n    while n>=1:\n        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    a = lambda x: x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    while n>=0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    while n>=1:\n"
      },
      {
        "count": 7,
        "value": "        a = compose1(a, f)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    while n>=1:"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    while n>=0:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 518,
    "studentId": 640,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_helper(x):\n        if n>=1:\n            return compose1(f, repeated(f, n-1))\n        else:\n            return x\n    return repeated_helper(x)\n    result = repeated(square, 3)(2)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeated_helper(x):\n        if n>=1:\n            return compose1(f, repeated(f, n-1))\n        else:\n            return x\n    return repeated_helper(identity)\n    result = repeated(square, 3)(2)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeated_helper(x):\n        if n>=1:\n            return compose1(f, repeated(f, n-1))\n        else:\n            return x\n    return repeated_helper(x)\n    return repeated_helper(identity)\n    result = repeated(square, 3)(2)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def repeated_helper(x):\n        if n>=1:\n            return compose1(f, repeated(f, n-1))\n        else:\n            return x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    return repeated_helper(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return repeated_helper(identity)\n"
      },
      {
        "count": 5,
        "value": "    result = repeated(square, 3)(2)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "    return repeated_helper(identity)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "    return repeated_helper(x)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return repeated_helper(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 519,
    "studentId": 950,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==1:\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    if n==1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    if n==1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 520,
    "studentId": 924,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-c), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-apply, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    def apply(x):\n        if n==0:\n            return x\n        else:\n            while n>0:\n                x = f(x)\n                n = n-1\n            return x\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def apply(x):\n        c = n\n        if c==0:\n            return x\n        else:\n            while c>0:\n                x = f(x)\n                c = c-1\n            return x\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def apply(x):\n        if n==0:\n        c = n\n        if c==0:\n            return x\n        else:\n            while n>0:\n            while c>0:\n                x = f(x)\n                n = n-1\n                c = c-1\n            return x\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def apply(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        if n==0:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        c = n\n        if c==0:\n"
      },
      {
        "count": 2,
        "value": "            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            while n>0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            while c>0:\n"
      },
      {
        "count": 1,
        "value": "                x = f(x)\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "                n = n-1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                c = c-1\n"
      },
      {
        "count": 6,
        "value": "            return x\n    return apply\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      4,
      8,
      11
    ],
    "removed": [
      2,
      7,
      10
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        c = n"
      },
      {
        "line": 4,
        "code": "        if c==0:"
      },
      {
        "line": 8,
        "code": "            while c>0:"
      },
      {
        "line": 11,
        "code": "                c = c-1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        if n==0:"
      },
      {
        "line": 7,
        "code": "            while n>0:"
      },
      {
        "line": 10,
        "code": "                n = n-1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in apply\n    if n == 0:\nUnboundLocalError: local variable 'n' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 521,
    "studentId": 323,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 522,
    "studentId": 687,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        x = compose1(f, f)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        x = compose1(f, f)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        x = compose1(f, f)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    if n==1:\n        return f\n    else:\n        x = compose1(f, f)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 523,
    "studentId": 636,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        a = n-1\n        b = f(x)\n        while a>0:\n            b = f(b)\n            a = a-1\n        return b\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        a = n-1\n        b = f(x)\n        while a>0:\n            b = f(b)\n            a = a-1\n        return b\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def h(x):\n        a = n-1\n        b = f(x)\n        while a>0:\n            b = f(b)\n            a = a-1\n        return b\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def h(x):\n        a = n-1\n        b = f(x)\n        while a>0:\n            b = f(b)\n            a = a-1\n        return b\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 524,
    "studentId": 949,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-base, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-base, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-times), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-base, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    times = n\n    def base(x):\n        if times==0:\n            return x\n        else:\n            while times!=0:\n                x = f(x)\n                times -= 1\n        return x\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def base(x):\n        times = n\n        if times==0:\n            return x\n        else:\n            while times!=0:\n                x = f(x)\n                times -= 1\n        return x\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    times = n\n    def base(x):\n        times = n\n        if times==0:\n            return x\n        else:\n            while times!=0:\n                x = f(x)\n                times -= 1\n        return x\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    times = n\n"
      },
      {
        "count": 1,
        "value": "    def base(x):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        times = n\n"
      },
      {
        "count": 12,
        "value": "        if times==0:\n            return x\n        else:\n            while times!=0:\n                x = f(x)\n                times -= 1\n        return x\n    return base\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        times = n"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    times = n"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in base\n    if times == 0:          #if the nth applicatio of f is 0, then just return x\nUnboundLocalError: local variable 'times' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 525,
    "studentId": 175,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose(g, h):\n        def func(x):\n            return g(h(x))\n        return func\n    if n==0:\n        return n\n    elif n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compose(g, h):\n        def func(x):\n            return g(h(x))\n        return func\n    if n==0:\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compose(g, h):\n        def func(x):\n            return g(h(x))\n        return func\n    if n==0:\n        return n\n        return identity\n    elif n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def compose(g, h):\n        def func(x):\n            return g(h(x))\n        return func\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return n\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 8,
        "value": "    elif n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return n"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 526,
    "studentId": 173,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    for i in range(1, n):\n        f = compose1(g, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    for i in range(1, n):\n        f = compose1(g, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    for i in range(1, n):\n        f = compose1(g, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    g = f\n    for i in range(1, n):\n        f = compose1(g, f)\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 527,
    "studentId": 660,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeater(x):\n        k = 0\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(x):\n        k = 0\n        k = 1\n        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def repeater(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        k = 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        k = 1\n"
      },
      {
        "count": 9,
        "value": "        while k<=n:\n            x = f(x)\n            k = k+1\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        k = 1"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        k = 0"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 528,
    "studentId": 740,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    if n==1:\n        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==0:\n        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n    if n==1:\n        return identity\n    if n==0:\n        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "        return x\n    if n==1:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "        return identity\n    if n==0:\n"
      },
      {
        "count": 7,
        "value": "        return f(x)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5
    ],
    "removed": [
      2,
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        return identity"
      },
      {
        "line": 5,
        "code": "    if n==0:"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      },
      {
        "line": 3,
        "code": "    if n==1:"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return compose1(f, repeated(f, n -1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated\n    return compose1(f, repeated(f, n -1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(x)\nNameError: name 'x' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 529,
    "studentId": 612,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3\nTraceback (most recent call last):\n    add_three = repeated(increment, 3\n                                    ^\nSyntaxError: unexpected EOF while parsing\n\n# Error: expected\n#     \n# but got\n#     SyntaxError"
  },
  {
    "id": 530,
    "studentId": 893,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 531,
    "studentId": 558,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: f(x)\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: f(x)\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return lambda x: f(x)"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 532,
    "studentId": 813,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: f(x)\n    return lambda y: f(repeated(f, n-1)(y))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: identity(x)\n    return lambda y: f(repeated(f, n-1)(y))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: f(x)\n        return lambda x: identity(x)\n    return lambda y: f(repeated(f, n-1)(y))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return lambda x: f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return lambda x: identity(x)\n"
      },
      {
        "count": 5,
        "value": "    return lambda y: f(repeated(f, n-1)(y))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return lambda x: identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return lambda x: f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 533,
    "studentId": 552,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def new(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def new(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def new(x):\n        if n==0:\n            return x\n        else:\n            return f(repeated(f, n-1))\n            return f(repeated(f, n-1)(x))\n    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def new(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 5,
        "value": "    return new\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [
      5
    ],
    "addedLine": [
      {
        "line": 6,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 5,
        "code": "            return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in new\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 534,
    "studentId": 428,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n>1:\n        qwer = repeated(f, n-1)\n        return lambda x: f(qwer(x))\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n>1:\n        qwer = repeated(f, n-1)\n        return lambda x: f(qwer(x))\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n>1:\n        qwer = repeated(f, n-1)\n        return lambda x: f(qwer(x))\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n>1:\n        qwer = repeated(f, n-1)\n        return lambda x: f(qwer(x))\n    return f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 535,
    "studentId": 484,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    result = f\n    while n>0:\n        result = compose1(result, f)\n        n = n-1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    result = identity\n    while n>0:\n        result = compose1(result, f)\n        n = n-1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    result = f\n    result = identity\n    while n>0:\n        result = compose1(result, f)\n        n = n-1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    result = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    result = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        result = compose1(result, f)\n        n = n-1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    result = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    result = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 536,
    "studentId": 332,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    a = compose1(f, f)\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    a = compose1(identity, identity)\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    a = compose1(f, f)\n    a = compose1(identity, identity)\n    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    a = compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    a = compose1(identity, identity)\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        a = compose1(f, a)\n        n -= 1\n    return a\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    a = compose1(identity, identity)"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    a = compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 10,
    "log": ">>> add_three(5)\n10\n\n# Error: expected\n#     8\n# but got\n#     10"
  },
  {
    "id": 537,
    "studentId": 859,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    k = 2\n    x = compose1(f, f)\n    while k<n:\n        x = compose1(x, f)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = 2\n    x = compose1(f, f)\n    while k<n:\n        x = compose1(x, f)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    k = 2\n    x = compose1(f, f)\n    while k<n:\n        x = compose1(x, f)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    k = 2\n    x = compose1(f, f)\n    while k<n:\n        x = compose1(x, f)\n        k += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 625,
    "log": ">>> repeated(square, 0)(5)\n625\n\n# Error: expected\n#     5\n# but got\n#     625"
  },
  {
    "id": 538,
    "studentId": 676,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 539,
    "studentId": 129,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    help = f\n    for i in range(0, n):\n        help = compose1(f, help)\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    help = identity\n    for i in range(0, n):\n        help = compose1(f, help)\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    help = f\n    help = identity\n    for i in range(0, n):\n        help = compose1(f, help)\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    help = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    help = identity\n"
      },
      {
        "count": 7,
        "value": "    for i in range(0, n):\n        help = compose1(f, help)\n    return help\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    help = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    help = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 540,
    "studentId": 713,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeated_function(value):\n        if (n==1):\n            return f(value)\n        else:\n            return f(repeated(f, n-1)(value))\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_function(value):\n        if (n==1):\n            return f(value)\n        else:\n            return f(repeated(f, n-1)(value))\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def repeated_function(value):\n        if (n==1):\n            return f(value)\n        else:\n            return f(repeated(f, n-1)(value))\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    def repeated_function(value):\n        if (n==1):\n            return f(value)\n        else:\n            return f(repeated(f, n-1)(value))\n    return repeated_function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function\n    return f(repeated(f, n-1)(value))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function\n    return f(repeated(f, n-1)(value))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function\n    return f(repeated(f, n-1)(value))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function\n    return f(repeated(f, n-1)(value))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function\n    return f(repeated(f, n-1)(value))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function\n    return f(repeated(f, n-1)(value))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated_function\n    if (n == 1):\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 541,
    "studentId": 716,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        i = 1\n        while i<=n:\n            x = h(x)\n            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        i = 1\n        while i<=n:\n            x = f(x)\n            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        i = 1\n        while i<=n:\n            x = h(x)\n            x = f(x)\n            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        i = 1\n        while i<=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            x = h(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(x)\n"
      },
      {
        "count": 7,
        "value": "            i += 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "            x = f(x)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "            x = h(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    x = h(x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    x = h(x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    x = h(x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    x = h(x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    x = h(x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    x = h(x)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in h\n    while i <= n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     8\n# but got\n#     RecursionError"
  },
  {
    "id": 542,
    "studentId": 732,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeat))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        i, repeat = 1, x\n        while i<=n:\n            repeat = f(repeat)\n            i += 1\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        i, repeat = 1, x\n        while i<=n:\n            repeat = f(repeat)\n            i += 1\n        return repeat\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        i, repeat = 1, x\n        while i<=n:\n            repeat = f(repeat)\n            i += 1\n        return repeat\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def h(x):\n        i, repeat = 1, x\n        while i<=n:\n            repeat = f(repeat)\n            i += 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return repeat\n"
      },
      {
        "count": 5,
        "value": "    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 6,
        "code": "        return repeat"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n\n# Error: expected\n#     8\n# but got\n#     "
  },
  {
    "id": 543,
    "studentId": 515,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    total = f\n    k = 2\n    while k<=n:\n        total = compose1(f, total)\n        k = k+1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    total = f\n    k = 2\n    while k<=n:\n        total = compose1(f, total)\n        k = k+1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    total = f\n    k = 2\n    while k<=n:\n        total = compose1(f, total)\n        k = k+1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 10,
        "value": "    total = f\n    k = 2\n    while k<=n:\n        total = compose1(f, total)\n        k = k+1\n    return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 544,
    "studentId": 272,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-func))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), InOrderSort(ast)))))))))",
    "before": "def repeated(f, n):\n    i = 0\n    def func(x):\n        if n==0:\n            return x\n        else:\n            while i<=n:\n                x = f(x)\n        return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def func(x):\n        if n==0:\n            return x\n        else:\n            i = 0\n            while i<n:\n                x = f(x)\n                i += 1\n        return x\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i = 0\n    def func(x):\n        if n==0:\n            return x\n        else:\n            while i<=n:\n            i = 0\n            while i<n:\n                x = f(x)\n                i += 1\n        return x\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    i = 0\n"
      },
      {
        "count": 4,
        "value": "    def func(x):\n        if n==0:\n            return x\n        else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            while i<=n:\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "            i = 0\n            while i<n:\n"
      },
      {
        "count": 1,
        "value": "                x = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "                i += 1\n"
      },
      {
        "count": 1,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    return func\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7,
      8,
      10,
      12
    ],
    "removed": [
      1,
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "            i = 0"
      },
      {
        "line": 8,
        "code": "            while i<n:"
      },
      {
        "line": 10,
        "code": "                i += 1"
      },
      {
        "line": 12,
        "code": "    return func"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    i = 0"
      },
      {
        "line": 6,
        "code": "            while i<=n:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 545,
    "studentId": 736,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-x), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def h(x):\n        i = n\n        while i>0:\n            i -= 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def h(x):\n        i = n\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def h(x):\n        i = n\n        while i>0:\n            x = f(x)\n            i -= 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    def h(x):\n        i = n\n        while i>0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            x = f(x)\n"
      },
      {
        "count": 7,
        "value": "            i -= 1\n        return x\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 4,
        "code": "            x = f(x)"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": 5,
    "log": ">>> add_three(5)\n5\n\n# Error: expected\n#     8\n# but got\n#     5"
  },
  {
    "id": 546,
    "studentId": 34,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return f\n    else:\n        return f(repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return compose1(identity, identity)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return f\n        return compose1(identity, identity)\n    else:\n        return f(repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(identity, identity)\n"
      },
      {
        "count": 1,
        "value": "    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return f(repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3,
      6
    ],
    "removed": [
      2,
      5
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return compose1(identity, identity)"
      },
      {
        "line": 6,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return f"
      },
      {
        "line": 5,
        "code": "        return f(repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return f(repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment\n    return x + 1\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     \n# but got\n#     TypeError"
  },
  {
    "id": 547,
    "studentId": 97,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-r, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))))",
    "before": "def repeated(f, n):\n    def r(x):\n        if x==0:\n            return f(p)\n        else:\n            return compose1(f, r(x-1))\n    return r(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def r(x):\n        if x==0:\n            return identity\n        if x==1:\n            return f\n        else:\n            return compose1(f, r(x-1))\n    return r(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def r(x):\n        if x==0:\n            return f(p)\n            return identity\n        if x==1:\n            return f\n        else:\n            return compose1(f, r(x-1))\n    return r(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    def r(x):\n        if x==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            return f(p)\n"
      },
      {
        "count": 3,
        "added": true,
        "value": "            return identity\n        if x==1:\n            return f\n"
      },
      {
        "count": 7,
        "value": "        else:\n            return compose1(f, r(x-1))\n    return r(n)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4,
      5,
      6
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "            return identity"
      },
      {
        "line": 5,
        "code": "        if x==1:"
      },
      {
        "line": 6,
        "code": "            return f"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "            return f(p)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    return r(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in r\n    return compose1(f,r(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in r\n    return compose1(f,r(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in r\n    return compose1(f,r(x-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in r\n    return f(p)\nNameError: name 'p' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 548,
    "studentId": 322,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def helper(x):\n        if n==0:\n            return 0\n        if n==1:\n            return f(x)\n        else:\n            return repeated(f, n-1)(f(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        if n==0:\n            return 0\n        if n==1:\n            return f(x)\n        else:\n            return repeated(f, n-1)(f(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def helper(x):\n        if n==0:\n            return 0\n        if n==1:\n            return f(x)\n        else:\n            return repeated(f, n-1)(f(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def helper(x):\n        if n==0:\n            return 0\n        if n==1:\n            return f(x)\n        else:\n            return repeated(f, n-1)(f(x))\n    return helper\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 0,
    "log": ">>> repeated(square, 0)(5)\n0\n\n# Error: expected\n#     5\n# but got\n#     0"
  },
  {
    "id": 549,
    "studentId": 600,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        return repeated(compose(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeated(compose(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return repeated(compose(f, f), n-1)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return repeated(compose(f,f),n-1)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 550,
    "studentId": 673,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(n)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(n)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(n)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 12,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==0:\n        return f(n)\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(g(x))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 551,
    "studentId": 1070,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    h = f\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    for x in range(n):\n        h = compose1(f, h)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    h = identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    for x in range(n):\n        h = compose1(f, h)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    h = f\n    h = identity\n    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    for x in range(n):\n        h = compose1(f, h)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    h = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    h = identity\n"
      },
      {
        "count": 11,
        "value": "    def compose1(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    for x in range(n):\n        h = compose1(f, h)\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    h = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    h = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 552,
    "studentId": 167,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))), 2), Selected(\\x => Match(x, StartsWithTarget(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(LeafWildcard(\"any\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def innerFunction(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k += 1\n    return innerFunction\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def innerFunction(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k += 1\n        return x\n    return innerFunction\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def innerFunction(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k += 1\n        return x\n    return innerFunction\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def innerFunction(x):\n        k = 1\n        while k<=n:\n            x = f(x)\n            k += 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return x\n"
      },
      {
        "count": 5,
        "value": "    return innerFunction\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 6,
        "code": "        return x"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n\n# Error: expected\n#     8\n# but got\n#     "
  },
  {
    "id": 553,
    "studentId": 1006,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-evaluated, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    while n>1:\n        h = compose1(f, f)\n        n -= 1\n    def evaluated(x):\n        if n==0:\n            return x\n        return h(x)\n    return evaluated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    h = f\n    while n>1:\n        h = compose1(h, f)\n        n -= 1\n    def evaluated(x):\n        if n==0:\n            return x\n        return h(x)\n    return evaluated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    h = f\n    while n>1:\n        h = compose1(f, f)\n        h = compose1(h, f)\n        n -= 1\n    def evaluated(x):\n        if n==0:\n            return x\n        return h(x)\n    return evaluated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    h = f\n"
      },
      {
        "count": 1,
        "value": "    while n>1:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        h = compose1(f, f)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        h = compose1(h, f)\n"
      },
      {
        "count": 10,
        "value": "        n -= 1\n    def evaluated(x):\n        if n==0:\n            return x\n        return h(x)\n    return evaluated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 1,
        "code": "    h = f"
      },
      {
        "line": 4,
        "code": "        h = compose1(h, f)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        h = compose1(f, f)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 554,
    "studentId": 209,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-outer, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def outer(base):\n        x = n\n        while (x>0):\n            base = f(base)\n            x -= 1\n    return outer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def outer(base):\n        x = n\n        while (x>0):\n            base = f(base)\n            x -= 1\n        return base\n    return outer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def outer(base):\n        x = n\n        while (x>0):\n            base = f(base)\n            x -= 1\n        return base\n    return outer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def outer(base):\n        x = n\n        while (x>0):\n            base = f(base)\n            x -= 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return base\n"
      },
      {
        "count": 5,
        "value": "    return outer\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      6
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 6,
        "code": "        return base"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n\n# Error: expected\n#     8\n# but got\n#     "
  },
  {
    "id": 555,
    "studentId": 852,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    func = f\n    while n>1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    func = f\n    while n>1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    func = f\n    while n>1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    func = f\n    while n>1:\n        func = compose1(f, func)\n        n -= 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 556,
    "studentId": 1022,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def applier(a):\n        c = 1\n        out = a\n        while c!=n:\n            out = f(out)\n            c += 1\n        return out\n    return applier\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def applier(a):\n        c = 0\n        out = a\n        while c!=n:\n            out = f(out)\n            c += 1\n        return out\n    return applier\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def applier(a):\n        c = 1\n        c = 0\n        out = a\n        while c!=n:\n            out = f(out)\n            c += 1\n        return out\n    return applier\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def applier(a):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        c = 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        c = 0\n"
      },
      {
        "count": 10,
        "value": "        out = a\n        while c!=n:\n            out = f(out)\n            c += 1\n        return out\n    return applier\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        c = 0"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        c = 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 7,
    "log": ">>> add_three(5)\n7\n\n# Error: expected\n#     8\n# but got\n#     7"
  },
  {
    "id": 557,
    "studentId": 822,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    for _ in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    for _ in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    g = identity\n    for _ in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 7,
        "value": "    for _ in range(n):\n        g = compose1(f, g)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 558,
    "studentId": 374,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(repeated(f, n), repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(repeated(f, n), repeated(f, n-1))\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(repeated(f, n), repeated(f, n-1))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(f, repeated(f, n-1))\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(f, repeated(f, n-1))"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose1(repeated(f, n), repeated(f, n-1))"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(repeated(f, n), repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     \n# but got\n#     RecursionError"
  },
  {
    "id": 559,
    "studentId": 582,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    new_func = lambda x: x\n    while n>=0:\n        new_func = compose1(f, new_func)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    new_func = lambda x: x\n    while n>=1:\n        new_func = compose1(f, new_func)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    new_func = lambda x: x\n    while n>=0:\n    while n>=1:\n        new_func = compose1(f, new_func)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    new_func = lambda x: x\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    while n>=0:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    while n>=1:\n"
      },
      {
        "count": 7,
        "value": "        new_func = compose1(f, new_func)\n        n -= 1\n    return new_func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "    while n>=1:"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "    while n>=0:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 560,
    "studentId": 526,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    new_f = f\n    while n>0:\n        new_f = compose1(f, new_f)\n        n -= 1\n    return new_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    new_f = identity\n    while n>0:\n        new_f = compose1(f, new_f)\n        n -= 1\n    return new_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    new_f = f\n    new_f = identity\n    while n>0:\n        new_f = compose1(f, new_f)\n        n -= 1\n    return new_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    new_f = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    new_f = identity\n"
      },
      {
        "count": 8,
        "value": "    while n>0:\n        new_f = compose1(f, new_f)\n        n -= 1\n    return new_f\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    new_f = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    new_f = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 561,
    "studentId": 463,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    finalh = 0\n    base = n\n    def repeated_helper(f, n, finalh):\n        if n==base:\n            finalh = compose1(f, f)\n            return repeated_helper(f, n-1, finalh)\n        elif n==1:\n            return finalh\n        elif n>1:\n            finalh = compose1(finalh, f)\n            return repeated_helper(f, n-1, finalh)\n    return repeated_helper(f, n, finalh)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    finalh = 0\n    base = n\n    def repeated_helper(f, n, finalh):\n        if n==base:\n            finalh = compose1(f, f)\n            return repeated_helper(f, n-1, finalh)\n        elif n==1:\n            return finalh\n        elif n>1:\n            finalh = compose1(finalh, f)\n            return repeated_helper(f, n-1, finalh)\n    return repeated_helper(f, n, finalh)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    finalh = 0\n    base = n\n    def repeated_helper(f, n, finalh):\n        if n==base:\n            finalh = compose1(f, f)\n            return repeated_helper(f, n-1, finalh)\n        elif n==1:\n            return finalh\n        elif n>1:\n            finalh = compose1(finalh, f)\n            return repeated_helper(f, n-1, finalh)\n    return repeated_helper(f, n, finalh)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 16,
        "value": "    finalh = 0\n    base = n\n    def repeated_helper(f, n, finalh):\n        if n==base:\n            finalh = compose1(f, f)\n            return repeated_helper(f, n-1, finalh)\n        elif n==1:\n            return finalh\n        elif n>1:\n            finalh = compose1(finalh, f)\n            return repeated_helper(f, n-1, finalh)\n    return repeated_helper(f, n, finalh)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'NoneType' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 562,
    "studentId": 202,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    result, i = f, 1\n    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    result, i = identity, 1\n    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    result, i = f, 1\n    result, i = identity, 1\n    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    result, i = f, 1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    result, i = identity, 1\n"
      },
      {
        "count": 8,
        "value": "    while i<=n:\n        result = compose1(f, result)\n        i += 1\n    return result\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    result, i = identity, 1"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    result, i = f, 1"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 563,
    "studentId": 1060,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated\n    return compose1(repeated(f,n-1),f)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 564,
    "studentId": 1009,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-repeat, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-repeat, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))",
    "before": "def repeated(f, n):\n    def function(x):\n        def repeat(n):\n            if n==0:\n                return x\n            return f(repeat(n-1))\n        return repeat\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def function(x):\n        def repeat(n):\n            if n==0:\n                return x\n            return f(repeat(n-1))\n        return repeat(n)\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def function(x):\n        def repeat(n):\n            if n==0:\n                return x\n            return f(repeat(n-1))\n        return repeat\n        return repeat(n)\n    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def function(x):\n        def repeat(n):\n            if n==0:\n                return x\n            return f(repeat(n-1))\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return repeat\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return repeat(n)\n"
      },
      {
        "count": 5,
        "value": "    return function\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "        return repeat(n)"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "        return repeat"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n<function repeated.<locals>.function.<locals>.repeat at 0x0000025AF6217D90>\n\n# Error: expected\n#     8\n# but got\n#     <function repeated.<locals>.function.<locals>.repeat at 0x0000025AF6217D90>"
  },
  {
    "id": 565,
    "studentId": 578,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-result))), -1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def lo_repeated(input_lo):\n        loop_lo, result = 1, input_lo\n        while loop_lo<=n:\n            result, loop_lo = f(result), loop_lo+1\n    return lo_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def lo_repeated(input_lo):\n        loop_lo, result = 1, input_lo\n        while loop_lo<=n:\n            result, loop_lo = f(result), loop_lo+1\n        return result\n    return lo_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def lo_repeated(input_lo):\n        loop_lo, result = 1, input_lo\n        while loop_lo<=n:\n            result, loop_lo = f(result), loop_lo+1\n        return result\n    return lo_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 5,
        "value": "def repeated(f, n):\n    def lo_repeated(input_lo):\n        loop_lo, result = 1, input_lo\n        while loop_lo<=n:\n            result, loop_lo = f(result), loop_lo+1\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return result\n"
      },
      {
        "count": 5,
        "value": "    return lo_repeated\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 5,
        "code": "        return result"
      }
    ],
    "removedLine": [],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\n\n# Error: expected\n#     8\n# but got\n#     "
  },
  {
    "id": 566,
    "studentId": 960,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return 0\n    if n==1:\n        return f(1)\n    if n==2:\n        return compose1(f, f)\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f(1)\n    if n==2:\n        return compose1(f, f)\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return 0\n        return identity\n    if n==1:\n        return f(1)\n    if n==2:\n        return compose1(f, f)\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return 0\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    if n==1:\n        return f(1)\n    if n==2:\n        return compose1(f, f)\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return 0"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     5\n# but got\n#     TypeError"
  },
  {
    "id": 567,
    "studentId": 866,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compute(x):\n        value = f(x)\n        i = 0\n        while i<n:\n            value = f(value)\n            i += 1\n        return value\n    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def compute(x):\n        value = identity(x)\n        i = 0\n        while i<n:\n            value = f(value)\n            i += 1\n        return value\n    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def compute(x):\n        value = f(x)\n        value = identity(x)\n        i = 0\n        while i<n:\n            value = f(value)\n            i += 1\n        return value\n    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    def compute(x):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        value = f(x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        value = identity(x)\n"
      },
      {
        "count": 10,
        "value": "        i = 0\n        while i<n:\n            value = f(value)\n            i += 1\n        return value\n    return compute\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        value = identity(x)"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        value = f(x)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 568,
    "studentId": 94,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    for _ in range(0, n):\n        g = compose1(g, f)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    g = identity\n    for _ in range(0, n):\n        g = compose1(g, f)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    g = f\n    g = identity\n    for _ in range(0, n):\n        g = compose1(g, f)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    g = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    g = identity\n"
      },
      {
        "count": 11,
        "value": "    for _ in range(0, n):\n        g = compose1(g, f)\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    g = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    g = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 569,
    "studentId": 1039,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    func = f\n    m = 0\n    if m==n:\n        return identity\n    while m<n:\n        func = compose1(func, f)\n        m += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    func = identity\n    m = 0\n    if m==n:\n        return identity\n    while m<n:\n        func = compose1(func, f)\n        m += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    func = f\n    func = identity\n    m = 0\n    if m==n:\n        return identity\n    while m<n:\n        func = compose1(func, f)\n        m += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "    func = f\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "    func = identity\n"
      },
      {
        "count": 11,
        "value": "    m = 0\n    if m==n:\n        return identity\n    while m<n:\n        func = compose1(func, f)\n        m += 1\n    return func\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      2
    ],
    "removed": [
      1
    ],
    "addedLine": [
      {
        "line": 2,
        "code": "    func = identity"
      }
    ],
    "removedLine": [
      {
        "line": 1,
        "code": "    func = f"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 570,
    "studentId": 690,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 7,
        "value": "    if n==1:\n        return f\n    return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    return compose1(f, repeated(f, n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 571,
    "studentId": 752,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    i, x = 1, identity\n    while i<=n:\n        x = compose(f, x)\n        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    i, x = 1, identity\n    while i<=n:\n        x = compose1(f, x)\n        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    i, x = 1, identity\n    while i<=n:\n        x = compose(f, x)\n        x = compose1(f, x)\n        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 3,
        "value": "def repeated(f, n):\n    i, x = 1, identity\n    while i<=n:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        x = compose(f, x)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        x = compose1(f, x)\n"
      },
      {
        "count": 6,
        "value": "        i += 1\n    return x\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      4
    ],
    "removed": [
      3
    ],
    "addedLine": [
      {
        "line": 4,
        "code": "        x = compose1(f, x)"
      }
    ],
    "removedLine": [
      {
        "line": 3,
        "code": "        x = compose(f, x)"
      }
    ],
    "test": "add_three = repeated(increment, 3)",
    "expected": null,
    "result": null,
    "log": ">>> add_three = repeated(increment, 3)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated\n    x = compose(f,x)\nNameError: name 'compose' is not defined\n\n# Error: expected\n#     \n# but got\n#     NameError"
  },
  {
    "id": 572,
    "studentId": 809,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    if n==1:\n        return f\n    else:\n        return compose1(f, repeated(f, n-1))\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated\n    return compose1(f, repeated(f, n - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 573,
    "studentId": 177,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n = n-1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 574,
    "studentId": 392,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast)))))))",
    "before": "def repeated(f, n):\n    counter = n\n    def function(x):\n        if counter==0:\n            return x\n        else:\n            counter -= 1\n            return f(function(x))\n    return function",
    "after": "def repeated(f, n):\n    counter = n\n    def function(x):\n        if counter==0:\n            return x\n        else:\n            return f(repeated(f, n-1)(x))\n    return function",
    "code": "def repeated(f, n):\n    counter = n\n    def function(x):\n        if counter==0:\n            return x\n        else:\n            counter -= 1\n            return f(function(x))\n            return f(repeated(f, n-1)(x))\n    return function\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    counter = n\n    def function(x):\n        if counter==0:\n            return x\n        else:\n"
      },
      {
        "count": 2,
        "removed": true,
        "value": "            counter -= 1\n            return f(function(x))\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            return f(repeated(f, n-1)(x))\n"
      },
      {
        "count": 1,
        "value": "    return function"
      }
    ],
    "added": [
      8
    ],
    "removed": [
      6,
      7
    ],
    "addedLine": [
      {
        "line": 8,
        "code": "            return f(repeated(f, n-1)(x))"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "            counter -= 1"
      },
      {
        "line": 7,
        "code": "            return f(function(x))"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in function\n    if counter == 0:\nUnboundLocalError: local variable 'counter' referenced before assignment\n\n# Error: expected\n#     8\n# but got\n#     UnboundLocalError"
  },
  {
    "id": 575,
    "studentId": 83,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 8,
        "value": "    def compose(f, g):\n        def h(x):\n            return f(g(x))\n        return h\n    if n==1:\n        return f\n    else:\n        return compose(f, repeated(f, n-1))"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated\n    return compose(f,repeated(f,n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     5\n# but got\n#     RecursionError"
  },
  {
    "id": 576,
    "studentId": 271,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-count)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    def repeater(x):\n        count = n\n        if n==0:\n            return x\n        while count>0:\n            if x==1:\n                return f(x)\n            x = compose1(f, f)(x)\n            count -= 2\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    def repeater(x):\n        count = n\n        if n==0:\n            return x\n        while count>0:\n            if count==1:\n                return f(x)\n            x = compose1(f, f)(x)\n            count -= 2\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    def repeater(x):\n        count = n\n        if n==0:\n            return x\n        while count>0:\n            if x==1:\n            if count==1:\n                return f(x)\n            x = compose1(f, f)(x)\n            count -= 2\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 6,
        "value": "def repeated(f, n):\n    def repeater(x):\n        count = n\n        if n==0:\n            return x\n        while count>0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "            if x==1:\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "            if count==1:\n"
      },
      {
        "count": 9,
        "value": "                return f(x)\n            x = compose1(f, f)(x)\n            count -= 2\n        return x\n    return repeater\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      7
    ],
    "removed": [
      6
    ],
    "addedLine": [
      {
        "line": 7,
        "code": "            if count==1:"
      }
    ],
    "removedLine": [
      {
        "line": 6,
        "code": "            if x==1:"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": 9,
    "log": ">>> add_three(5)\n9\n\n# Error: expected\n#     8\n# but got\n#     9"
  },
  {
    "id": 577,
    "studentId": 609,
    "rule": "Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(compose1(f, f), n-1)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n        return compose1(compose1(f, f), n-1)\n        return compose1(repeated(f, n-1), f)\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 4,
        "value": "def repeated(f, n):\n    if n==0:\n        return lambda x: x\n    else:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return compose1(compose1(f, f), n-1)\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return compose1(repeated(f, n-1), f)\n"
      },
      {
        "count": 4,
        "value": "def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      5
    ],
    "removed": [
      4
    ],
    "addedLine": [
      {
        "line": 5,
        "code": "        return compose1(repeated(f, n-1), f)"
      }
    ],
    "removedLine": [
      {
        "line": 4,
        "code": "        return compose1(compose1(f, f), n-1)"
      }
    ],
    "test": "add_three(5)",
    "expected": 8,
    "result": null,
    "log": ">>> add_three(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 45, in h\n    return f(g(x))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     8\n# but got\n#     TypeError"
  },
  {
    "id": 578,
    "studentId": 310,
    "rule": "Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return identity\n    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 1,
        "value": "def repeated(f, n):\n"
      },
      {
        "count": 2,
        "added": true,
        "value": "    if n==0:\n        return identity\n"
      },
      {
        "count": 9,
        "value": "    g = f\n    while n>1:\n        g = compose1(f, g)\n        n -= 1\n    return g\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      1,
      2
    ],
    "removed": [],
    "addedLine": [
      {
        "line": 1,
        "code": "    if n==0:"
      },
      {
        "line": 2,
        "code": "        return identity"
      }
    ],
    "removedLine": [],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": 25,
    "log": ">>> repeated(square, 0)(5)\n25\n\n# Error: expected\n#     5\n# but got\n#     25"
  },
  {
    "id": 579,
    "studentId": 93,
    "rule": "Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))",
    "before": "def repeated(f, n):\n    if n==0:\n        return x\n    else:\n        total = f\n        while n>1:\n            total = compose1(f, total)\n            n -= 1\n        return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "after": "def repeated(f, n):\n    if n==0:\n        return identity\n    else:\n        total = f\n        while n>1:\n            total = compose1(f, total)\n            n -= 1\n        return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h",
    "code": "def repeated(f, n):\n    if n==0:\n        return x\n        return identity\n    else:\n        total = f\n        while n>1:\n            total = compose1(f, total)\n            n -= 1\n        return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n",
    "diffs": [
      {
        "count": 2,
        "value": "def repeated(f, n):\n    if n==0:\n"
      },
      {
        "count": 1,
        "removed": true,
        "value": "        return x\n"
      },
      {
        "count": 1,
        "added": true,
        "value": "        return identity\n"
      },
      {
        "count": 10,
        "value": "    else:\n        total = f\n        while n>1:\n            total = compose1(f, total)\n            n -= 1\n        return total\ndef compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h"
      }
    ],
    "added": [
      3
    ],
    "removed": [
      2
    ],
    "addedLine": [
      {
        "line": 3,
        "code": "        return identity"
      }
    ],
    "removedLine": [
      {
        "line": 2,
        "code": "        return x"
      }
    ],
    "test": "repeated(square, 0)",
    "expected": 5,
    "result": null,
    "log": ">>> repeated(square, 0)(5)\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated\n    return x\nNameError: name 'x' is not defined\n\n# Error: expected\n#     5\n# but got\n#     NameError"
  }
]