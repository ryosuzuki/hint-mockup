[{"ErrorFlag":0,"Id":0,"studentId":654,"date":"2016-02-08 20:45:31.240143","diff":null,"before":"\r\ndef repeated(f, n):\r\n    fn, i = id, 0\r\n    while n>0:\r\n        fn = compose(f, fn)\r\n    return fn\r\ndef id(x):\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T20:45:31.240143","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    fn, i = id, 0\r\n    while n>0:\r\n        fn = compose1(f, fn)\r\n        n -= 1\r\n    return fn\r\ndef id(x):\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    fn = compose(f, fn)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":547,"date":"2016-02-16 19:43:45.806235","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    x = f\r\n    if n==0:\r\n        return f\r\n    else:\r\n        while k<n:\r\n            x = compose1(x, f)\r\n            k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-16T19:43:45.806235","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    x = f\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while k<n:\r\n            x = compose1(x, f)\r\n            k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-14 16:45:48.538041","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T16:45:48.538041","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    if n==0:\r\n        return \r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1028,"date":"2016-02-15 16:48:36.007406","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(repeated(f, n-1), f)\r\n    elif n==0:\r\n        return lambda g: g\r\n    else:\r\n        f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T16:48:36.007406","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(repeated(f, n-1), f)\r\n    elif n==0:\r\n        return lambda g: g\r\n    else:\r\n        f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 13:07:50.845570","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 1\r\n        while i!=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T13:07:50.84557","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 0\r\n        while i!=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:20:38.029190","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T13:20:38.02919","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 22:42:03.991318","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    if n==1:\r\n        return f(x)\r\n    i = 0\r\n    g = f\r\n    while n-1>i:\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-13T22:42:03.991318","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f(x)\r\n    i = 0\r\n    g = f\r\n    while n-1>i:\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":788,"date":"2016-02-08 21:12:01.621643","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(x, count = n):\r\n        if count==1:\r\n            return x\r\n        else:\r\n            return func(f(x), count-1)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-08T21:12:01.621643","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x, count = n):\r\n        if count==0:\r\n            return x\r\n        else:\r\n            return func(f(x), count-1)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":253,"date":"2016-02-09 14:21:10.851637","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func = f\r\n    def counter(i):\r\n        if i==0:\r\n            return func\r\n        return compose1(func, counter(i-1))\r\n    return counter(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-09T14:21:10.851637","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    func = f\r\n    def counter(i):\r\n        if i==0:\r\n            return identity\r\n        return compose1(func, counter(i-1))\r\n    return counter(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":307,"date":"2016-02-10 21:10:43.829292","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def rerun(x):\r\n        if (n==0):\r\n            return x\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\n    return rerun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"16","SubmissionTime":"2016-02-10T21:10:43.829292","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def rerun(x):\r\n        if (n==0):\r\n            return x\r\n        else:\r\n            return compose1(f, repeated(f, n-1))(x)\r\n    return rerun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000001A3C6057E18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000001A3C6057E18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":495,"date":"2016-02-14 10:08:41.279701","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"10","SubmissionTime":"2016-02-14T10:08:41.279701","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":653,"date":"2016-02-14 15:39:53.231391","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        i = 2\r\n        while i<=n:\r\n            h = compose1(f, f)\r\n            i += 1\r\n        return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T15:39:53.231391","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        i = 2\r\n        h = f\r\n        while i<=n:\r\n            h = compose1(h, f)\r\n            i += 1\r\n        return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)  \n    5\n    )), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":387,"date":"2016-02-09 18:55:57.388656","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-09T18:55:57.388656","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 14:16:59.402662","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return repeated(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"19","SubmissionTime":"2016-02-11T14:16:59.402662","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":451,"date":"2016-02-15 10:58:56.858498","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-15T10:58:56.858498","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":815,"date":"2016-02-11 15:51:44.659437","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda num: num\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-11T15:51:44.659437","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda num: num\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":159,"date":"2016-02-09 21:29:33.801330","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-09T21:29:33.80133","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-16 19:17:29.946233","diff":null,"before":"\r\ndef repeated(f, n):\r\n    answer = 0\r\n    def helper(x):\r\n        i = 0\r\n        while i<=n:\r\n            i += 1\r\n            answer = f(x)\r\n            x = f(x)\r\n        return answer\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T19:17:29.946233","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    answer = 0\r\n    def helper(x):\r\n        i = 0\r\n        while i<=n:\r\n            i += 1\r\n            answer = identity(x)\r\n            x = f(x)\r\n        return answer\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":990,"date":"2016-02-13 13:24:34.062147","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        x = compose1(f, f)\r\n        while n>2:\r\n            x = compose1(f, x)\r\n            n -= 1\r\n        return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-13T13:24:34.062147","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        x = compose1(f, f)\r\n        while n>2:\r\n            x = compose1(f, x)\r\n            n -= 1\r\n        return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":761,"date":"2016-02-11 12:36:21.525528","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T12:36:21.525528","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = identity\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":816,"date":"2016-02-12 22:52:20.175074","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return repeated(compose1(f, x), n-1)\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-12T22:52:20.175074","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return repeated(compose1(f,x), n - 1)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":354,"date":"2016-02-13 18:04:53.496455","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def composer(x):\r\n        def repeater(n):\r\n            if n==1:\r\n                return f(x)\r\n            else:\r\n                return f(repeater(n-1))\r\n        return repeater(n)\r\n    return composer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-13T18:04:53.496455","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def composer(x):\r\n        def repeater(n):\r\n            if n==1:\r\n                return f(x)\r\n            else:\r\n                return f(repeater(n-1))\r\n        return repeater(n)\r\n    return composer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeater","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":373,"date":"2016-02-11 15:05:23.631974","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(g, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-11T15:05:23.631974","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(g, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":856,"date":"2016-02-14 12:51:15.589331","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    g = f\r\n    while n>1:\r\n        f, n = compose1(f, g), n-1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T12:51:15.589331","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    g = f\r\n    while n>1:\r\n        f, n = compose1(f, g), n-1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":71,"date":"2016-02-14 03:17:09.136214","diff":null,"before":"\r\ndef repeated(f, n):\r\n    t = f\r\n    while n>0:\r\n        t = compose1(t, f)\r\n        n -= 1\r\n    return t\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-14T03:17:09.136214","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    t = identity\r\n    while n>0:\r\n        t = compose1(t, f)\r\n        n -= 1\r\n    return t\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 15:40:51.137126","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), identity)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-14T15:40:51.137126","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":334,"date":"2016-02-09 21:02:55.479170","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-09T21:02:55.47917","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":405,"date":"2016-02-09 21:18:58.175912","diff":null,"before":"\r\ndef repeated(f, n):\r\n    counter = n\r\n    def func(k):\r\n        if counter==0:\r\n            return k\r\n        else:\r\n            counter -= 1\r\n            return func(f(k))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"20","SubmissionTime":"2016-02-09T21:18:58.175912","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    counter = n\r\n    def func(k):\r\n        if n==0:\r\n            return k\r\n        else:\r\n            return repeated(f, n-1)(f(k))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in func","    if counter == 0:","UnboundLocalError: local variable 'counter' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-14 10:30:16.412600","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    else:\r\n        return repeated(compose1(f, f), n-2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"46","SubmissionTime":"2016-02-14T10:30:16.4126","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":401,"date":"2016-02-15 12:14:38.957956","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = lambda x: f(x)\r\n    k = 1\r\n    while k<=n:\r\n        a = compose1(f, a)\r\n        k += 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-15T12:14:38.957956","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = lambda x: identity(x)\r\n    k = 1\r\n    while k<=n:\r\n        a = compose1(f, a)\r\n        k += 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":551,"date":"2016-02-13 14:30:46.279204","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_helper(g, n, i):\r\n        if i==n:\r\n            return g\r\n        else:\r\n            return repeated_helper(compose1(g, f), n, i+1)\r\n    return repeated_helper(identity, n, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T14:30:46.279204","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_helper(g, n, i):\r\n        if i==n:\r\n            return g\r\n        else:\r\n            return repeated_helper(compose1(g, f), n, i+1)\r\n    return repeated_helper(identity, n, 0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 01:03:47.719944","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n>1:\r\n            return f(repeated(f, n))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T01:03:47.719944","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n>0:\r\n            return f(repeated(f, n-1)(x))\r\n        else:\r\n            return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in helper","    return f(repeated(f,n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":895,"date":"2016-02-14 16:12:52.785072","diff":null,"before":"\r\ndef repeated(f, n):\r\n    count = n\r\n    g = f\r\n    while count>0:\r\n        g = compose1(g, f)\r\n        count -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T16:12:52.785072","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = n\r\n    g = identity\r\n    while count>0:\r\n        g = compose1(g, f)\r\n        count -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":797,"date":"2016-02-09 20:38:11.111262","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return identity\r\n    return repeated(compose1(f, f), n-2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-09T20:38:11.111262","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    if n==0:\r\n        return identity\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":223,"date":"2016-02-14 15:01:31.413679","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T15:01:31.413679","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-12 13:52:05.537745","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = 1\r\n    def new_fun(k):\r\n        while x<=n:\r\n            k = f(k)\r\n            x += 1\r\n        return k\r\n    return new_fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T13:52:05.537745","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def new_fun(k):\r\n        x = 1\r\n        while x<=n:\r\n            k = f(k)\r\n            x += 1\r\n        return k\r\n    return new_fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-new_fun, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-new_fun, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-new_fun, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in new_fun","    while x <= n:","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":842,"date":"2016-02-10 22:14:00.170354","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repated_helper(x):\r\n        res = n\r\n        for i in range(x):\r\n            res = f(res)\r\n        return res\r\n    return repated_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T22:14:00.170354","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repated_helper(x):\r\n        res = x\r\n        for i in range(n):\r\n            res = f(res)\r\n        return res\r\n    return repated_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","15","","# Error: expected","#     243","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-16 00:04:33.186255","diff":null,"before":"\r\ndef repeated(f, n):\r\n    while n>=0:\r\n        return compose1(f, repeated(f, n-1))\r\n    return compose1\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"30","SubmissionTime":"2016-02-16T00:04:33.186255","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    while n>=0:\r\n        return compose1(f, repeated(f, n-1))\r\n    return compose1\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":944,"date":"2016-02-14 14:04:58.506536","diff":null,"before":"\r\ndef repeated(f, n):\r\n    h = f\r\n    for i in range(0, n):\r\n        h = compose1(h, f)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T14:04:58.506536","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    h = identity\r\n    for i in range(0, n):\r\n        h = compose1(h, f)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-10 15:34:25.956576","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose(g, n):\r\n        def app(x, u = n):\r\n            if n==0:\r\n                return x\r\n            return app(g(x), u-1)\r\n        return app\r\n    return compose(f, n)","after":null,"remaining":"1","SubmissionTime":"2016-02-10T15:34:25.956576","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose(g, n):\r\n        def app(x, u = n):\r\n            if u==0:\r\n                return x\r\n            return app(g(x), u-1)\r\n        return app\r\n    return compose(f, n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-u)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in app","    return app(g(x), u-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in app","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 17:37:28.590382","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        f = compose1(f, f)\r\n        n = n-1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T17:37:28.590382","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        f = compose1(g, f)\r\n        n = n-1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(LeafConstNode(NameExpressionNode-f)))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":679,"date":"2016-02-09 22:52:07.518101","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_function(base):\r\n        trial, total = 1, base\r\n        while trial<=n:\r\n            total = f(total)\r\n            trial = trial+1\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T22:52:07.518101","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_function(base):\r\n        trial, total = 1, base\r\n        while trial<=n:\r\n            total = f(total)\r\n            trial = trial+1\r\n        return total\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-total))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated_function, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":45,"date":"2016-02-08 11:53:33.576555","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return f\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-08T11:53:33.576555","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    elif n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":220,"date":"2016-02-09 21:16:26.147278","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return x\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"36","SubmissionTime":"2016-02-09T21:16:26.147278","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-10 13:34:30.667556","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = 1\r\n    g = f\r\n    while x<=n:\r\n        g = compose1(f, g)\r\n        x = x+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-10T13:34:30.667556","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = 1\r\n    g = identity\r\n    while x<=n:\r\n        g = compose1(f, g)\r\n        x = x+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":644,"date":"2016-02-11 16:15:00.030480","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat_value(x):\r\n        a = 1\r\n        k = f(x)\r\n        while a<=n:\r\n            a = a+1\r\n            k = f(k)\r\n        return k\r\n    return repeat_value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T16:15:00.03048","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat_value(x):\r\n        a = 1\r\n        k = identity(x)\r\n        while a<=n:\r\n            a = a+1\r\n            k = f(k)\r\n        return k\r\n    return repeat_value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 11:18:53.724227","diff":null,"before":"\r\ndef repeated(f, n):\r\n    counter = 0\r\n    def repeat_help(x):\r\n        while counter<n:\r\n            x = f(x)\r\n            counter += 1\r\n        return x\r\n    return repeat_help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T11:18:53.724227","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat_help(x):\r\n        counter = 0\r\n        while counter<n:\r\n            x = f(x)\r\n            counter += 1\r\n        return x\r\n    return repeat_help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-repeat_help, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-repeat_help, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeat_help, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeat_help","    while counter < n:","UnboundLocalError: local variable 'counter' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-12 23:20:34.502778","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = n-1\r\n    b = lambda x: f(x)\r\n    while a>=1:\r\n        b = compose1(f, b)\r\n        a -= 1\r\n    return b\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-12T23:20:34.502778","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = n-1\r\n    b = lambda x: f(x)\r\n    while a>=1:\r\n        b = compose1(f, b)\r\n        a -= 1\r\n    return b\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 21:45:10.702853","diff":null,"before":"\r\ndef repeated(f, n):\r\n    final = f\r\n    while n>1:\r\n        g = final\r\n        final = compose1(f, g)\r\n        n -= 1\r\n    return final\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T21:45:10.702853","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    final = f\r\n    while n>1:\r\n        g = final\r\n        final = compose1(f, g)\r\n        n -= 1\r\n    return final\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":48,"date":"2016-02-10 17:12:48.903956","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g, n):\r\n        def h(x):\r\n            return f(g(x))\r\n        if n==2:\r\n            return h\r\n        else:\r\n            return compose1(f, h, n-1)\r\n    return compose1(f, f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T17:12:48.903956","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g, n):\r\n        def h(x):\r\n            return f(g(x))\r\n        if n==2:\r\n            return h\r\n        else:\r\n            return compose1(f, h, n-1)\r\n    return compose1(f, f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose1","    return compose1(f, h, n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in compose1","    if n==2:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":606,"date":"2016-02-16 17:36:24.110531","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func, k = f, 1\r\n    while k<n:\r\n        func, k = compose1(f, func), k+1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T17:36:24.110531","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    func, k = f, 1\r\n    while k<n:\r\n        func, k = compose1(f, func), k+1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":536,"date":"2016-02-08 22:09:07.769093","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func_app(n):\r\n        if n==0:\r\n            return x\r\n        h = compose1(f, f)\r\n        while n>=3:\r\n            h = compose1(h, f)\r\n            n -= 1\r\n        return h\r\n    return func_app(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"10","SubmissionTime":"2016-02-08T22:09:07.769093","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func_app(n):\r\n        if n==0:\r\n            return identity\r\n        h = compose1(f, f)\r\n        while n>=3:\r\n            h = compose1(h, f)\r\n            n -= 1\r\n        return h\r\n    return func_app(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in repeated","    return func_app(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in func_app","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":13,"date":"2016-02-09 07:25:58.721471","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for i in range(1, n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-09T07:25:58.721471","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    for i in range(1, n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":912,"date":"2016-02-15 20:06:04.432679","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def wrapper(arg):\r\n        if n==1:\r\n            return f(arg)\r\n        else:\r\n            return f(repeated(f, n-1)(arg))\r\n    return wrapper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-15T20:06:04.432679","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def wrapper(arg):\r\n        if n==1:\r\n            return f(arg)\r\n        else:\r\n            return f(repeated(f, n-1)(arg))\r\n    return wrapper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in wrapper","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":450,"date":"2016-02-13 21:39:56.186317","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        def t(n, x):\r\n            if n==0:\r\n                return f(x)\r\n            return t(n-1, f(x))\r\n        return t(n, x)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T21:39:56.186317","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        def t(n, x):\r\n            if n==0:\r\n                return identity(x)\r\n            return t(n-1, f(x))\r\n        return t(n, x)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":756,"date":"2016-02-16 19:56:26.302352","diff":null,"before":"\r\ndef repeated(f, n):\r\n    ans = f\r\n    count = 1\r\n    while count<n:\r\n        ans = compose1(f, ans)\r\n        count += 1\r\n    return ans\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T19:56:26.302352","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    ans = f\r\n    count = 1\r\n    while count<n:\r\n        ans = compose1(f, ans)\r\n        count += 1\r\n    return ans\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 09:40:05.199925","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        count = 1\r\n        inner = f\r\n        while count<n:\r\n            shell = compose1(f, inner)\r\n            inner = shell\r\n            count += 1\r\n        return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T09:40:05.199925","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        count = 1\r\n        inner = f\r\n        while count<n:\r\n            shell = compose1(f, inner)\r\n            inner = shell\r\n            count += 1\r\n        return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":169,"date":"2016-02-16 15:47:05.416546","diff":null,"before":"\r\ndef repeated(f, n):\r\n    total = 0\r\n    def helper(x):\r\n        k = n\r\n        if k==0:\r\n            return x\r\n        else:\r\n            while k!=0:\r\n                total = compose1(f, x)\r\n                x = total\r\n                k -= 1\r\n            return total\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-16T15:47:05.416546","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    total = 0\r\n    def helper(x):\r\n        k = n\r\n        if k==0:\r\n            return x\r\n        else:\r\n            while k!=0:\r\n                total = f(x)\r\n                x = total\r\n                k -= 1\r\n            return total\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x00000273F8483EA0>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x00000273F8483EA0>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":955,"date":"2016-02-10 12:13:22.567579","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        k = 1\r\n        while k<n:\r\n            g = compose(f, g)\r\n            k += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T12:13:22.567579","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        k = 1\r\n        while k<n:\r\n            g = compose1(f, g)\r\n            k += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    g = compose(f,g)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 19:30:10.105033","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"63","SubmissionTime":"2016-02-15T19:30:10.105033","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":789,"date":"2016-02-16 16:16:22.776039","diff":null,"before":"\r\ndef repeated(f, n):\r\n    iterative = 0\r\n    def h(x):\r\n        while iterative<n:\r\n            x = f(x)\r\n            iterative = iterative+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T16:16:22.776039","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        iterative = 0\r\n        while iterative<n:\r\n            x = f(x)\r\n            iterative = iterative+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-iterative), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 49, in h","    while iterative < n:","UnboundLocalError: local variable 'iterative' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":110,"date":"2016-02-16 16:10:50.852304","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-16T16:10:50.852304","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":572,"date":"2016-02-08 18:10:08.686224","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(h, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-08T18:10:08.686224","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(h, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":447,"date":"2016-02-09 19:38:14.308253","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def change_value(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            while n>0:\r\n                x = f(x)\r\n                n -= 1\r\n        return x\r\n    return change_value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T19:38:14.308253","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def change_value(x):\r\n        h = n\r\n        if h==0:\r\n            return x\r\n        else:\r\n            while h>0:\r\n                x = f(x)\r\n                h -= 1\r\n        return x\r\n    return change_value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-change_value, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in change_value","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":884,"date":"2016-02-11 21:48:16.745624","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-11T21:48:16.745624","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":821,"date":"2016-02-09 09:25:42.010873","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def fn(x):\r\n        while n>0:\r\n            x = f(x)\r\n            n -= 1\r\n        return x\r\n    return fn\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T09:25:42.010873","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def fn(x):\r\n        k = n\r\n        while k>0:\r\n            x = f(x)\r\n            k -= 1\r\n        return x\r\n    return fn\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-fn, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in fn","    while n > 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":146,"date":"2016-02-16 12:45:21.071898","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T12:45:21.071898","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":376,"date":"2016-02-08 17:56:24.104151","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return f(n)\r\n    else:\r\n        i = 2\r\n        func = compose1(f, f)\r\n        while i<n:\r\n            func = compose1(f, func)\r\n            i += 1\r\n        return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-08T17:56:24.104151","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f(n)\r\n    else:\r\n        i = 2\r\n        func = compose1(f, f)\r\n        while i<n:\r\n            func = compose1(f, func)\r\n            i += 1\r\n        return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":431,"date":"2016-02-12 12:26:31.453972","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return lambda x: compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-12T12:26:31.453972","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return lambda x: compose1(f, repeated(f, n-1))(x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000001BFEADF7E18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000001BFEADF7E18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":53,"date":"2016-02-15 23:09:22.576107","diff":null,"before":"\r\ndef repeated(f, n):\r\n    count = 0\r\n    g = f\r\n    while count<n:\r\n        g = compose1(f, g)\r\n        count = count+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T23:09:22.576107","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = 0\r\n    g = identity\r\n    while count<n:\r\n        g = compose1(f, g)\r\n        count = count+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":194,"date":"2016-02-10 20:53:31.498998","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T20:53:31.498998","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":618,"date":"2016-02-16 13:51:35.146209","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def fun(a):\r\n        x = a\r\n        for i in range(0, a):\r\n            x = f(x)\r\n        return x\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T13:51:35.146209","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def fun(a):\r\n        x = a\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 19:54:01.827197","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def call(f, n, x):\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return call\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T19:54:01.827197","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def call(x):\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return call\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-call, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-call, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-call, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(LeafWildcard(\"ParameterNode\")), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-call, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: call() missing 2 required positional arguments: 'n' and 'x'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":587,"date":"2016-02-11 20:30:05.235925","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    elif n==0:\r\n        return x\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-11T20:30:05.235925","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":592,"date":"2016-02-15 19:16:34.554649","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def rep_help(t, k):\r\n        if k==n:\r\n            return t\r\n        t = compose1(f, t)\r\n        k += 1\r\n        return rep_help(t, k)\r\n    return rep_help(f, 0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-15T19:16:34.554649","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def rep_help(t, k):\r\n        if k==n:\r\n            return t\r\n        t = compose1(f, t)\r\n        k += 1\r\n        return rep_help(t, k)\r\n    return rep_help(identity, 0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1002,"date":"2016-02-12 10:33:26.732639","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(s, t):\r\n        def h(x):\r\n            return s(t(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-12T10:33:26.732639","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(s, t):\r\n        def h(x):\r\n            return s(t(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return repeated(compose(f, f), n-1)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":610,"date":"2016-02-15 22:47:18.566244","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T22:47:18.566244","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return f(repeated(f,n-1))                        #doesn't work","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return f(repeated(f,n-1))                        #doesn't work","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 18:22:29.238577","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T18:22:29.238577","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-15 11:39:26.261822","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def currying(x):\r\n        i = 1\r\n        while i!=n:\r\n            print(f(x))\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return currying\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T11:39:26.261822","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def currying(x):\r\n        i = 0\r\n        while i!=n:\r\n            print(f(x))\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return currying\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","7","7","","# Error: expected","#     8","# but got","#     6","#     7","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":292,"date":"2016-02-15 19:14:28.574304","diff":null,"before":"\r\ndef repeated(f, n):\r\n    while n>=0:\r\n        if n==0:\r\n            return lambda x: f(x)\r\n        else:\r\n            return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T19:14:28.574304","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    while n>=0:\r\n        if n==0:\r\n            return compose1(identity, identity)\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated (f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated (f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated (f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":568,"date":"2016-02-14 22:37:25.829232","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        counter = 0\r\n        while counter!=n:\r\n            x, i = f(x), counter+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-14T22:37:25.829232","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        counter = 0\r\n        while counter!=n:\r\n            x, counter = f(x), counter+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":681,"date":"2016-02-15 22:08:28.307480","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-15T22:08:28.30748","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":498,"date":"2016-02-09 21:14:39.963402","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return 0\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-09T21:14:39.963402","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-15 20:44:12.939546","diff":null,"before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        funciton = compose1(funciton, f)\r\n        n = n-1\r\n    return funciton\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T20:44:12.939546","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = f\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        a = compose1(a, f)\r\n        n = n-1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    funciton = compose1(funciton, f)","UnboundLocalError: local variable 'funciton' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":195,"date":"2016-02-16 20:09:56.412423","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helpie(x):\r\n        value = x\r\n        i = 1\r\n        while i<=n:\r\n            value = f(value)\r\n        return value\r\n    return helpie\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T20:09:56.412423","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helpie(x):\r\n        value = x\r\n        i = 1\r\n        while i<=n:\r\n            value = f(value)\r\n            i += 1\r\n        return value\r\n    return helpie\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 11:31:36.834088","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def value(x):\r\n        i = 0\r\n        while i<n:\r\n            x = compose1(f, x)\r\n            i = i+1\r\n        return x\r\n    return value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"44","SubmissionTime":"2016-02-13T11:31:36.834088","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def value(x):\r\n        i = 0\r\n        while i<n:\r\n            x = f(x)\r\n            i = i+1\r\n        return x\r\n    return value\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x00000200C9287EA0>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x00000200C9287EA0>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":532,"date":"2016-02-16 19:35:30.207318","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T19:35:30.207318","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":15,"date":"2016-02-16 12:20:09.025644","diff":null,"before":"\r\ndef repeated(f, n):\r\n    compose1 = lambda f, g: lambda x: f(g(x))\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return repeated(compose1(f, f), n-1)","after":null,"remaining":"2","SubmissionTime":"2016-02-16T12:20:09.025644","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    compose1 = lambda f, g: lambda x: f(g(x))\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(repeated(f, n-1), f)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":21,"date":"2016-02-09 15:31:42.335652","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def inner_repeated(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return inner_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-09T15:31:42.335652","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner_repeated(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return inner_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in inner_repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":228,"date":"2016-02-14 14:09:50.692021","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    for x in range(1, n):\r\n        a = compose1(f, a)\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T14:09:50.692021","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    for x in range(1, n):\r\n        a = compose1(f, a)\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:24:05.777537","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"13","SubmissionTime":"2016-02-09T17:24:05.777537","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":599,"date":"2016-02-15 00:49:45.357062","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T00:49:45.357062","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":333,"date":"2016-02-09 18:58:30.996918","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-09T18:58:30.996918","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     ","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":718,"date":"2016-02-10 21:21:32.271501","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    while n>0:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-10T21:21:32.271501","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = identity\r\n    while n>0:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-16 17:24:25.573957","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    while n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T17:24:25.573957","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    while n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-14 16:42:59.188359","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-14T16:42:59.188359","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    a = f\r\n    while n>1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":507,"date":"2016-02-10 21:19:39.466698","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    def inner(x):\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T21:19:39.466698","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-inner, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-inner, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-inner, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in inner","    while i <= n:","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":598,"date":"2016-02-16 15:46:40.000597","diff":null,"before":"\r\ndef repeated(f, n):\r\n    result = f\r\n    while n>0:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T15:46:40.000597","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result = identity\r\n    while n>0:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":293,"date":"2016-02-11 19:49:50.391175","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-11T19:49:50.391175","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":880,"date":"2016-02-12 22:05:35.918633","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-12T22:05:35.918633","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":701,"date":"2016-02-16 09:47:16.168873","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T09:47:16.168873","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":208,"date":"2016-02-13 21:58:01.940417","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def number(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return number\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T21:58:01.940417","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def number(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return number\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in number","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 20:12:38.927023","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        n -= 1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"26","SubmissionTime":"2016-02-15T20:12:38.927023","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        n -= 1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 00:52:21.080035","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def rep(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return repeated(compose(f, f), n-1)\r\n    return rep\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T00:52:21.080035","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def rep(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return rep\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in rep","    return repeated(compose(f, f), n - 1)","NameError: name 'compose' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":469,"date":"2016-02-11 19:49:43.145061","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T19:49:43.145061","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 15:12:49.029442","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        compose1(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-11T15:12:49.029442","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    compose1(repeated(f, n-1))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":36,"date":"2016-02-16 00:17:53.933737","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i, g = 1, f\r\n    while i<n:\r\n        g = compose1(f, g)\r\n        i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"21","SubmissionTime":"2016-02-16T00:17:53.933737","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i, g = 1, f\r\n    while i<n:\r\n        g = compose1(f, g)\r\n        i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-11 12:48:46.760733","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1))\r\n    return h","after":null,"remaining":"27","SubmissionTime":"2016-02-11T12:48:46.760733","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1)(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in h","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":355,"date":"2016-02-12 11:58:11.078254","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        return compose1(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-12T11:58:11.078254","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i, compose = 0, identity\r\n    while i<n:\r\n        compose = compose1(compose, f)\r\n        i += 1\r\n    return compose\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-compose)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(NameExpressionNode-identity)))))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-compose), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-compose), SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-compose))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-14 21:34:09.723009","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    function = f\r\n    while i<n:\r\n        function = compose1(f, function)\r\n        i += 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T21:34:09.723009","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    function = identity\r\n    while i<n:\r\n        function = compose1(f, function)\r\n        i += 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":73,"date":"2016-02-16 22:43:09.948335","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def help(h):\r\n        index = 0\r\n        while i<n:\r\n            h = f(h)\r\n            i += 1\r\n        return h\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T22:43:09.948335","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def help(h):\r\n        index = 0\r\n        while index<n:\r\n            h = f(h)\r\n            index += 1\r\n        return h\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-index)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-index)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in help","    while i < n:","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 15:47:30.756366","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-09T15:47:30.756366","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":563,"date":"2016-02-16 22:17:06.451296","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def h(x):\r\n        return x\r\n    while n>1:\r\n        h = compose(f, h)\r\n        n -= 1\r\n    if n==1:\r\n        return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T22:17:06.451296","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def h(x):\r\n        return x\r\n    while n>0:\r\n        h = compose(f, h)\r\n        n -= 1\r\n    else:\r\n        return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK))))), 4), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-compose, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:58:35.579988","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-15T09:58:35.579988","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":474,"date":"2016-02-11 15:30:05.199993","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T15:30:05.199993","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":487,"date":"2016-02-11 09:09:14.708890","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeatedHelp(count):\r\n        if count==n+1:\r\n            return f\r\n        else:\r\n            return compose1(f, repeatedHelp(count+1))\r\n    return repeatedHelp(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-11T09:09:14.70889","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeatedHelp(count):\r\n        if count==n+1:\r\n            return identity\r\n        else:\r\n            return compose1(f, repeatedHelp(count+1))\r\n    return repeatedHelp(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":499,"date":"2016-02-15 20:29:00.791595","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T20:29:00.791595","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":151,"date":"2016-02-16 11:02:11.426882","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        if n==0:\r\n            return identity(x)\r\n        else:\r\n            return compose1(f, repeated(f, n-1)(x))\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T11:02:11.426882","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        if n==0:\r\n            return identity(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000016CF2707D90>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000016CF2707D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":7,"date":"2016-02-11 07:24:41.817707","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        return f(x)\r\n    if n==0:\r\n        return x\r\n    elif n==1:\r\n        return h\r\n    else:\r\n        return h(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"43","SubmissionTime":"2016-02-11T07:24:41.817707","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        return f(x)\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    elif n==1:\r\n        return h\r\n    else:\r\n        return compose1(h, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return h(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return h(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    return f(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-10 23:34:25.775362","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-10T23:34:25.775362","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":755,"date":"2016-02-13 15:51:09.803174","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T15:51:09.803174","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":168,"date":"2016-02-08 23:23:12.154727","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    def compose(g, n = n):\r\n        t = f(g)\r\n        while n>1:\r\n            t = f(t)\r\n            n = n-1\r\n        return t\r\n    return compose\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-08T23:23:12.154727","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose(g, n = n):\r\n        t = f(g)\r\n        while n>1:\r\n            t = f(t)\r\n            n = n-1\r\n        return t\r\n    return compose\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":246,"date":"2016-02-11 18:10:15.304443","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f(0)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"24","SubmissionTime":"2016-02-11T18:10:15.304443","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return f(0)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":980,"date":"2016-02-10 21:12:20.325177","diff":null,"before":"\r\ndef repeated(f, n):\r\n    h = lambda x: f(x)\r\n    if n==0:\r\n        return h\r\n    else:\r\n        counter = 1\r\n        while counter<=n:\r\n            h = compose1(f, h)\r\n            counter += 1\r\n        return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"18","SubmissionTime":"2016-02-10T21:12:20.325177","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    h = lambda x: identity(x)\r\n    if n==0:\r\n        return h\r\n    else:\r\n        counter = 1\r\n        while counter<=n:\r\n            h = compose1(f, h)\r\n            counter += 1\r\n        return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":18,"date":"2016-02-10 07:10:40.825248","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T07:10:40.825248","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 00:05:52.676654","diff":null,"before":"\r\ndef repeated(f, n):\r\n    newfunc = f\r\n    while n>0:\r\n        n -= 1\r\n        newfunc = compose1(f, newfunc)\r\n    return newfunc\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T00:05:52.676654","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    newfunc = identity\r\n    while n>0:\r\n        n -= 1\r\n        newfunc = compose1(f, newfunc)\r\n    return newfunc\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1007,"date":"2016-02-13 22:50:11.100974","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper_func(h):\r\n        k = 0\r\n        while k<n:\r\n            x, k = f(x), k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-13T22:50:11.100974","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper_func(x):\r\n        k = 0\r\n        while k<n:\r\n            x, k = f(x), k+1\r\n        return x\r\n    return helper_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper_func, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-helper_func)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return h","NameError: name 'h' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":619,"date":"2016-02-14 15:18:40.078640","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T15:18:40.07864","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":247,"date":"2016-02-14 13:17:54.725764","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = n\r\n    while n>0:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T13:17:54.725764","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":843,"date":"2016-02-12 16:25:30.409068","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"17","SubmissionTime":"2016-02-12T16:25:30.409068","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":689,"date":"2016-02-08 17:03:24.507847","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-08T17:03:24.507847","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":902,"date":"2016-02-14 21:08:00.057751","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-14T21:08:00.057751","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":987,"date":"2016-02-14 11:52:45.656991","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f(n)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-14T11:52:45.656991","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":486,"date":"2016-02-08 21:55:38.978821","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"21","SubmissionTime":"2016-02-08T21:55:38.978821","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":443,"date":"2016-02-08 22:11:57.735683","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        result = x\r\n        count = n\r\n        while count>0:\r\n            result = compose1(f, f)(x)\r\n            count -= 1\r\n        return result\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T22:11:57.735683","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        result = x\r\n        count = n\r\n        while count>0:\r\n            result = f(result)\r\n            count -= 1\r\n        return result\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-result)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":219,"date":"2016-02-10 19:24:58.741939","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def many_composes(n):\r\n        if n==1:\r\n            return f\r\n        if n==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, many_composes(n-1))\r\n    return many_composes(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"17","SubmissionTime":"2016-02-10T19:24:58.741939","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def many_composes(n):\r\n        if n==1:\r\n            return f\r\n        if n==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, many_composes(n-1))\r\n    return many_composes(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes","    return compose1(f, many_composes(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes","    return compose1(f, many_composes(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes","    return compose1(f, many_composes(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes","    return compose1(f, many_composes(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes","    return compose1(f, many_composes(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in many_composes","    return compose1(f, many_composes(n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in many_composes","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":680,"date":"2016-02-08 22:48:14.212503","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return f(repeated(f, n-1))\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"19","SubmissionTime":"2016-02-08T22:48:14.212503","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":251,"date":"2016-02-13 13:45:06.728554","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(i)\r\n            i -= 1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T13:45:06.728554","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","2","","# Error: expected","#     8","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":855,"date":"2016-02-11 18:00:18.390086","diff":null,"before":"\r\ndef repeated(f, n):\r\n    base = lambda x: x\r\n    for x in range(n):\r\n        base = compose(f, base)\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T18:00:18.390086","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    base = lambda x: x\r\n    for x in range(n):\r\n        base = compose1(f, base)\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    base = compose(f,base)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":879,"date":"2016-02-16 19:46:08.931669","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def m(x):\r\n        i, k = 0, x\r\n        while i<n:\r\n            k = f(k)\r\n            i += 1\r\n        return answer\r\n    return m\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T19:46:08.931669","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def m(x):\r\n        i, k = 0, x\r\n        while i<n:\r\n            k = f(k)\r\n            i += 1\r\n        return k\r\n    return m\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in m","    return answer","NameError: name 'answer' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":276,"date":"2016-02-14 14:07:13.995297","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        i = 1\r\n        while i<=n:\r\n            if i==1:\r\n                total = f(x)\r\n                i += 1\r\n            else:\r\n                total = f(total)\r\n                i += 1\r\n        return total\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-14T14:07:13.995297","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def func(x):\r\n        i = 1\r\n        while i<=n:\r\n            if i==1:\r\n                total = f(x)\r\n                i += 1\r\n            else:\r\n                total = f(total)\r\n                i += 1\r\n        return total\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in func","    return total","UnboundLocalError: local variable 'total' referenced before assignment","","# Error: expected","#     5","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":704,"date":"2016-02-10 18:48:36.798453","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    def base(i):\r\n        return g(i)\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T18:48:36.798453","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    def base(i):\r\n        return g(i)\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":133,"date":"2016-02-16 17:54:08.444206","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def f_on_repeat(i):\r\n        x = n\r\n        y = f\r\n        if x==0:\r\n            return i\r\n        if x==1:\r\n            return y(i)\r\n        h = y\r\n        while x>1:\r\n            h = compose1(h, f)\r\n            x -= 1\r\n        return h\r\n    return f_on_repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T17:54:08.444206","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def f_on_repeat(i):\r\n        x = n\r\n        y = f\r\n        if x==0:\r\n            return i\r\n        if x==1:\r\n            return y(i)\r\n        h = y\r\n        while x>1:\r\n            h = compose1(h, f)\r\n            x -= 1\r\n        return h(i)\r\n    return f_on_repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000002110C2D3E18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000002110C2D3E18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 18:58:55.489213","diff":null,"before":"\r\ndef repeated(f, n):\r\n    increment = lambda x: x+1\r\n    triple = lambda x: x*3\r\n    square = lambda x: x*x\r\n    w = lambda x: x\r\n    n = 0\r\n    for x in range(n):\r\n        w = compose1(f, w)\r\n        n = n+1\r\n    return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"40","SubmissionTime":"2016-02-12T18:58:55.489213","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    increment = lambda x: x+1\r\n    triple = lambda x: x*3\r\n    square = lambda x: x*x\r\n    w = lambda x: x\r\n    identity = 0\r\n    for x in range(n):\r\n        w = compose1(f, w)\r\n        n = n+1\r\n    return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 20:43:34.390329","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    k = 1\r\n    g = f\r\n    if n==0:\r\n        return f\r\n    else:\r\n        while k<n:\r\n            g, k = compose1(f, g), k+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-16T20:43:34.390329","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    k = 1\r\n    g = f\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while k<n:\r\n            g, k = compose1(f, g), k+1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":10,"date":"2016-02-15 22:44:56.770836","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def combine(x, i = n):\r\n        g = f(x)\r\n        if i==0:\r\n            return g\r\n        else:\r\n            return combine(g, i-1)\r\n    return combine","after":null,"remaining":"4","SubmissionTime":"2016-02-15T22:44:56.770836","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def combine(x, i = n):\r\n        g = f(x)\r\n        if i==0:\r\n            return x\r\n        else:\r\n            return combine(g, i-1)\r\n    return combine","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1045,"date":"2016-02-09 02:30:58.063006","diff":null,"before":"\r\ndef repeated(f, n):\r\n    result = f\r\n    while n>0:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-09T02:30:58.063006","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result = identity\r\n    while n>0:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":363,"date":"2016-02-08 23:46:47.939506","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        if n==0:\r\n            return x\r\n        answer = f(x)\r\n        count = n\r\n        while (count>0):\r\n            answer = f(answer)\r\n            count -= 1\r\n        return answer\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"18","SubmissionTime":"2016-02-08T23:46:47.939506","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        if n==0:\r\n            return x\r\n        answer = identity(x)\r\n        count = n\r\n        while (count>0):\r\n            answer = f(answer)\r\n            count -= 1\r\n        return answer\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":107,"date":"2016-02-14 22:35:11.156822","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 2\r\n    g = f\r\n    while i<n:\r\n        f = compose1(f, g)\r\n        i = i+1\r\n    return compose1(f, g)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T22:35:11.156822","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 2\r\n    g = f\r\n    while i<n:\r\n        f = compose1(f, g)\r\n        i = i+1\r\n    return compose1(f, g)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","625","","# Error: expected","#     5","# but got","#     625","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":537,"date":"2016-02-16 12:24:35.116898","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f(args)\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<n:\r\n            g = compose1(f, g)\r\n            i += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T12:24:35.116898","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f(args)\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<n:\r\n            g = compose1(f, g)\r\n            i += 1\r\n        return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-11 00:11:30.460436","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func_layer = f\r\n    i = 0\r\n    if n>1:\r\n        while i<n:\r\n            func_layer = compose1(f, func_layer)\r\n            i += 1\r\n        return func_layer\r\n    else:\r\n        return func_layer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-11T00:11:30.460436","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    func_layer = identity\r\n    i = 0\r\n    if n>1:\r\n        while i<n:\r\n            func_layer = compose1(f, func_layer)\r\n            i += 1\r\n        return func_layer\r\n    else:\r\n        return func_layer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 19:04:08.572581","diff":null,"before":"\r\ndef repeated(f, n):\r\n    repeat = compose1(f, f)\r\n    counter = 2\r\n    def incorporates_repeat(repeat, counter, n):\r\n        if n==0:\r\n            return 1\r\n        if n==1:\r\n            return f(x)\r\n        if counter<n:\r\n            repeat = compose1(repeat, f)\r\n            counter += 1\r\n            return incorporates_repeat(repeat, counter, n)\r\n        return repeat\r\n    return incorporates_repeat(repeat, counter, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T19:04:08.572581","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    repeat = compose1(f, f)\r\n    counter = 2\r\n    def incorporates_repeat(repeat, counter, n):\r\n        if n==0:\r\n            return identity\r\n        if n==1:\r\n            return f(x)\r\n        if counter<n:\r\n            repeat = compose1(repeat, f)\r\n            counter += 1\r\n            return incorporates_repeat(repeat, counter, n)\r\n        return repeat\r\n    return incorporates_repeat(repeat, counter, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":67,"date":"2016-02-13 13:52:17.926014","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T13:52:17.926014","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return f(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":490,"date":"2016-02-14 16:00:40.611553","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T16:00:40.611553","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":581,"date":"2016-02-09 17:16:09.059510","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return compose1(identity, lambda x: x)\r\n    else:\r\n        return repeated(compose1(f, f), n-1)","after":null,"remaining":"48","SubmissionTime":"2016-02-09T17:16:09.05951","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return compose1(identity, lambda x: x)\r\n    else:\r\n        return compose1(repeated(f, n-1), f)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-14 21:51:34.792642","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def apply(x):\r\n        part = f\r\n        copy_n = n\r\n        while copy_n>0:\r\n            part = compose1(part, f)\r\n            copy_n = copy_n-1\r\n        return part(x)\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T21:51:34.792642","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def apply(x):\r\n        part = identity\r\n        copy_n = n\r\n        while copy_n>0:\r\n            part = compose1(part, f)\r\n            copy_n = copy_n-1\r\n        return part(x)\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":331,"date":"2016-02-16 12:51:16.806193","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def doer(x):\r\n        def composer(x, k):\r\n            if k==n:\r\n                return f(x)\r\n            else:\r\n                return composer(f(x), k+1)\r\n        return composer(x, 0)\r\n    return doer","after":null,"remaining":"4","SubmissionTime":"2016-02-16T12:51:16.806193","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def doer(x):\r\n        def composer(x, k):\r\n            if k==n:\r\n                return identity(x)\r\n            else:\r\n                return composer(f(x), k+1)\r\n        return composer(x, 0)\r\n    return doer","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":549,"date":"2016-02-16 12:07:23.089484","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T12:07:23.089484","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":857,"date":"2016-02-16 15:12:25.797427","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T15:12:25.797427","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":275,"date":"2016-02-10 00:37:36.612922","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose_functions(x):\r\n        if x==n:\r\n            return f\r\n        else:\r\n            return compose1(f, g(x+1))\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose_functions(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T00:37:36.612922","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose_functions(x):\r\n        if x==n:\r\n            return f\r\n        else:\r\n            return compose1(f, compose_functions(x+1))\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose_functions(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose_functions)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    return compose_functions(1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in compose_functions","    return compose1(f,g(x+1))","NameError: name 'g' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-12 16:04:56.857243","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return repeated(compose1(f, n), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"21","SubmissionTime":"2016-02-12T16:04:56.857243","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":389,"date":"2016-02-14 14:06:47.802628","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper_repeated(value):\r\n        i = n\r\n        k = f\r\n        if i==0:\r\n            return value\r\n        while i:\r\n            k = compose1(f, k)\r\n            i -= 1\r\n        return k(value)\r\n    return helper_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T14:06:47.802628","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper_repeated(value):\r\n        i = n\r\n        k = identity\r\n        if i==0:\r\n            return value\r\n        while i:\r\n            k = compose1(f, k)\r\n            i -= 1\r\n        return k(value)\r\n    return helper_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":727,"date":"2016-02-08 23:18:07.941305","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat_helper(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return repeat_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-08T23:18:07.941305","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat_helper(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return repeat_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeat_helper","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":928,"date":"2016-02-14 14:29:33.031525","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def function(x):\r\n        number = n\r\n        total = f\r\n        while (number>1):\r\n            total = compose1(f, total)\r\n            number -= 1\r\n        return total(x)\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T14:29:33.031525","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def function(x):\r\n        number = n\r\n        total = f\r\n        while (number>1):\r\n            total = compose1(f, total)\r\n            number -= 1\r\n        return total(x)\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 20:26:00.131476","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    def carrier(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, carrier(x-1))\r\n    return carrier(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T20:26:00.131476","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def carrier(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, carrier(x-1))\r\n    return carrier(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":620,"date":"2016-02-08 14:01:57.978088","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def partial_rep(k, val):\r\n        if k==n:\r\n            return val\r\n        else:\r\n            return partial_rep(k+1, f(val))\r\n    return lambda x: partial_rep(1, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T14:01:57.978088","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def partial_rep(k, val):\r\n        if k==n:\r\n            return val\r\n        else:\r\n            return partial_rep(k+1, f(val))\r\n    return lambda x: partial_rep(0, x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":396,"date":"2016-02-16 10:15:25.621640","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T10:15:25.62164","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":426,"date":"2016-02-11 16:23:43.501914","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-11T16:23:43.501914","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1043,"date":"2016-02-17 22:09:41.166387","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return identity\r\n    g = f\r\n    i = 0\r\n    while (i<n):\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-17T22:09:41.166387","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return identity\r\n    g = f\r\n    i = 1\r\n    while (i<n):\r\n        f = compose1(f, g)\r\n        i += 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":918,"date":"2016-02-13 23:20:49.100092","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        return pow(f(x), pow(2, n-1))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-13T23:20:49.100092","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = 0\r\n        while k<n:\r\n            x, k = f(x), k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(AssignmentStatementNode, Children(ConstNode(TupleExpressionNode-False, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(NameExpressionNode-k)))), SingleChild(ConstNode(TupleExpressionNode-False, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), SingleChild(ConstNode(BinaryExpressionNode-Add, Children(LeafConstNode(NameExpressionNode-k), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK)))))))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast)))))))))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","1296","","# Error: expected","#     8","# but got","#     1296","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1012,"date":"2016-02-08 11:19:00.907760","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = n\r\n    def last_num(x):\r\n        if i==0:\r\n            return x\r\n        else:\r\n            i -= 1\r\n            return last_num(f(x))\r\n    return last_num\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-08T11:19:00.90776","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = n\r\n    def last_num(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return repeated(f, n-1)(f(x))\r\n    return last_num\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in last_num","    if i== 0:","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":109,"date":"2016-02-11 17:34:25.653654","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-11T17:34:25.653654","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>0:\r\n        return compose1(repeated(f, n-1), f)\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-13 11:33:45.656811","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    func = f\r\n    if i==n:\r\n        return identity(n)\r\n    else:\r\n        return compose1(repeated(func, n-1), func)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-13T11:33:45.656811","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    func = f\r\n    if i==n:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(repeated(func, n-1), func)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":565,"date":"2016-02-13 21:02:03.347749","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==1:\r\n            return f(x)\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T21:02:03.347749","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def h(x):\r\n        if n==1:\r\n            return f(x)\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":456,"date":"2016-02-15 17:49:59.121848","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def apply_f(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return apply_f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-15T17:49:59.121848","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def apply_f(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return apply_f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in apply_f","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":739,"date":"2016-02-16 00:17:19.953222","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def rf(x, j = n, k = 0):\r\n        if j==0:\r\n            if k>0:\r\n                return k\r\n            else:\r\n                return x\r\n        else:\r\n            return rf(k, j-1, f(x))\r\n    return rf\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T00:17:19.953222","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def rf(x, j = n, k = 0):\r\n        if j==0:\r\n            if k>0:\r\n                return k\r\n            else:\r\n                return x\r\n        else:\r\n            if k>0:\r\n                return rf(x, j-1, f(k))\r\n            else:\r\n                return rf(k, j-1, f(x))\r\n    return rf\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-rf), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-j), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-k)))))))))))))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-16 12:16:44.052596","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    i = 1\r\n    while i<n:\r\n        i += 1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-16T12:16:44.052596","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    i = 1\r\n    while i<n:\r\n        i += 1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-15 01:40:27.307140","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T01:40:27.30714","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-15 21:20:50.807821","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def input(x):\r\n        k = n\r\n        if k==0:\r\n            return x\r\n        while k>0:\r\n            x = compose1(f, f)(x)\r\n            k = k-1\r\n        return x\r\n    return input\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"19","SubmissionTime":"2016-02-15T21:20:50.807821","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def input(x):\r\n        k = n\r\n        if k==0:\r\n            return x\r\n        while k>0:\r\n            x = compose1(identity, f)(x)\r\n            k = k-1\r\n        return x\r\n    return input\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","11","","# Error: expected","#     8","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":795,"date":"2016-02-10 22:38:15.877927","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T22:38:15.877927","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":649,"date":"2016-02-11 18:51:13.219972","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    a = f\r\n    while n>0:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-11T18:51:13.219972","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    a = identity\r\n    while n>0:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-09 11:14:52.135067","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat(y):\r\n        return f\r\n    if n==0:\r\n        return identity\r\n    while n>0:\r\n        return repeated(f, n-1)\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"55","SubmissionTime":"2016-02-09T11:14:52.135067","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat(y):\r\n        return f\r\n    if n==0:\r\n        return identity\r\n    while n>0:\r\n        return compose1(f, repeated(f, n-1))\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1052,"date":"2016-02-08 20:44:41.108666","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T20:44:41.108666","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)(n)#   repeated(f(n),n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":988,"date":"2016-02-16 19:02:26.006813","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"23","SubmissionTime":"2016-02-16T19:02:26.006813","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return compose1(identity, identity)\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\n    return helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":433,"date":"2016-02-14 23:21:02.282675","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"20","SubmissionTime":"2016-02-14T23:21:02.282675","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 17:57:24.714899","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: f(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-11T17:57:24.714899","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: identity(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 15:34:46.235215","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    elif n==1:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-11T15:34:46.235215","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==0:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":44,"date":"2016-02-15 20:13:35.675633","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f(lambda x: x)\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T20:13:35.675633","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return f(lambda x: x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":327,"date":"2016-02-12 14:21:55.764997","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<=n:\r\n            f = compose1(f, g)\r\n            i = i+1\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T14:21:55.764997","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        i = 1\r\n        g = f\r\n        while i<n:\r\n            f = compose1(f, g)\r\n            i = i+1\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"CallExpressionNode\")))), TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 02:15:41.117605","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(y):\r\n        n = z\r\n        while n>0:\r\n            y = f(y)\r\n            z -= 1\r\n        return y\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T02:15:41.117605","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(y):\r\n        j = n\r\n        while j>0:\r\n            y = f(y)\r\n            j -= 1\r\n        return y\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in helper","    n = z","UnboundLocalError: local variable 'z' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":728,"date":"2016-02-10 14:43:17.262323","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T14:43:17.262323","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-12 18:32:21.874850","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-12T18:32:21.87485","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":876,"date":"2016-02-16 12:44:29.122681","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    return lambda x: f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"10","SubmissionTime":"2016-02-16T12:44:29.122681","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1068,"date":"2016-02-13 12:13:22.481733","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def hannah(x):\r\n        result = f(x)\r\n        for i in range(n-1):\r\n            result = f(result)\r\n        return result\r\n    return hannah","after":null,"remaining":"5","SubmissionTime":"2016-02-13T12:13:22.481733","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def hannah(x):\r\n        result = f(x)\r\n        for i in range(n-1):\r\n            result = f(result)\r\n        return result\r\n    return hannah","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":759,"date":"2016-02-15 20:18:22.527282","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(x, n):\r\n        while n>0:\r\n            x = f(x)\r\n            n -= 1\r\n        return x\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T20:18:22.527282","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        counter = n\r\n        while counter>0:\r\n            x = f(x)\r\n            counter -= 1\r\n        return x\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: func() missing 1 required positional argument: 'n'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":462,"date":"2016-02-11 09:38:22.673692","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T09:38:22.673692","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":577,"date":"2016-02-14 21:52:25.116580","diff":null,"before":"\r\ndef repeated(f, n):\r\n    w = f\r\n    while n>1:\r\n        w = compose1(f, w)\r\n        n -= 1\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-14T21:52:25.11658","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    w = f\r\n    while n>1:\r\n        w = compose1(f, w)\r\n        n -= 1\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return w\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":352,"date":"2016-02-10 12:42:28.062500","diff":null,"before":"\r\ndef repeated(f, n):\r\n    composition = f\r\n    if n==0:\r\n        return 0\r\n    while n>1:\r\n        composition = compose1(f, composition)\r\n        n -= 1\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-10T12:42:28.0625","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    composition = f\r\n    if n==0:\r\n        return identity\r\n    while n>1:\r\n        composition = compose1(f, composition)\r\n        n -= 1\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":708,"date":"2016-02-10 17:32:11.248730","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = f\r\n    while n>1:\r\n        k = compose1(f, k)\r\n        n -= 1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"64","SubmissionTime":"2016-02-10T17:32:11.24873","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = f\r\n    while n>1:\r\n        k = compose1(f, k)\r\n        n -= 1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1057,"date":"2016-02-16 20:44:06.337752","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func = compose1(f, repeated(f, n-1))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T20:44:06.337752","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    func = compose1(f, repeated(f, n-1))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    func = compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    func = compose1(f, repeated(f, n-1))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":967,"date":"2016-02-11 20:43:33.618311","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    g = f\r\n    while k<=n-1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T20:43:33.618311","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = 1\r\n    g = f\r\n    while k<=n-1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":677,"date":"2016-02-11 14:41:43.286737","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-11T14:41:43.286737","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in func","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":935,"date":"2016-02-16 20:22:38.388987","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose2(f, n):\r\n        def h(x):\r\n            k = 1\r\n            total = f(x)\r\n            while k<n:\r\n                total = f(total)\r\n                k += 1\r\n            return total\r\n        return h\r\n    return compose2(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"17","SubmissionTime":"2016-02-16T20:22:38.388987","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose2(f, n):\r\n        def h(x):\r\n            k = 1\r\n            total = f(x)\r\n            while k<n:\r\n                total = f(total)\r\n                k += 1\r\n            return total\r\n        return h\r\n    return compose2(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":379,"date":"2016-02-16 12:32:16.637161","diff":null,"before":"\r\ndef repeated(f, n):\r\n    n -= 1\r\n    function = f\r\n    while n>0:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T12:32:16.637161","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    n -= 1\r\n    function = f\r\n    while n>0:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":80,"date":"2016-02-10 00:13:46.488677","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T00:13:46.488677","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose(f, repeated(f, n-1))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":211,"date":"2016-02-10 09:31:01.326486","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"13","SubmissionTime":"2016-02-10T09:31:01.326486","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":388,"date":"2016-02-11 15:21:49.438149","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return repeated(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-11T15:21:49.438149","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 11:23:08.620600","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-13T11:23:08.6206","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-09 16:32:52.496056","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-09T16:32:52.496056","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:01:58.968334","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, g), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"16","SubmissionTime":"2016-02-14T15:01:58.968334","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return repeated(compose1(f,g), n-1)","NameError: name 'g' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 15:14:13.205380","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"23","SubmissionTime":"2016-02-09T15:14:13.20538","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":114,"date":"2016-02-10 22:38:57.859905","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        counter = 0\r\n        num = n\r\n        while counter<n:\r\n            num = f(num)\r\n            counter = counter+1\r\n        return num\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"13","SubmissionTime":"2016-02-10T22:38:57.859905","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        counter = 0\r\n        num = x\r\n        while counter<n:\r\n            num = f(num)\r\n            counter = counter+1\r\n        return num\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> repeated(square, 2)(5) # square(square(5))","16","","# Error: expected","#     625","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":494,"date":"2016-02-16 00:55:09.989483","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_function(h, x):\r\n        if x==0:\r\n            return h\r\n        else:\r\n            return repeated_function(compose1(h, g), x-1)\r\n    return repeated_function(lambda x: x, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T00:55:09.989483","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_function(h, x):\r\n        if x==0:\r\n            return h\r\n        else:\r\n            return repeated_function(compose1(h, f), x-1)\r\n    return repeated_function(lambda x: x, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return repeated_function(lambda x: x, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function","    return repeated_function(compose1(h, g), x - 1)","NameError: name 'g' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1029,"date":"2016-02-13 20:11:31.162381","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T20:11:31.162381","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose(f, repeated(f, n-1))","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-15 13:32:14.634792","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def call_function(i):\r\n        if i==n:\r\n            return f\r\n        else:\r\n            return compose1(f, call_function(i+1))\r\n    return call_function(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-15T13:32:14.634792","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def call_function(i):\r\n        if i==n:\r\n            return f\r\n        else:\r\n            return compose1(f, call_function(i+1))\r\n    return call_function(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function","    return compose1(f,call_function(i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function","    return compose1(f,call_function(i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function","    return compose1(f,call_function(i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function","    return compose1(f,call_function(i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function","    return compose1(f,call_function(i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in call_function","    return compose1(f,call_function(i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in call_function","    if i==n:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":230,"date":"2016-02-15 18:27:59.161929","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x, i = 1):\r\n        if i==n:\r\n            return f(x)\r\n        else:\r\n            return f(helper(x, i+1))\r\n    return helper\r\ndef repeated_looped(f, n):\r\n    def looped(x):\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return looped\r\ndef compose1(f, g):\r\n    return lambda x: f(g(x))","after":null,"remaining":"1","SubmissionTime":"2016-02-15T18:27:59.161929","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(x, i = 1):\r\n        if i==n:\r\n            return f(x)\r\n        else:\r\n            return f(helper(x, i+1))\r\n    return helper\r\ndef repeated_looped(f, n):\r\n    def looped(x):\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return looped\r\ndef compose1(f, g):\r\n    return lambda x: f(g(x))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper","    return f(helper(x, i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper","    return f(helper(x, i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper","    return f(helper(x, i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper","    return f(helper(x, i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper","    return f(helper(x, i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper","    return f(helper(x, i+1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in helper","    if i == n:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 15:03:58.626603","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return x\r\n        x = f(x)\r\n        return repeated(f, n-1)\r\n    return helper","after":null,"remaining":"5","SubmissionTime":"2016-02-10T15:03:58.626603","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return x\r\n        x = f(x)\r\n        return repeated(f, n-1)(x)\r\n    return helper","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.helper at 0x00000266830CDD08>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.helper at 0x00000266830CDD08>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":54,"date":"2016-02-16 21:17:26.012100","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n<=0:\r\n        return n\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-16T21:17:26.0121","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<=0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":985,"date":"2016-02-13 10:12:12.641090","diff":null,"before":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    total = lambda x: x\r\n    while count<n:\r\n        total = compose1(f, total)\r\n        count += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T10:12:12.64109","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = 0\r\n    total = lambda x: x\r\n    while count<n:\r\n        total = compose1(f, total)\r\n        count += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":974,"date":"2016-02-08 17:22:15.549259","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-08T17:22:15.549259","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":337,"date":"2016-02-16 01:16:42.926737","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T01:16:42.926737","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 19:44:21.120309","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-16T19:44:21.120309","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":634,"date":"2016-02-15 18:35:21.523885","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T18:35:21.523885","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":206,"date":"2016-02-14 23:48:40.708762","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return \r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-14T23:48:40.708762","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":723,"date":"2016-02-16 16:44:33.476560","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        k = 1\r\n        total = 0\r\n        while k<=n:\r\n            if n>=2:\r\n                if total==0:\r\n                    total = compose1(f(x), f(x))\r\n                    k = k+1\r\n                else:\r\n                    total = compose1(f(total), f(total))\r\n                    k = k+1\r\n            else:\r\n                total = f(n)\r\n        if n==0:\r\n            return x\r\n        return total\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T16:44:33.47656","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        k = 1\r\n        total = 0\r\n        while k<=n:\r\n            if n>=2:\r\n                if total==0:\r\n                    total = compose1(f(x), f(x))\r\n                    k = k+1\r\n                else:\r\n                    total = compose1(f(total), f(total))\r\n                    k = k+1\r\n            else:\r\n                total = f(n)\r\n        if n==0:\r\n            return x\r\n        return total\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return f","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper","    total = compose1(f(total), f(total))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":316,"date":"2016-02-12 22:31:07.806836","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    func = compose1(f, f)\r\n    while i!=(n-1):\r\n        func = compose1(f, func)\r\n        i += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-12T22:31:07.806836","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 1\r\n    func = compose1(f, f)\r\n    while i!=(n-1):\r\n        func = compose1(f, func)\r\n        i += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     5","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1038,"date":"2016-02-16 16:53:53.529395","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def function_ception(f, n, i = 1, function = 0):\r\n        if n==0 or i==1:\r\n            function = identity\r\n        if n==0:\r\n            return function\r\n        if i>n:\r\n            return function\r\n        function = compose1(f, function)\r\n        return function_ception(f, n, i+1, function)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T16:53:53.529395","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def function_ception(f, n, function = identity):\r\n        if n==0:\r\n            return function\r\n        function = compose1(f, function)\r\n        return function_ception(f, n-1, function)\r\n    return function_ception(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ParameterNode-function, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-function_ception), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-function_ception, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Node(ParameterNode-i, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ParameterNode-function, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":50,"date":"2016-02-14 21:50:11.306776","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k, total = 1, 0\r\n    while k<=n:\r\n        k += 1\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-14T21:50:11.306776","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k, total = 1, 0\r\n    while k<=n:\r\n        k += 1\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":945,"date":"2016-02-16 01:07:35.552000","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = 3\r\n    g = f\r\n    while not n<x:\r\n        g = compose1(g, f)\r\n        x += 1\r\n    return compose1(g, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-16T01:07:35.552","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    x = 3\r\n    g = f\r\n    while not n<x:\r\n        g = compose1(g, f)\r\n        x += 1\r\n    return compose1(g, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","625","","# Error: expected","#     5","# but got","#     625","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":449,"date":"2016-02-14 22:45:44.001920","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper_a(a):\r\n        def helper_b(y):\r\n            if y==1:\r\n                return a\r\n            y -= 1\r\n            return f(helper_b(y))\r\n        return helper_b(n)\r\n    return helper_a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-14T22:45:44.00192","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper_a(a):\r\n        def helper_b(y):\r\n            if y==0:\r\n                return a\r\n            y -= 1\r\n            return f(helper_b(y))\r\n        return helper_b(n)\r\n    return helper_a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":525,"date":"2016-02-08 22:54:04.337885","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-08T22:54:04.337885","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return  f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return  f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return  f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":905,"date":"2016-02-11 21:13:57.832840","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-11T21:13:57.83284","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-11 00:43:01.716613","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def nega(count):\r\n        if count>1:\r\n            return f(nega(count-1))\r\n        return f(n)\r\n    return nega\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T00:43:01.716613","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nega(lmao):\r\n        breh = n\r\n        while breh>0:\r\n            lmao = f(lmao)\r\n            breh -= 1\r\n        return lmao\r\n    return nega\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-breh), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-breh)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-lmao), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-breh), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-lmao), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))), SingleChild(ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-breh), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-nega, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-lmao)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast)))))))))))))))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","15","","# Error: expected","#     243","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":779,"date":"2016-02-14 12:59:07.922426","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T12:59:07.922426","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-15 14:50:44.975885","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-15T14:50:44.975885","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":970,"date":"2016-02-12 08:23:51.631442","diff":null,"before":"\r\ndef repeated(f, n):\r\n    function, k = f, 1\r\n    while k<=n:\r\n        function, k = compose1(f, function), k+1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-12T08:23:51.631442","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    function, k = identity, 1\r\n    while k<=n:\r\n        function, k = compose1(f, function), k+1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:14:25.416319","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        for x in range(n):\r\n            x = f(x)\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-10T02:14:25.416319","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        for identity in range(n):\r\n            x = f(x)\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","3","","# Error: expected","#     8","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":574,"date":"2016-02-09 17:21:13.578658","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"16","SubmissionTime":"2016-02-09T17:21:13.578658","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":239,"date":"2016-02-12 14:52:30.870497","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"21","SubmissionTime":"2016-02-12T14:52:30.870497","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-13 08:32:58.894304","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    return compose1(repeated(f, n), repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T08:32:58.894304","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":914,"date":"2016-02-11 15:26:57.810106","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def func(x):\r\n        g = f\r\n        i = n\r\n        while i>0:\r\n            g = compose1(f, g)\r\n            i = i-1\r\n        return g(x)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-11T15:26:57.810106","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def func(x):\r\n        g = identity\r\n        i = n\r\n        while i>0:\r\n            g = compose1(f, g)\r\n            i = i-1\r\n        return g(x)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":336,"date":"2016-02-16 12:30:11.676956","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return repeated(compose1(f, f), n-1)\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T12:30:11.676956","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.helper at 0x0000025038B77E18>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.helper at 0x0000025038B77E18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":79,"date":"2016-02-14 16:10:54.078447","diff":null,"before":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    func = f\r\n    if n==0:\r\n        def y(x):\r\n            return x\r\n        return y\r\n    while count<n:\r\n        func = compose1(f, func)\r\n        count = count+1\r\n        if count==n:\r\n            return 0\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T16:10:54.078447","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    func = f\r\n    if n==0:\r\n        def y(x):\r\n            return x\r\n        return y\r\n    while count<n:\r\n        func = compose1(f, func)\r\n        count = count+1\r\n        if identity==n:\r\n            return 0\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":203,"date":"2016-02-11 08:42:45.627544","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = n\r\n        if k==0:\r\n            return x\r\n        else:\r\n            n -= 1\r\n            return h(f(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T08:42:45.627544","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = n\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return repeated(f, n-1)(f(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    k = n","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":496,"date":"2016-02-16 18:40:33.287455","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func_repeat(num_val):\r\n        while n>0:\r\n            num_val = f(num_val)\r\n            n -= 1\r\n        return num_val\r\n    return func_repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T18:40:33.287455","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func_repeat(num_val):\r\n        i = 0\r\n        while i<n:\r\n            num_val = f(num_val)\r\n            i += 1\r\n        return num_val\r\n    return func_repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-func_repeat, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), InOrderSort(ast))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in func_repeat","    while n > 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 16:54:21.246749","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T16:54:21.246749","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1)(x))\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in func","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":608,"date":"2016-02-11 14:52:58.646772","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    return helper(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-11T14:52:58.646772","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    return helper(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return helper(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return helper(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return helper(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return helper(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return helper(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return helper(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return helper(repeated(f,n-1),f)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":249,"date":"2016-02-09 09:49:30.219373","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def apply_here(x):\r\n        return 5\r\n    return apply_here\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T09:49:30.219373","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def apply_here(x, i = n):\r\n        if i==0:\r\n            return x\r\n        elif i==1:\r\n            return f(x)\r\n        else:\r\n            return apply_here(f(x), i-1)\r\n    return apply_here\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ParameterNode-i, SingleChild(LeafConstNode(NameExpressionNode-n))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-apply_here), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(SuiteStatementNode, SingleChild(ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))))), Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-apply_here), Children(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-apply_here, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 22:39:10.312824","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = f\r\n    while n>0:\r\n        x = compose1(f, x)\r\n        n -= 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-13T22:39:10.312824","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = identity\r\n    while n>0:\r\n        x = compose1(f, x)\r\n        n -= 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":287,"date":"2016-02-15 22:15:17.701983","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k, function = 1, f\r\n    while k<n:\r\n        k, f = k+1, compose1(function, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T22:15:17.701983","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k, function = 1, f\r\n    while k<n:\r\n        k, f = k+1, compose1(function, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1019,"date":"2016-02-08 17:21:12.875878","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-08T17:21:12.875878","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":959,"date":"2016-02-10 22:16:41.606587","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return x\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\n    return repeated_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T22:16:41.606587","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return x\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return compose1(f, repeated(f, n-1))(x)\r\n    return repeated_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x00000173E69A7E18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x00000173E69A7E18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":533,"date":"2016-02-10 21:49:20.098724","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T21:49:20.098724","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":900,"date":"2016-02-12 22:45:47.340223","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-12T22:45:47.340223","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":825,"date":"2016-02-14 12:56:05.708298","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    if n==1:\r\n        return compose1(identity, f)\r\n    return compose1(identity, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T12:56:05.708298","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    if n==1:\r\n        return compose1(identity, f)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":896,"date":"2016-02-16 01:34:41.204163","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def retainer(x):\r\n        x = f\r\n        return x\r\n    yo = retainer(f)\r\n    def composer(a, k):\r\n        def h(x):\r\n            return a(k(x))\r\n        return h\r\n    counter = n-1\r\n    while counter:\r\n        z = composer(yo, f)\r\n        f = z\r\n        counter -= 1\r\n    return z\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T01:34:41.204163","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def retainer(x):\r\n        x = f\r\n        return x\r\n    yo = retainer(f)\r\n    def composer(a, k):\r\n        def h(x):\r\n            return a(k(x))\r\n        return h\r\n    counter = n-1\r\n    while counter:\r\n        z = composer(yo, f)\r\n        f = z\r\n        counter -= 1\r\n    return z\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     5","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-12 11:04:53.585216","diff":null,"before":"\r\ndef repeated(f, n):\r\n    square\r\n    square2 = compose1(square, square)\r\n    square3 = compose1(square, compose1(square, square))\r\n    if (n==0):\r\n        return n\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-12T11:04:53.585216","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    square\r\n    square2 = compose1(square, square)\r\n    square3 = compose1(square, compose1(square, square))\r\n    if (n==0):\r\n        return identity\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":298,"date":"2016-02-16 15:31:24.194214","diff":null,"before":"\r\ndef repeated(f, n):\r\n    h = f\r\n    k = 1\r\n    while k<n:\r\n        h = compose1(f, h)\r\n        k += 1\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-16T15:31:24.194214","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    h = f\r\n    k = 1\r\n    while k<n:\r\n        h = compose1(f, h)\r\n        k += 1\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-15 14:40:51.374378","diff":null,"before":"\r\ndef repeated(f, n):\r\n    f2 = f\r\n    while n>1:\r\n        f2 = compose1(f, f2)\r\n        n -= 1\r\n    return f2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T14:40:51.374378","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    f2 = f\r\n    while n>1:\r\n        f2 = compose1(f, f2)\r\n        n -= 1\r\n    return f2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5","Traceback (most recent call last):","    add_three(5","              ^","SyntaxError: unexpected EOF while parsing","","# Error: expected","#     8","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-16 19:24:48.984700","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T19:24:48.9847","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":318,"date":"2016-02-16 20:09:53.042058","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def help_me(x):\r\n        total = x\r\n        i = 1\r\n        while i<n:\r\n            total = f(total)\r\n            i += 1\r\n        return total\r\n    return help_me\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T20:09:53.042058","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def help_me(x):\r\n        total = x\r\n        i = 0\r\n        while i<n:\r\n            total = f(total)\r\n            i += 1\r\n        return total\r\n    return help_me\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":134,"date":"2016-02-12 16:06:50.063388","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    new_function = f\r\n    while i<=n:\r\n        new_function = compose1(new_function, f)\r\n        i += 1\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-12T16:06:50.063388","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    new_function = identity\r\n    while i<=n:\r\n        new_function = compose1(new_function, f)\r\n        i += 1\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":545,"date":"2016-02-11 00:05:03.448014","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x, counter = n):\r\n        result = x\r\n        while counter>=0:\r\n            result = f(result)\r\n            counter -= 1\r\n        return result\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-11T00:05:03.448014","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x, counter = n):\r\n        result = x\r\n        while counter>0:\r\n            result = f(result)\r\n            counter -= 1\r\n        return result\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":961,"date":"2016-02-16 19:58:12.913630","diff":null,"before":"\r\ndef repeated(f, n):\r\n    v = f\r\n    while n>1:\r\n        v = compose1(f, v)\r\n        n = n-1\r\n    return v\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T19:58:12.91363","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    v = f\r\n    while n>1:\r\n        v = compose1(f, v)\r\n        n = n-1\r\n    return v\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":29,"date":"2016-02-08 19:16:12.660877","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        return f(x)\r\n    if n==0:\r\n        return h\r\n    else:\r\n        return lambda x: h(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-08T19:16:12.660877","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        return f(x)\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return lambda x: h(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":303,"date":"2016-02-16 20:20:25.849672","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T20:20:25.849672","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":838,"date":"2016-02-08 17:08:57.409840","diff":null,"before":"\r\ndef repeated(f, n):\r\n    value_holder = f\r\n    while n>0:\r\n        value_holder = compose1(f, value_holder)\r\n        n -= 1\r\n    return value_holder\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-08T17:08:57.40984","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    value_holder = identity\r\n    while n>0:\r\n        value_holder = compose1(f, value_holder)\r\n        n -= 1\r\n    return value_holder\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":518,"date":"2016-02-11 15:08:11.078698","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    y = lambda x: f(x)\r\n    while i<=n:\r\n        y = compose1(f, y)\r\n        i += 1\r\n    return y\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-11T15:08:11.078698","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    y = lambda x: identity(x)\r\n    while i<=n:\r\n        y = compose1(f, y)\r\n        i += 1\r\n    return y\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":31,"date":"2016-02-13 12:59:06.250664","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, a):\r\n        def h(x):\r\n            return f(a(x))\r\n        return h\r\n    a = f\r\n    while n>=1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"13","SubmissionTime":"2016-02-13T12:59:06.250664","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, a):\r\n        def h(x):\r\n            return f(a(x))\r\n        return h\r\n    a = identity\r\n    while n>=1:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-12 13:42:52.810875","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated2(j):\r\n        if j==0:\r\n            return n\r\n        else:\r\n            k = compose1(f, j)\r\n            return repeated2(j-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T13:42:52.810875","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated2(j):\r\n        counter = 1\r\n        while counter<=n:\r\n            j = f(j)\r\n            counter += 1\r\n        return j\r\n    return repeated2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(ConstantExpressionNode-1))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(LeafConstNode(NameExpressionNode-counter), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-j))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeated2))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-repeated2, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))))))), InOrderSort(ast))))))))))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":686,"date":"2016-02-11 19:08:28.628748","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"27","SubmissionTime":"2016-02-11T19:08:28.628748","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 21:00:56.609436","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def cycle(x):\r\n        i = n\r\n        while i>0:\r\n            n = f(x)\r\n            i -= 1\r\n        return n\r\n    return cycle\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-08T21:00:56.609436","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def cycle(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return cycle\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in cycle","    i = n","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1023,"date":"2016-02-14 18:05:24.519057","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for i in range(n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-14T18:05:24.519057","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    for i in range(n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":302,"date":"2016-02-11 14:46:49.897779","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return identity(x)\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T14:46:49.897779","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return identity(x)\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in h","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1013,"date":"2016-02-09 15:27:33.101239","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(num):\r\n        def helper(x):\r\n            if x==n:\r\n                return f(num)\r\n            else:\r\n                return f(helper(x+1))\r\n        return helper(0)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T15:27:33.101239","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(num):\r\n        def helper(x):\r\n            if x==n:\r\n                return identity(num)\r\n            else:\r\n                return f(helper(x+1))\r\n        return helper(0)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-11 20:23:42.615448","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def composer(total):\r\n        counter = 0\r\n        while counter<n:\r\n            total = f(x)\r\n            counter += 1\r\n        return total\r\n    return composer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T20:23:42.615448","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def composer(x):\r\n        counter = 0\r\n        while counter<n:\r\n            x = f(x)\r\n            counter += 1\r\n        return x\r\n    return composer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-composer, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in composer","    total = f(x)","NameError: name 'x' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":675,"date":"2016-02-13 23:08:45.035964","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T23:08:45.035964","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":951,"date":"2016-02-10 16:51:40.376025","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def apply(x):\r\n        if n==0:\r\n            return x\r\n        return repeated(f, n-1)(x)\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T16:51:40.376025","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def apply(x):\r\n        if n==0:\r\n            return x\r\n        return f(repeated(f, n-1)(x))\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":946,"date":"2016-02-10 22:14:36.017850","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T22:14:36.01785","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":366,"date":"2016-02-11 21:07:22.034801","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = 0\r\n    x = f\r\n    while k<n:\r\n        x = compose1(f, x)\r\n        k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-11T21:07:22.034801","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    k = 0\r\n    x = identity\r\n    while k<n:\r\n        x = compose1(f, x)\r\n        k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":178,"date":"2016-02-10 20:21:58.804878","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if (n>1):\r\n        return compose1(f, repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"21","SubmissionTime":"2016-02-10T20:21:58.804878","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if (n>1):\r\n        return compose1(f, repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":385,"date":"2016-02-16 20:47:03.524565","diff":null,"before":"\r\ndef repeated(f, n):\r\n    starter = 1\r\n    new = f\r\n    while starter<=n:\r\n        new = compose1(f, new)\r\n        starter += 1\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T20:47:03.524565","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    starter = 1\r\n    new = identity\r\n    while starter<=n:\r\n        new = compose1(f, new)\r\n        starter += 1\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:09:45.693415","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    def compose2(num):\r\n        result = f(num)\r\n        for x in range(1, n):\r\n            result = f(result)\r\n        return result\r\n    return compose2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T08:09:45.693415","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose2(num):\r\n        result = f(num)\r\n        for x in range(1, n):\r\n            result = f(result)\r\n        return result\r\n    return compose2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":603,"date":"2016-02-13 15:38:40.686710","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"25","SubmissionTime":"2016-02-13T15:38:40.68671","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":237,"date":"2016-02-15 12:12:02.729125","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while n>1:\r\n            n -= 1\r\n            return compose1(f, repeated(f, n)), n\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T12:12:02.729125","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        while n>1:\r\n            n -= 1\r\n            return (compose1(f, repeated(f, n)))\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(ParenthesisExpressionNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'tuple' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":693,"date":"2016-02-10 10:02:00.414497","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def help_repeat(k, f):\r\n        if k==n:\r\n            return f\r\n        else:\r\n            return compose1(f, help_repeat(k+1, f))\r\n    return help_repeat(1, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-10T10:02:00.414497","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def help_repeat(k, f):\r\n        if k==n:\r\n            return f\r\n        else:\r\n            return compose1(f, help_repeat(k+1, f))\r\n    return help_repeat(1, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat","    return compose1( f, help_repeat(k+1, f))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat","    return compose1( f, help_repeat(k+1, f))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat","    return compose1( f, help_repeat(k+1, f))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat","    return compose1( f, help_repeat(k+1, f))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat","    return compose1( f, help_repeat(k+1, f))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help_repeat","    return compose1( f, help_repeat(k+1, f))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in help_repeat","    if k==n:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":947,"date":"2016-02-12 14:25:24.598174","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-12T14:25:24.598174","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-16 20:18:39.118857","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    fun = compose1(f, f)\r\n    i = 2\r\n    while i<n:\r\n        fun = compose1(f, fun)\r\n        i += 1\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T20:18:39.118857","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    fun = compose1(f, f)\r\n    i = 2\r\n    while i<n:\r\n        fun = compose1(f, fun)\r\n        i += 1\r\n    return fun\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":831,"date":"2016-02-16 14:39:16.986504","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        k = n\r\n        while k>0:\r\n            x = g(x)\r\n            k = k-1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T14:39:16.986504","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nth(x):\r\n        k = n\r\n        while k>0:\r\n            x = f(x)\r\n            k = k-1\r\n        return x\r\n    return nth\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in nth","    x = g(x)","NameError: name 'g' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":264,"date":"2016-02-10 00:04:06.771351","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = f\r\n    if n==0:\r\n        return identity\r\n    for i in range(n-1):\r\n        x = compose1(x, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-10T00:04:06.771351","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = f\r\n    if n==0:\r\n        return identity\r\n    for i in range(n-1):\r\n        x = compose1(x, f)\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":24,"date":"2016-02-10 15:46:44.682447","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def helper(i):\r\n        if i>n:\r\n            return f\r\n        else:\r\n            return compose(f, helper(i+1))\r\n    return helper(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T15:46:44.682447","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def helper(i):\r\n        if i>n:\r\n            return identity\r\n        else:\r\n            return compose(f, helper(i+1))\r\n    return helper(1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-15 17:18:15.738029","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper2(x):\r\n        if x==0:\r\n            return f\r\n        else:\r\n            return f(repeated(f, x-1))\r\n    return helper2(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-15T17:18:15.738029","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper2(x):\r\n        if x==0:\r\n            return compose1(identity, identity)\r\n        else:\r\n            return compose1(f, repeated(f, x-1))\r\n    return helper2(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return helper2(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper2","    return f(repeated(f, x - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return helper2(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper2","    return f(repeated(f, x - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return helper2(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper2","    return f(repeated(f, x - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":101,"date":"2016-02-15 16:28:46.083420","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = 0\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T16:28:46.08342","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":492,"date":"2016-02-16 17:05:10.733710","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def help(x):\r\n        k = 0\r\n        while k<=n:\r\n            x = f(x)\r\n            k += 1\r\n        return x\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T17:05:10.73371","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def help(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k += 1\r\n        return x\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":719,"date":"2016-02-11 17:42:30.746863","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_function(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            while n>0:\r\n                n_func = f(x)\r\n                n = n-1\r\n                return repeated(n_func)\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T17:42:30.746863","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_function(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            n_func = f(x)\r\n            return repeated(f, n-1)(n_func)\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated_function","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-09 08:18:01.118475","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(a, b):\r\n        def c(x):\r\n            return a(b(x))\r\n        return c\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)","after":null,"remaining":"3","SubmissionTime":"2016-02-09T08:18:01.118475","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(a, b):\r\n        def c(x):\r\n            return a(b(x))\r\n        return c\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-14 14:36:31.684732","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = compose1\r\n    for i in range(n):\r\n        x = compose1(x, f)\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"40","SubmissionTime":"2016-02-14T14:36:31.684732","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = identity\r\n    for i in range(n):\r\n        x = compose1(x, f)\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":386,"date":"2016-02-08 14:47:56.612103","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-08T14:47:56.612103","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":800,"date":"2016-02-16 02:16:45.100719","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\n    return compose1(repeated(f, n), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T02:16:45.100719","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\n    return compose1(repeated(f, n), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":368,"date":"2016-02-16 21:28:13.611438","diff":null,"before":"\r\ndef repeated(f, n):\r\n    z = f\r\n    while n>0:\r\n        z = compose1(z, f)\r\n        n -= 1\r\n    return z\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-16T21:28:13.611438","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    z = identity\r\n    while n>0:\r\n        z = compose1(z, f)\r\n        n -= 1\r\n    return z\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":98,"date":"2016-02-12 15:52:17.713972","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-12T15:52:17.713972","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":226,"date":"2016-02-14 12:24:12.984956","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1 or n==0:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T12:24:12.984956","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1 or n==0:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":99,"date":"2016-02-11 23:38:02.270856","diff":null,"before":"\r\ndef repeated(f, n):\r\n    result = f\r\n    while 1<n:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-11T23:38:02.270856","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    result = f\r\n    while 1<n:\r\n        result = compose1(f, result)\r\n        n -= 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":483,"date":"2016-02-14 17:24:14.820176","diff":null,"before":"\r\ndef repeated(f, n):\r\n    while n>1:\r\n        func = f(x)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T17:24:14.820176","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = identity\r\n    while n>=1:\r\n        x = compose1(f, x)\r\n        n -= 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(NameExpressionNode-identity)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    func = f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":802,"date":"2016-02-16 13:14:56.368051","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper_function(x):\r\n        if n==0:\r\n            return 0\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T13:14:56.368051","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper_function(x):\r\n        if n==0:\r\n            return 0\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","3","","# Error: expected","#     8","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":224,"date":"2016-02-13 13:37:42.266294","diff":null,"before":"\r\ndef repeated(f, n):\r\n    apply = f\r\n    while n>1:\r\n        apply = compose1(f, apply)\r\n        n -= 1\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-13T13:37:42.266294","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    apply = f\r\n    while n>1:\r\n        apply = compose1(f, apply)\r\n        n -= 1\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-16 22:44:18.585239","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        compose1(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T22:44:18.585239","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    compose1(repeated(f, n-1))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":774,"date":"2016-02-14 13:08:18.853883","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"28","SubmissionTime":"2016-02-14T13:08:18.853883","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":437,"date":"2016-02-15 13:02:37.486538","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T13:02:37.486538","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if (n==1):\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if(n==1):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":130,"date":"2016-02-10 15:50:05.226933","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        new_f = f\r\n        for i in range(1, n):\r\n            new_f = compose1(f, new_f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-10T15:50:05.226933","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        a = f\r\n        for i in range(1, n):\r\n            a = compose1(f, a)\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-a)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":854,"date":"2016-02-08 13:10:22.118464","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        return x\r\n    if n==0:\r\n        return func\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"18","SubmissionTime":"2016-02-08T13:10:22.118464","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        return x\r\n    if n==0:\r\n        return func\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":546,"date":"2016-02-15 15:33:27.236346","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return compose1(identity, identity)\r\n    else:\r\n        compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-15T15:33:27.236346","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":468,"date":"2016-02-16 12:19:58.587832","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return repeated_helper\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    return compose1(f, f)","after":null,"remaining":"1","SubmissionTime":"2016-02-16T12:19:58.587832","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n==0:\r\n            return identity(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return repeated_helper\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    return compose1(f, f)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":42,"date":"2016-02-09 23:44:05.907971","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i, total = 1, n\r\n        while i<=n:\r\n            total = f(total)\r\n            i += 1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T23:44:05.907971","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i, total = 1, x\r\n        while i<=n:\r\n            total = f(total)\r\n            i += 1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":529,"date":"2016-02-10 13:54:06.413714","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    elif (n==1):\r\n        return lambda x: f(x)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T13:54:06.413714","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    elif (n==1):\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":863,"date":"2016-02-10 08:57:13.032832","diff":null,"before":"\r\ndef repeated(f, n):\r\n    new_func, i = f, 1\r\n    while i<n:\r\n        new_func = compose1(f, new_func)\r\n        i += 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-10T08:57:13.032832","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    new_func, i = f, 1\r\n    while i<n:\r\n        new_func = compose1(f, new_func)\r\n        i += 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":754,"date":"2016-02-14 22:05:18.955201","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-14T22:05:18.955201","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1071,"date":"2016-02-10 16:45:45.833508","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def output_fuction(x):\r\n        i = 0\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T16:45:45.833508","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def output_fuction(x):\r\n        i = 0\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return output_fuction\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-output_fuction))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-output_fuction, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":128,"date":"2016-02-09 16:01:13.895387","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def new_function(x):\r\n        total = f(x)\r\n        y = 0\r\n        while (y<=n):\r\n            total = f(total)\r\n            y = y+1\r\n        return total\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-09T16:01:13.895387","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def new_function(x):\r\n        total = x\r\n        y = 1\r\n        while (y<=n):\r\n            total = f(total)\r\n            y = y+1\r\n        return total\r\n    return new_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":839,"date":"2016-02-14 15:57:47.522488","diff":null,"before":"\r\ndef repeated(f, n):\r\n    new_func = f\r\n    n -= 1\r\n    while n>=0:\r\n        new_func = compose1(new_func, f)\r\n        n -= 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-14T15:57:47.522488","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    new_func = identity\r\n    n -= 1\r\n    while n>=0:\r\n        new_func = compose1(new_func, f)\r\n        n -= 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":259,"date":"2016-02-09 16:15:54.225147","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_help(x):\r\n        if n==0:\r\n            return x\r\n        return compose1(f, repeated(f, n-1))\r\n    return repeated_help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-09T16:15:54.225147","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_help(x):\r\n        if n==0:\r\n            return x\r\n        return compose1(f, repeated(f, n-1))(x)\r\n    return repeated_help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000001894ADADE18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000001894ADADE18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":95,"date":"2016-02-16 19:28:08.158534","diff":null,"before":"\r\ndef repeated(f, n):\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T19:28:08.158534","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f,n-1))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 13:43:27.545890","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-14T13:43:27.54589","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 19:46:21.804114","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = f\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T19:46:21.804114","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = identity\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":663,"date":"2016-02-08 16:15:29.811763","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T16:15:29.811763","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1((f,repeated(f)),n-1)","TypeError: repeated() missing 1 required positional argument: 'n'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-12 11:34:10.850098","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        def lol(x):\r\n            return lol(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T11:34:10.850098","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        def lol(x):\r\n            return lol(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":633,"date":"2016-02-16 21:08:41.605779","diff":null,"before":"\r\ndef repeated(f, n):\r\n    current = f\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    while (n>0):\r\n        current = compose1(f, current)\r\n        n -= 1\r\n    return current\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T21:08:41.605779","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    current = identity\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    while (n>0):\r\n        current = compose1(f, current)\r\n        n -= 1\r\n    return current\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":611,"date":"2016-02-13 21:17:44.512358","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(g, k):\r\n        if k==0:\r\n            return g\r\n        else:\r\n            return helper(compose1(g, f), k-1)\r\n    return helper(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T21:17:44.512358","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(g, k):\r\n        if k==0:\r\n            return g\r\n        else:\r\n            return helper(compose1(g, f), k-1)\r\n    return helper(identity, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":378,"date":"2016-02-11 17:43:20.993300","diff":null,"before":"\r\ndef repeated(f, n):\r\n    counter = 0\r\n    x = identity\r\n    while counter<n:\r\n        x = compose(f, x)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T17:43:20.9933","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    counter = 0\r\n    x = identity\r\n    while counter<n:\r\n        x = compose1(f, x)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    x = compose(f, x)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 21:16:05.925784","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"10","SubmissionTime":"2016-02-15T21:16:05.925784","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1041,"date":"2016-02-09 22:49:57.487332","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if (n==0):\r\n        return x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T22:49:57.487332","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if (n==0):\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    else: return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    else: return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in repeated","    else: return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 45, in repeated","    if(n==0): return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":227,"date":"2016-02-13 13:08:15.058403","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_func(x):\r\n        i = n-1\r\n        result = f(x)\r\n        while i>0:\r\n            result = f(result)\r\n            i -= 1\r\n        return result\r\n    return repeated_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-13T13:08:15.058403","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_func(x):\r\n        i = n-1\r\n        result = f(x)\r\n        while i>0:\r\n            result = f(result)\r\n            i -= 1\r\n        return result\r\n    return repeated_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":174,"date":"2016-02-16 13:02:47.705457","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def inner1(x):\r\n        if n==0:\r\n            return f(x)\r\n        return repeated(f, n-1)(f(x))\r\n    return inner1\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T13:02:47.705457","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner1(x):\r\n        if n==0:\r\n            return identity(x)\r\n        return repeated(f, n-1)(f(x))\r\n    return inner1\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-09 16:23:32.591591","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(compose1(repeated(f, n-1), f(x)))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-09T16:23:32.591591","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(compose1((repeated (f,n-1),f(x))))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":699,"date":"2016-02-09 11:54:25.380770","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"29","SubmissionTime":"2016-02-09T11:54:25.38077","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1027,"date":"2016-02-12 21:33:40.433509","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    else:\r\n        return compose1(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T21:33:40.433509","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if (n==0):\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n-1))","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:18:37.004449","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def num(x):\r\n        a = n\r\n        tot = 1\r\n        tot = f(x)\r\n        while a-1>0:\r\n            tot = f(tot)\r\n            a = a-1\r\n        return tot\r\n    return num\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T19:18:37.004449","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def num(x):\r\n        a = n\r\n        tot = 1\r\n        tot = f(x)\r\n        while a-1>0:\r\n            tot = f(tot)\r\n            a = a-1\r\n        return tot\r\n    return num\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":520,"date":"2016-02-09 23:45:23.929666","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f(x)\r\n    func = compose1(f, f)\r\n    while n>2:\r\n        n -= 1\r\n        func = compose1(f, func)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-09T23:45:23.929666","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f(x)\r\n    func = compose1(f, f)\r\n    while n>2:\r\n        n -= 1\r\n        func = compose1(f, func)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","625","","# Error: expected","#     5","# but got","#     625","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-09 00:58:09.672734","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-09T00:58:09.672734","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1021,"date":"2016-02-15 16:59:54.406523","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==1:\r\n            return f(x)\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-15T16:59:54.406523","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def h(x):\r\n        if n==1:\r\n            return f(x)\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    if n ==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":973,"date":"2016-02-12 12:50:43.724896","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    elif n==1:\r\n        return f(n)\r\n    else:\r\n        return compose1(repeated(compose1(f, f), n-1), f(n))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T12:50:43.724896","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":543,"date":"2016-02-11 10:56:02.802892","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    return_funct = f\r\n    for i in range(n-1):\r\n        return_funct = compose1(f, return_funct)\r\n    return return_funct\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T10:56:02.802892","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return_funct = f\r\n    for i in range(n-1):\r\n        return_funct = compose1(f, return_funct)\r\n    return return_funct\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":421,"date":"2016-02-14 21:44:35.835566","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-14T21:44:35.835566","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1034,"date":"2016-02-15 21:52:44.597018","diff":null,"before":"\r\ndef repeated(f, n):\r\n    G = f\r\n    while n>1:\r\n        G = compose1(f, G)\r\n        n = n-1\r\n    return G\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T21:52:44.597018","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    G = f\r\n    while n>1:\r\n        G = compose1(f, G)\r\n        n = n-1\r\n    return G\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-15 13:04:45.114329","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f()\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"32","SubmissionTime":"2016-02-15T13:04:45.114329","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return f()","TypeError: increment() missing 1 required positional argument: 'x'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":848,"date":"2016-02-11 23:11:23.378620","diff":null,"before":"\r\ndef repeated(f, n):\r\n    result = lambda x: f(x)\r\n    i = 1\r\n    while i<=n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\n    i = 1\r\n    x = lambda x: x\r\n    print(x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T23:11:23.37862","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result = lambda x: identity(x)\r\n    i = 1\r\n    while i<=n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\n    i = 1\r\n    x = lambda x: x\r\n    print(x)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-14 17:34:35.376331","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x, a = n):\r\n        if a==0:\r\n            return f(x)\r\n        else:\r\n            return f(helper(x, a-1))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T17:34:35.376331","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x, a = n):\r\n        if a==0:\r\n            return identity(x)\r\n        else:\r\n            return f(helper(x, a-1))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":377,"date":"2016-02-15 10:55:23.587920","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def recursor(m):\r\n        i = 1\r\n        y = m\r\n        while i<=n:\r\n            y = compose1(f, f)(y)\r\n            i += 1\r\n        return y\r\n    return recursor\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T10:55:23.58792","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def recursor(m):\r\n        i = 1\r\n        y = m\r\n        while i<=n:\r\n            y = compose1(identity, f)(y)\r\n            i += 1\r\n        return y\r\n    return recursor\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","11","","# Error: expected","#     8","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":668,"date":"2016-02-10 20:31:50.925086","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = lambda x: x\r\n    k = n-1\r\n    while k>=1:\r\n        a = compose1(f, a)\r\n        k -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-10T20:31:50.925086","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = lambda x: x\r\n    k = n-0\r\n    while k>=1:\r\n        a = compose1(f, a)\r\n        k -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":398,"date":"2016-02-14 16:16:09.700834","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T16:16:09.700834","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":289,"date":"2016-02-12 10:58:12.169041","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    def internal(args):\r\n        result = args\r\n        while k<=n:\r\n            result = f(result)\r\n            k += 1\r\n        return result\r\n    return internal\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T10:58:12.169041","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def internal(args):\r\n        k = 1\r\n        result = args\r\n        while k<=n:\r\n            result = f(result)\r\n            k += 1\r\n        return result\r\n    return internal\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-internal, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-internal, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-k), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-internal, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in internal","    while k<=n:","UnboundLocalError: local variable 'k' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":380,"date":"2016-02-10 20:20:01.161876","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-10T20:20:01.161876","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":257,"date":"2016-02-12 07:36:21.424453","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        counter = 1\r\n        if n==0:\r\n            return x\r\n        h = f(x)\r\n        while counter<n:\r\n            counter += 1\r\n            s = f(h)\r\n        return s\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-12T07:36:21.424453","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        counter = 1\r\n        if n==0:\r\n            return x\r\n        h = f(x)\r\n        while counter<n:\r\n            counter += 1\r\n            h = f(h)\r\n        return h\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":11,"date":"2016-02-11 12:25:57.163219","diff":null,"before":"\r\ndef repeated(f, n):\r\n    while n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"54","SubmissionTime":"2016-02-11T12:25:57.163219","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    while n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":326,"date":"2016-02-11 18:03:01.035497","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        a = 0\r\n        if n==0:\r\n            return x\r\n        while a<=n:\r\n            wow = lambda x: f(x)\r\n            b = wow(x)\r\n            x = wow(x)\r\n            a += 1\r\n        return b\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T18:03:01.035497","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        a = 0\r\n        if n==0:\r\n            return x\r\n        while a<=n:\r\n            wow = lambda x: f(x)\r\n            b = identity(x)\r\n            x = wow(x)\r\n            a += 1\r\n        return b\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":60,"date":"2016-02-12 20:32:55.588291","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 1\r\n        if n==0:\r\n            return x\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T20:32:55.588291","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 0\r\n        if n==0:\r\n            return x\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":454,"date":"2016-02-10 17:20:56.132307","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(counter):\r\n        if counter==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, repeated_helper(n-1))\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return repeated_helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T17:20:56.132307","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(counter):\r\n        if counter==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(f, repeated_helper(counter-1))\r\n    if n==0:\r\n        return lambda x: x\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return repeated_helper(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_helper","    return compose1(f,repeated_helper(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated_helper","    if counter == 2:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     243","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":233,"date":"2016-02-15 22:50:42.874741","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def zero_helper(a):\r\n        if n==0:\r\n            return a\r\n        b = f(a)\r\n        c = 1\r\n        while c<n:\r\n            b = f(b)\r\n            c = c+1\r\n        return c\r\n    return zero_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T22:50:42.874741","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def zero_helper(a):\r\n        if n==0:\r\n            return a\r\n        b = f(a)\r\n        c = 1\r\n        while c<n:\r\n            b = f(b)\r\n            c = c+1\r\n        return b\r\n    return zero_helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-b)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","3","","# Error: expected","#     8","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-16 15:35:59.109392","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def recRep(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T15:35:59.109392","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def recRep(x):\r\n        i = 0\r\n        while i<n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return recRep\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-recRep)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return g","NameError: name 'g' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":685,"date":"2016-02-08 18:17:53.887228","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        g = f(x)\r\n        for i in range(0, n):\r\n            g = f(g)\r\n        return g\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-08T18:17:53.887228","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        g = identity(x)\r\n        for i in range(0, n):\r\n            g = f(g)\r\n        return g\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":445,"date":"2016-02-16 10:58:31.671492","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def final(f, n):\r\n        if (n==1):\r\n            return f\r\n        else:\r\n            return f(final(f, n-1))\r\n    return final(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T10:58:31.671492","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def final(var):\r\n        store = n\r\n        while store>0:\r\n            var = f(var)\r\n            store -= 1\r\n        return var\r\n    return final\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-var)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-store)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-store), SingleChild(LeafConstNode(NameExpressionNode-n))))), Selected(\\x => Match(x, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-var)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-var), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-store)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-store), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(WhileStatementNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-store), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, Children(ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-var), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-store), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK)))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-var))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ParenthesisExpressionNode, TChild(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(FunctionDefinitionNode-final, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))))))))))))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return final(f, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in final","    return f(final(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in final","    return f(final(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":155,"date":"2016-02-14 12:19:59.386761","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if x==0:\r\n        return f(n)\r\n    else:\r\n        x -= 1\r\n        return compose1(f, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"16","SubmissionTime":"2016-02-14T12:19:59.386761","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if x == 0:","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     ","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":343,"date":"2016-02-16 21:42:40.403020","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T21:42:40.40302","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-12 11:41:47.706509","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        i = n\r\n        while i>0:\r\n            b = f(a)\r\n            a = b\r\n            i = i-1\r\n        return b\r\n    return a\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        while n>0:\r\n            b = f(a)\r\n            a = b\r\n            n = n-1\r\n        return b\r\n    return a","after":null,"remaining":"1","SubmissionTime":"2016-02-12T11:41:47.706509","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        i = n\r\n        while i>0:\r\n            b = f(a)\r\n            a = b\r\n            i = i-1\r\n        return b\r\n    return a\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def a(x):\r\n        a = x\r\n        b = 0\r\n        while n>0:\r\n            b = f(a)\r\n            a = b\r\n            n = n-1\r\n        return b\r\n    return a","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1049,"date":"2016-02-11 20:55:22.827456","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    func = f\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        while k<=n:\r\n            func = compose1(func, f)\r\n            k += 1\r\n    return func","after":null,"remaining":"1","SubmissionTime":"2016-02-11T20:55:22.827456","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    func = identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        while k<=n:\r\n            func = compose1(func, f)\r\n            k += 1\r\n    return func","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":102,"date":"2016-02-11 16:40:17.574563","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        for i in range(1, n):\r\n            x = f(x)\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-11T16:40:17.574563","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        for i in range(0, n):\r\n            x = f(x)\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":137,"date":"2016-02-10 09:26:21.246725","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    for k in range(n):\r\n        g = identity\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T09:26:21.246725","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = identity\r\n    for k in range(n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(LeafConstNode(NameExpressionNode-identity)))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ForStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":964,"date":"2016-02-15 12:55:16.060072","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = f\r\n    while n>1:\r\n        x = compose1(x, f)\r\n        n -= 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T12:55:16.060072","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    x = f\r\n    while n>1:\r\n        x = compose1(x, f)\r\n        n -= 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-16 17:49:59.504365","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a, total = 0, g\r\n    while a<n:\r\n        total = compose1(f, total)\r\n        a += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T17:49:59.504365","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a, total = 0, identity\r\n    while a<n:\r\n        total = compose1(f, total)\r\n        a += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    a, total = 0, g","NameError: name 'g' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":390,"date":"2016-02-08 22:15:32.635410","diff":null,"before":"\r\ndef repeated(f, n):\r\n    o = f\r\n    while n>0:\r\n        o = compose(f, o)\r\n        n -= 1\r\n    return o\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T22:15:32.63541","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    o = identity\r\n    while n>0:\r\n        o = compose1(f, o)\r\n        n -= 1\r\n    return o\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    o = compose(f, o)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 01:25:25.875262","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-14T01:25:25.875262","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-09 11:06:49.069795","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"16","SubmissionTime":"2016-02-09T11:06:49.069795","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-15 13:42:38.120927","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def counter(i):\r\n        if i==n:\r\n            return f\r\n        else:\r\n            return compose1(counter(i+1), f)\r\n    return counter(0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-15T13:42:38.120927","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def counter(i):\r\n        if i==n:\r\n            return identity\r\n        else:\r\n            return compose1(counter(i+1), f)\r\n    return counter(0)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 15:45:12.451545","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f(x)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-13T15:45:12.451545","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":883,"date":"2016-02-12 00:22:26.898716","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    counter = 0\r\n    func = z\r\n    while counter<n:\r\n        counter += 1\r\n        func = compose1(func, f)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"13","SubmissionTime":"2016-02-12T00:22:26.898716","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    counter = 0\r\n    func = identity\r\n    while counter<n:\r\n        counter += 1\r\n        func = compose1(func, f)\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    func = z","NameError: name 'z' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":808,"date":"2016-02-12 00:06:39.560945","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    g = f\r\n    while i<n:\r\n        g = compose(g, f)\r\n        i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-12T00:06:39.560945","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    g = identity\r\n    while i<n:\r\n        g = compose1(g, f)\r\n        i += 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    g = compose(g, f)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":534,"date":"2016-02-08 16:42:49.028481","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))","after":null,"remaining":"5","SubmissionTime":"2016-02-08T16:42:49.028481","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":234,"date":"2016-02-16 20:38:18.721624","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def wrapper(arg):\r\n        if n==1:\r\n            return f(arg)\r\n        else:\r\n            return f(repeated(f, n-1)(arg))\r\n    return wrapper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T20:38:18.721624","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def wrapper(arg):\r\n        if n==1:\r\n            return f(arg)\r\n        else:\r\n            return f(repeated(f, n-1)(arg))\r\n    return wrapper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in wrapper","    return f(repeated(f, n - 1)(arg))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in wrapper","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":655,"date":"2016-02-12 13:41:49.565162","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_tracker(k):\r\n        counter = 1\r\n        while counter<=n:\r\n            k = f(k)\r\n            counter += 1\r\n        return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T13:41:49.565162","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_tracker(k):\r\n        counter = 1\r\n        while counter<=n:\r\n            k = f(k)\r\n            counter += 1\r\n        return k\r\n    return repeated_tracker\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeated_tracker))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-repeated_tracker, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:21:26.173991","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(combiner):\r\n        return f(repeated(f, n-1)(combiner))\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-14T17:21:26.173991","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeater(combiner):\r\n        return f(repeated(f, n-1)(combiner))\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater","    return f(repeated(f, n-1)(combiner))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater","    return f(repeated(f, n-1)(combiner))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater","    return f(repeated(f, n-1)(combiner))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater","    return f(repeated(f, n-1)(combiner))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater","    return f(repeated(f, n-1)(combiner))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater","    return f(repeated(f, n-1)(combiner))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeater","    return f(repeated(f, n-1)(combiner))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":22,"date":"2016-02-16 22:16:29.903581","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-16T22:16:29.903581","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":100,"date":"2016-02-15 10:15:53.209825","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-15T10:15:53.209825","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":284,"date":"2016-02-14 19:23:28.064849","diff":null,"before":"\r\ndef repeated(f, n):\r\n    OG = f\r\n    while n>1:\r\n        f = compose1(OG, f)\r\n        n -= 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T19:23:28.064849","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    OG = f\r\n    while n>1:\r\n        f = compose1(OG, f)\r\n        n -= 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":166,"date":"2016-02-15 16:54:35.728425","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-15T16:54:35.728425","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":566,"date":"2016-02-10 21:15:07.834491","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(i, fn):\r\n        if i==n:\r\n            return fn\r\n        else:\r\n            return lambda x: fn(helper(i+1, fn)(x))\r\n    return helper(0, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"113","SubmissionTime":"2016-02-10T21:15:07.834491","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(i, fn):\r\n        if i==n:\r\n            return identity\r\n        else:\r\n            return lambda x: fn(helper(i+1, fn)(x))\r\n    return helper(0, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":465,"date":"2016-02-15 15:56:56.653168","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 1\r\n        k = f(x)\r\n        while i<n:\r\n            k = f(k)\r\n            i += 1\r\n        return k\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T15:56:56.653168","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeat(x):\r\n        i = 1\r\n        k = f(x)\r\n        while i<n:\r\n            k = f(k)\r\n            i += 1\r\n        return k\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":503,"date":"2016-02-13 14:17:05.630984","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-13T14:17:05.630984","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":588,"date":"2016-02-14 10:27:51.306826","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T10:27:51.306826","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-10 23:34:25.775362","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(f, n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"12","SubmissionTime":"2016-02-10T23:34:25.775362","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":922,"date":"2016-02-14 15:29:10.411529","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = n\r\n        while i>=0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T15:29:10.411529","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":185,"date":"2016-02-15 19:44:36.816893","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    total = f\r\n    while i<n:\r\n        total = compose1(total, f)\r\n        i += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-15T19:44:36.816893","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    total = identity\r\n    while i<n:\r\n        total = compose1(total, f)\r\n        i += 1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-09 02:11:16.274457","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = f\r\n    for i in range(1, n):\r\n        k = compose1(k, f)\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-09T02:11:16.274457","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = f\r\n    for i in range(1, n):\r\n        k = compose1(k, f)\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":522,"date":"2016-02-16 08:37:41.136064","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        def recursive(n):\r\n            if n<2:\r\n                return f(x)\r\n            else:\r\n                return f(recursive(n-1))\r\n        return recursive(n)\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-16T08:37:41.136064","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(x):\r\n        def recursive(n):\r\n            if n<2:\r\n                return f(x)\r\n            else:\r\n                return f(recursive(n-1))\r\n        return recursive(n)\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625","","# Error: expected","#     152587890625t","# but got","#     152587890625","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":641,"date":"2016-02-11 21:10:47.669587","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def much_repeated(x, m):\r\n        if m==1:\r\n            return f(x)\r\n        else:\r\n            return f(much_repeated(x, m-1))\r\n    return lambda j: much_repeated(j, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T21:10:47.669587","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def much_repeated(x, m):\r\n        if m==1:\r\n            return f(x)\r\n        else:\r\n            return f(much_repeated(x, m-1))\r\n    return lambda j: much_repeated(j, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in much_repeated","    return f(much_repeated(x, m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in much_repeated","    if m == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":20,"date":"2016-02-10 22:35:54.250557","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def fun_stuff(first_num):\r\n        def call(num, index):\r\n            print(num)\r\n            if index==n:\r\n                return num\r\n            return call(f(num), index+1)\r\n        return call(first_num, 0)\r\n    return fun_stuff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T22:35:54.250557","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def fun_stuff(first_num):\r\n        def call(num, index):\r\n            print(identity)\r\n            if index==n:\r\n                return num\r\n            return call(f(num), index+1)\r\n        return call(first_num, 0)\r\n    return fun_stuff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","6","7","8","8","","# Error: expected","#     8","# but got","#     5","#     6","#     7","#     8","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":669,"date":"2016-02-15 09:37:36.468536","diff":null,"before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    while n>1:\r\n        function = compose1(function, f)\r\n        n = n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T09:37:36.468536","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    function = f\r\n    while n>1:\r\n        function = compose1(function, f)\r\n        n = n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":85,"date":"2016-02-10 13:32:23.311749","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = n\r\n        g = identity(x)\r\n        while i!=0:\r\n            g = compose1(f, g)\r\n            i -= 1\r\n        return g\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T13:32:23.311749","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        i = n\r\n        g = identity(x)\r\n        while i!=0:\r\n            g = f(g)\r\n            i -= 1\r\n        return g\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x000002984351FEA0>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000002984351FEA0>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":607,"date":"2016-02-15 17:39:36.979020","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T17:39:36.97902","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":30,"date":"2016-02-16 09:09:58.246451","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T09:09:58.246451","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-14 13:13:00.922907","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def returner(x):\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return returner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"33","SubmissionTime":"2016-02-14T13:13:00.922907","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def returner(x):\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return returner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in returner","    return f(repeated(f,n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in returner","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-16 19:47:03.603320","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(x)\r\n    else:\r\n        q = f\r\n        while n>1:\r\n            q = compose1(f, q)\r\n            n -= 1\r\n        return q\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T19:47:03.60332","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        q = f\r\n        while n>1:\r\n            q = compose1(f, q)\r\n            n -= 1\r\n        return q\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":972,"date":"2016-02-14 18:49:58.077145","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>0:\r\n        g = compose1(g, f)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T18:49:58.077145","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(g, f)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":908,"date":"2016-02-14 14:40:56.893731","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T14:40:56.893731","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-11 18:08:56.919544","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T18:08:56.919544","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-helper)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return h","NameError: name 'h' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":75,"date":"2016-02-16 22:27:26.614886","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        counter = n\r\n        while (n!=0):\r\n            x = f(x)\r\n            counter = counter-1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T22:27:26.614886","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        counter = n\r\n        while (counter!=0):\r\n            x = f(x)\r\n            counter = counter-1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-counter)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":197,"date":"2016-02-13 21:07:45.924816","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return (x)\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T21:07:45.924816","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return (x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":369,"date":"2016-02-16 07:31:30.882284","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T07:31:30.882284","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in <lambda>","    return lambda x: f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":402,"date":"2016-02-12 16:18:35.485050","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T16:18:35.48505","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(n-1))","TypeError: repeated() missing 1 required positional argument: 'n'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-11 11:07:32.792412","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def helper(j):\r\n        if n==0:\r\n            return j\r\n        else:\r\n            return compose1(f, repeated(f, n-1)(j))\r\n    return helper","after":null,"remaining":"2","SubmissionTime":"2016-02-11T11:07:32.792412","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    def helper(j):\r\n        if n==0:\r\n            return j\r\n        else:\r\n            return f(repeated(f, n-1)(j))\r\n    return helper","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.compose1.<locals>.h at 0x0000016BC8A3FE18>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.compose1.<locals>.h at 0x0000016BC8A3FE18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 16:41:01.016577","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i, result = 1, f\r\n    if n==0:\r\n        return \r\n    while i<n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T16:41:01.016577","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i, result = 1, f\r\n    if n==0:\r\n        return \r\n    while i<n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":695,"date":"2016-02-15 22:36:15.437674","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T22:36:15.437674","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\"))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(n-1))","TypeError: repeated() missing 1 required positional argument: 'n'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-16 14:32:43.293950","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        return x\r\n    if n==0:\r\n        return helper\r\n    else:\r\n        return repeated(compose1(f, helper), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-16T14:32:43.29395","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        return x\r\n    if n==0:\r\n        return helper\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":248,"date":"2016-02-09 23:10:28.090333","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = f\r\n    counter = 1\r\n    while counter<=n:\r\n        x = compose1(x, f)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-09T23:10:28.090333","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = identity\r\n    counter = 1\r\n    while counter<=n:\r\n        x = compose1(x, f)\r\n        counter += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":874,"date":"2016-02-09 22:32:30.569150","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-09T22:32:30.56915","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":265,"date":"2016-02-13 19:39:34.510907","diff":null,"before":"\r\ndef repeated(f, n):\r\n    f2 = lambda x: x\r\n    f = compose1(f)\r\n    while n>0:\r\n        f2 = compose1(f2, f)\r\n        n -= 1\r\n    return f2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"76","SubmissionTime":"2016-02-13T19:39:34.510907","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    f2 = lambda x: x\r\n    f = identity(f)\r\n    while n>0:\r\n        f2 = compose1(f2, f)\r\n        n -= 1\r\n    return f2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    f = compose1(f)","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":242,"date":"2016-02-15 00:41:10.593513","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def iterator(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, iterator(x-1))\r\n    return iterator(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T00:41:10.593513","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def iterator(x):\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, iterator(x-1))\r\n    return iterator(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in iterator","    return compose1(f, iterator(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in iterator","    if x==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 14:51:06.151467","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 2\r\n    x = f\r\n    while i<=n:\r\n        x = compose1(f, x)\r\n        i += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"36","SubmissionTime":"2016-02-15T14:51:06.151467","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 2\r\n    x = f\r\n    while i<=n:\r\n        x = compose1(f, x)\r\n        i += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:22:45.303457","diff":null,"before":"\r\ndef repeated(f, n):\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-12T14:22:45.303457","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f,repeated(f, n-1))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":252,"date":"2016-02-12 02:41:15.981961","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_counter(f, n):\r\n        if n==0:\r\n            return \r\n        elif n==1:\r\n            return f\r\n        elif n==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(repeated(f, n-1), f)\r\n    return repeated_counter(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-12T02:41:15.981961","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_counter(f, n):\r\n        if n==0:\r\n            return \r\n        elif n==1:\r\n            return f\r\n        elif n==2:\r\n            return compose1(f, f)\r\n        else:\r\n            return compose1(repeated(f, n-1), f)\r\n    return repeated_counter(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1059,"date":"2016-02-09 21:34:44.789762","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if (n==1):\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"22","SubmissionTime":"2016-02-09T21:34:44.789762","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(x):\r\n        if (n==1):\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper","    return f(repeated(f, n-1)(x));","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper","    return f(repeated(f, n-1)(x));","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper","    return f(repeated(f, n-1)(x));","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper","    return f(repeated(f, n-1)(x));","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper","    return f(repeated(f, n-1)(x));","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper","    return f(repeated(f, n-1)(x));","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in helper","    if (n == 1):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":231,"date":"2016-02-16 21:02:05.652051","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = f\r\n    while n>=1:\r\n        k = compose1(f, k)\r\n        n = n-1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"21","SubmissionTime":"2016-02-16T21:02:05.652051","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    k = identity\r\n    while n>=1:\r\n        k = compose1(f, k)\r\n        n = n-1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":68,"date":"2016-02-12 13:07:26.200633","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-12T13:07:26.200633","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":425,"date":"2016-02-16 12:44:02.882718","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        for i in range(n):\r\n            function_to_repeat = f(x)\r\n        return function_to_repeat\r\n    return helper","after":null,"remaining":"1","SubmissionTime":"2016-02-16T12:44:02.882718","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        for i in range(n):\r\n            x = f(x)\r\n        return x\r\n    return helper","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":181,"date":"2016-02-10 12:16:04.466360","diff":null,"before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    while n>0:\r\n        function, n = compose1(function, f), n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-10T12:16:04.46636","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    function = identity\r\n    while n>0:\r\n        function, n = compose1(function, f), n-1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)    ","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":643,"date":"2016-02-16 21:20:45.004658","diff":null,"before":"\r\ndef repeated(f, n):\r\n    function = f\r\n    while n>0:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-16T21:20:45.004658","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    function = identity\r\n    while n>0:\r\n        function = compose1(f, function)\r\n        n -= 1\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:55:10.888840","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def inner(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T19:55:10.88884","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))), 2), Selected(\\x => Match(x, StartsWithTarget(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(LeafWildcard(\"any\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":889,"date":"2016-02-13 19:52:41.760672","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_2(x):\r\n        k = n\r\n        sum5 = x\r\n        while k!=1:\r\n            sum5 = f(sum5)\r\n            k -= 1\r\n        return sum5\r\n    return repeated_2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T19:52:41.760672","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_2(x):\r\n        k = n\r\n        sum5 = x\r\n        while k!=0:\r\n            sum5 = f(sum5)\r\n            k -= 1\r\n        return sum5\r\n    return repeated_2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":76,"date":"2016-02-13 13:49:14.019485","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    new = f\r\n    if n==0:\r\n        return x\r\n    elif n==1:\r\n        return f\r\n    while i<n:\r\n        new = compose1(f, new)\r\n        i += 1\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-13T13:49:14.019485","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    new = f\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    while i<n:\r\n        new = compose1(f, new)\r\n        i += 1\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":64,"date":"2016-02-14 13:25:11.515011","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    elif n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"27","SubmissionTime":"2016-02-14T13:25:11.515011","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    elif n==1:\r\n        return f\r\n    elif n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":183,"date":"2016-02-08 18:52:59.585002","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compute(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"27","SubmissionTime":"2016-02-08T18:52:59.585002","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compute(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return compose1(f, repeated(f, n-1))(x)\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)            # increment(increment(increment(5)))","<function compose1.<locals>.h at 0x000001C86D2E7E18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x000001C86D2E7E18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-10 14:31:19.461595","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = 0\r\n    total = 0\r\n    if x<=n:\r\n        x += n\r\n        return compose1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T14:31:19.461595","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast)))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: compose1() missing 1 required positional argument: 'g'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":953,"date":"2016-02-13 16:25:11.308312","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T16:25:11.308312","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":262,"date":"2016-02-16 20:15:36.262017","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = f\r\n    if k==0:\r\n        return identity\r\n    while n>1:\r\n        k = compose1(f, k)\r\n        n -= 1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T20:15:36.262017","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = f\r\n    if k==0:\r\n        return identity\r\n    while n>1:\r\n        k = compose1(f, k)\r\n        n -= 1\r\n    return k\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":710,"date":"2016-02-08 11:10:15.731804","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-08T11:10:15.731804","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":161,"date":"2016-02-08 11:28:47.453376","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n>1:\r\n        return f(repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T11:28:47.453376","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n>1:\r\n        return compose1(f, repeated(f, n-1))\r\n    else:\r\n        return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":993,"date":"2016-02-17 22:15:52.863947","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(f, i):\r\n        if i==1:\r\n            return f\r\n        else:\r\n            return f(repeater(f, i-1))\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return repeater(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-17T22:15:52.863947","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(f, i):\r\n        if i==1:\r\n            return f\r\n        else:\r\n            return compose1(f, repeater(f, i-1))\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return repeater(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in repeated","    return repeater(f, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(f, i - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeater","    return f(repeater(f, i - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":803,"date":"2016-02-16 09:23:01.291357","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n-1>0:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"31","SubmissionTime":"2016-02-16T09:23:01.291357","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n-1>0:\r\n        n = n-1\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-11 13:52:32.306700","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = 0\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T13:52:32.3067","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":299,"date":"2016-02-12 18:38:56.904567","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def base(i):\r\n        if n==0:\r\n            return i\r\n        else:\r\n            return compose1(f, repeated(f, n-1))\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T18:38:56.904567","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def base(i):\r\n        if n==0:\r\n            return i\r\n        else:\r\n            return compose1(f, repeated(f, n-1))(i)\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-i)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000023D36DBDE18>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000023D36DBDE18>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":567,"date":"2016-02-16 17:42:32.389723","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return \r\n    if n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-16T17:42:32.389723","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return \r\n    if n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":90,"date":"2016-02-10 15:24:40.889696","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        i = 0\r\n        total = repeater(x)\r\n        while i<=n:\r\n            if n==0:\r\n                return total\r\n            else:\r\n                i += 1\r\n                total = f(total)\r\n        return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T15:24:40.889696","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        i = 0\r\n        total = x\r\n        while i<n:\r\n            if n==0:\r\n                return total\r\n            else:\r\n                i += 1\r\n                total = f(total)\r\n        return total\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeater))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-repeater, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-11 21:53:27.538791","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def nrep(x):\r\n        i = n\r\n        while i>=0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return nrep\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T21:53:27.538791","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def nrep(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return nrep\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":997,"date":"2016-02-11 15:27:12.107623","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-11T15:27:12.107623","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":554,"date":"2016-02-08 22:09:01.817404","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def n(x):\r\n        i = k\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return n\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T22:09:01.817404","SynthesizedAfter":"\r\ndef repeated(f, k):\r\n    def n(x):\r\n        i = k\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return n\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\"))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in n","    i = k","NameError: name 'k' is not defined","","# Error: expected","#     8","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":591,"date":"2016-02-13 14:50:26.854080","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return f(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-13T14:50:26.85408","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return f(x)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-16 15:56:23.406158","diff":null,"before":"\r\ndef repeated(f, n):\r\n    adding = f\r\n    while n!=0:\r\n        adding = compose1(adding, f)\r\n        n -= 1\r\n    return adding\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T15:56:23.406158","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    adding = identity\r\n    while n!=0:\r\n        adding = compose1(adding, f)\r\n        n -= 1\r\n    return adding\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":460,"date":"2016-02-09 09:40:25.967056","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        application = 0\r\n        total = x\r\n        while application<=n:\r\n            total = f(total)\r\n            application += 1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T09:40:25.967056","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        application = 1\r\n        total = x\r\n        while application<=n:\r\n            total = f(total)\r\n            application += 1\r\n        return total\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-15 11:57:54.471370","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"49","SubmissionTime":"2016-02-15T11:57:54.47137","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":569,"date":"2016-02-08 21:48:56.121910","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated(k):\r\n        j, result = 0, k\r\n        while j<n:\r\n            result = f(result)\r\n            k += 1\r\n        return result\r\n    return repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T21:48:56.12191","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated(k):\r\n        j, result = 0, k\r\n        while j<n:\r\n            result = f(result)\r\n            j += 1\r\n        return result\r\n    return repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":162,"date":"2016-02-10 19:39:32.983628","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-10T19:39:32.983628","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return \r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in h","    return f(g(x))","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":360,"date":"2016-02-12 02:07:36.123961","diff":null,"before":"\r\ndef repeated(f, n):\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-12T02:07:36.123961","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f, repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    return compose1(f, repeated(f,n-1))","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":319,"date":"2016-02-09 22:54:16.192267","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def layer(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    out = f\r\n    while (n>1):\r\n        out = layer(out, f)\r\n        n -= 1\r\n    return out\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-09T22:54:16.192267","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def layer(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    out = f\r\n    while (n>1):\r\n        out = layer(out, f)\r\n        n -= 1\r\n    return out\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":720,"date":"2016-02-12 18:09:42.595916","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-12T18:09:42.595916","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-15 13:40:14.843626","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-15T13:40:14.843626","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1066,"date":"2016-02-16 03:18:22.181637","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T03:18:22.181637","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":105,"date":"2016-02-15 20:03:32.389103","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def application(value):\r\n        if n==1 or n==2:\r\n            return compose1(f, f)(value)\r\n        else:\r\n            return repeated(f, n-2)(compose1(f, f)(value))\r\n    return application\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T20:03:32.389103","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def application(value):\r\n        if n==0:\r\n            return value\r\n        if n==1:\r\n            return f(value)\r\n        else:\r\n            return repeated(f, n-1)(f(value))\r\n    return application\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-value)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-application, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(OrExpressionNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Target(Node(IfStatementTestNode, TChildren(Node(OrExpressionNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":142,"date":"2016-02-14 11:54:26.100226","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    composition = f\r\n    while i<n:\r\n        i += 1\r\n        composition = compose1(composition, f)\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T11:54:26.100226","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    composition = identity\r\n    while i<n:\r\n        i += 1\r\n        composition = compose1(composition, f)\r\n    return composition\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 11:14:18.871783","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n<1:\r\n        return x\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T11:14:18.871783","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n<1:\r\n        return compose1(identity, identity)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":479,"date":"2016-02-08 23:09:17.093297","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f(b)\r\n    elif n>0:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-08T23:09:17.093297","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    elif n>0:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f , n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f , n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f , n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return f(b)","NameError: name 'b' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":417,"date":"2016-02-10 22:49:13.759807","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def apply_func(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            y, a = 1, x\r\n            while y<=n:\r\n                a = compose1(f, a)\r\n                y += 1\r\n            return a\r\n    return apply_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T22:49:13.759807","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def apply_func(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            y, a = 1, x\r\n            while y<=n:\r\n                a = f(a)\r\n                y += 1\r\n            return a\r\n    return apply_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(LeafWildcard(\"any\"))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function compose1.<locals>.h at 0x0000010A4CB01EA0>","","# Error: expected","#     8","# but got","#     <function compose1.<locals>.h at 0x0000010A4CB01EA0>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":132,"date":"2016-02-13 13:59:05.904771","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-13T13:59:05.904771","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-11 06:18:52.804439","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(x)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        def compose1(f, g):\r\n            def h(x):\r\n                return f(g(x))\r\n            return h\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T06:18:52.804439","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        def compose1(f, g):\r\n            def h(x):\r\n                return f(g(x))\r\n            return h\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return identity(x)","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":550,"date":"2016-02-15 03:18:18.510371","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def step(x, z = n):\r\n        if z==0:\r\n            return f()\r\n        else:\r\n            return f(step(x, z-1))\r\n    return step\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T03:18:18.510371","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def step(x, z = n):\r\n        if z==0:\r\n            return x\r\n        else:\r\n            return f(step(x, z-1))\r\n    return step\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-x), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ReturnStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in step","    return f(step(x,z - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in step","    return f(step(x,z - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in step","    return f(step(x,z - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in step","    return f()","TypeError: increment() missing 1 required positional argument: 'x'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-11 15:03:02.633184","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    func = f\r\n    while i<n:\r\n        func = compose1(f, func)\r\n        i += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T15:03:02.633184","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    func = identity\r\n    while i<n:\r\n        func = compose1(f, func)\r\n        i += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":853,"date":"2016-02-13 15:15:06.720174","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        returnFunc = compose1(f, f)\r\n        if n>2:\r\n            returnFunc = compose1(f, returnFunc)\r\n        return returnFunc\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T15:15:06.720174","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        returnFunc = compose1(f, f)\r\n        while n>2:\r\n            returnFunc = compose1(f, returnFunc)\r\n            n -= 1\r\n        return returnFunc\r\n    else:\r\n        return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","27","","# Error: expected","#     243","# but got","#     27","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-16 20:50:47.800255","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = 0\r\n        while k<n:\r\n            x, k = compose1(f, n), k+1\r\n            return x\r\n        return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T20:50:47.800255","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        k = 0\r\n        while k<n:\r\n            x, k = f(x), k+1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-h))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":911,"date":"2016-02-15 12:10:07.870788","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        g = f\r\n        while n>1:\r\n            f = compose1(f, g)\r\n            n -= 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-15T12:10:07.870788","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        g = f\r\n        while n>1:\r\n            f = compose1(f, g)\r\n            n -= 1\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 00:51:45.924632","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return f(n)\r\n    else:\r\n        n -= 1\r\n        return compose1(f, f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"76","SubmissionTime":"2016-02-15T00:51:45.924632","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":187,"date":"2016-02-08 19:45:27.434292","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-08T19:45:27.434292","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-16 12:11:18.675899","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    if n==0:\r\n        return x\r\n    result = f\r\n    while k<n:\r\n        result = compose1(result, f)\r\n        k += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T12:11:18.675899","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    k = 1\r\n    if n==0:\r\n        return identity\r\n    result = f\r\n    while k<n:\r\n        result = compose1(result, f)\r\n        k += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":270,"date":"2016-02-15 19:52:01.948189","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-15T19:52:01.948189","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":832,"date":"2016-02-13 16:08:25.656340","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper_function(x):\r\n        if n==0:\r\n            return x\r\n        counter = 1\r\n        function = f(x)\r\n        while counter<=n:\r\n            counter += 1\r\n            function = f(function)\r\n        return function\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T16:08:25.65634","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper_function(x):\r\n        if n==0:\r\n            return x\r\n        counter = 1\r\n        function = identity(x)\r\n        while counter<=n:\r\n            counter += 1\r\n            function = f(function)\r\n        return function\r\n    return helper_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-14 19:53:47.491870","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T19:53:47.49187","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":901,"date":"2016-02-08 20:10:17.733597","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = n\r\n    def applyrepeated(x):\r\n        if a==0:\r\n            return x\r\n        a -= 1\r\n        return f(applyrepeated(x))\r\n    return applyrepeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T20:10:17.733597","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = n\r\n    def applyrepeated(x, a = n):\r\n        if a==0:\r\n            return x\r\n        return f(applyrepeated(x, a-1))\r\n    return applyrepeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(ParameterNode-a, SingleChild(LeafConstNode(NameExpressionNode-n))), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Target(Node(FunctionDefinitionNode-applyrepeated, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-applyrepeated, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-a), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in applyrepeated","    if a == 0:","UnboundLocalError: local variable 'a' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":464,"date":"2016-02-11 14:38:03.930435","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func = f\r\n    while n>=1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-11T14:38:03.930435","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    func = identity\r\n    while n>=1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":362,"date":"2016-02-14 22:15:32.954713","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 1\r\n    intermediate = identity\r\n    while i<n:\r\n        intermediate = compose1(f, intermediate)\r\n        i += 1\r\n    return intermediate\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T22:15:32.954713","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    i = 0\r\n    intermediate = identity\r\n    while i<n:\r\n        intermediate = compose1(f, intermediate)\r\n        i += 1\r\n    return intermediate\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1032,"date":"2016-02-10 22:46:41.884917","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T22:46:41.884917","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-12 10:59:39.402832","diff":null,"before":"\r\ndef repeated(f, n):\r\n    composite = compose1(f, f)\r\n    composite2 = compose1(f, composite)\r\n    while n>0:\r\n        composite2 = compose1(f, composite2)\r\n        n -= 1\r\n    return composite2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"19","SubmissionTime":"2016-02-12T10:59:39.402832","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    composite = compose1(f, f)\r\n    composite2 = compose1(identity, identity)\r\n    while n>0:\r\n        composite2 = compose1(f, composite2)\r\n        n -= 1\r\n    return composite2\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","11","","# Error: expected","#     8","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":91,"date":"2016-02-10 11:43:37.224330","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(f, f)\r\n    else:\r\n        return repeated(repeated(f, n), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-10T11:43:37.22433","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return repeated(repeated(f, n), n-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":806,"date":"2016-02-08 07:51:39.466741","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-08T07:51:39.466741","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return lambda x: f(x)\r\n    return lambda x: f(repeated(f, n-1)(x))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>","    return lambda x:f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>","    return lambda x:f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>","    return lambda x:f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>","    return lambda x:f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>","    return lambda x:f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in <lambda>","    return lambda x:f(repeated(f, n-1)(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":542,"date":"2016-02-15 19:33:12.753937","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = n\r\n    g = compose1(f, f)\r\n    while x>0:\r\n        g = compose1(g, f)\r\n        x -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-15T19:33:12.753937","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    x = n\r\n    g = compose1(identity, identity)\r\n    while x>0:\r\n        g = compose1(g, f)\r\n        x -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":845,"date":"2016-02-08 20:04:39.688948","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(fn, x):\r\n        if x==0:\r\n            return x\r\n        else:\r\n            return fn(repeater(fn, x-1))\r\n    return repeater(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-08T20:04:39.688948","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(fn, x):\r\n        if x==0:\r\n            return compose1(identity, identity)\r\n        else:\r\n            return compose1(fn, repeater(fn, x-1))\r\n    return repeater(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":528,"date":"2016-02-16 19:56:49.947056","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T19:56:49.947056","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":869,"date":"2016-02-13 21:31:55.142139","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(e, t):\r\n        if n==0:\r\n            return f\r\n        elif t==n:\r\n            return f\r\n        else:\r\n            return compose1(f, helper(f, t+1))\r\n    return helper(f, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T21:31:55.142139","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(e, t):\r\n        if n==0:\r\n            return identity\r\n        elif t==n:\r\n            return f\r\n        else:\r\n            return compose1(f, helper(f, t+1))\r\n    return helper(f, 1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":313,"date":"2016-02-15 15:17:33.549372","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        i = n\r\n        while n>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T15:17:33.549372","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        j = n\r\n        while j>0:\r\n            x = f(x)\r\n            j -= 1\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-j)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     8","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":57,"date":"2016-02-13 19:11:46.953365","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        i = 1\r\n        while i<=n:\r\n            current_function = f(x)\r\n            i += 1\r\n        return current_function\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T19:11:46.953365","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(current_function):\r\n        i = 1\r\n        while i<=n:\r\n            current_function = f(current_function)\r\n            i += 1\r\n        return current_function\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ParameterNode-current_function)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeater, TChildren(Target(LeafWildcard(\"ParameterNode\")), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-current_function)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","6","","# Error: expected","#     8","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":436,"date":"2016-02-11 22:48:35.867582","diff":null,"before":"\r\ndef repeated(f, n):\r\n    counter = n\r\n    def helper(m):\r\n        while counter>0:\r\n            if counter==1:\r\n                m = f(m)\r\n                counter -= 1\r\n            else:\r\n                m = compose1(f, f)(m)\r\n                counter -= 2\r\n        return m\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T22:48:35.867582","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(m):\r\n        i = n\r\n        while i>0:\r\n            if i==1:\r\n                m = f(m)\r\n                i -= 1\r\n            else:\r\n                m = compose1(f, f)(m)\r\n                i -= 2\r\n        return m\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-helper, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-i)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in helper","    while counter > 0:","UnboundLocalError: local variable 'counter' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":241,"date":"2016-02-13 13:19:58.196374","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def h(x):\r\n        return f(repeated(f, n-1))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T13:19:58.196374","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def h(x):\r\n        return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in h","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":400,"date":"2016-02-15 00:44:07.071488","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def donothing(n):\r\n        return n\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    newfunc = f\r\n    count = 1\r\n    while count<n:\r\n        newfunc = compose1(f, newfunc)\r\n        count += 1\r\n    return newfunc","after":null,"remaining":"3","SubmissionTime":"2016-02-15T00:44:07.071488","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def donothing(n):\r\n        return n\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    newfunc = f\r\n    count = 1\r\n    while count<n:\r\n        newfunc = compose1(f, newfunc)\r\n        count += 1\r\n    return newfunc","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":671,"date":"2016-02-14 08:57:44.472079","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return x\r\n    if n==1:\r\n        return f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T08:57:44.472079","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":927,"date":"2016-02-10 11:46:15.221764","diff":null,"before":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    func = f\r\n    while count<=n:\r\n        func = compose1(func, f)\r\n        count += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T11:46:15.221764","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    count = 1\r\n    func = identity\r\n    while count<=n:\r\n        func = compose1(func, f)\r\n        count += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":27,"date":"2016-02-10 15:29:31.005737","diff":null,"before":"\r\ndef repeated(f, n):\r\n    x = n\r\n    func = f\r\n    while x>1:\r\n        func = compose1(func, f)\r\n        x -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-10T15:29:31.005737","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    x = n\r\n    func = f\r\n    while x>1:\r\n        func = compose1(func, f)\r\n        x -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":87,"date":"2016-02-13 14:28:23.816482","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return f(n)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-13T14:28:23.816482","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(x):\r\n        if n==0:\r\n            return f(n)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","4","","# Error: expected","#     8","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":777,"date":"2016-02-14 16:11:34.152311","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T16:11:34.152311","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n<1:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return f(repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:14:15.544999","diff":null,"before":"\r\ndef repeated(f, n):\r\n    result = 0\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f(identity)\r\n    else:\r\n        resut = compose1(repeated(f, n-1), f)\r\n        return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-16T20:14:15.544999","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result = 0\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    resut = compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    resut = compose1(repeated(f, n-1), f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(identity)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":304,"date":"2016-02-13 16:09:57.904530","diff":null,"before":"\r\ndef repeated(f, n):\r\n    t = 1\r\n    func = compose1(f, f)\r\n    while t<=n:\r\n        func = compose1(f, func)\r\n        t += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-13T16:09:57.90453","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    t = 1\r\n    func = compose1(identity, identity)\r\n    while t<=n:\r\n        func = compose1(f, func)\r\n        t += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":278,"date":"2016-02-16 12:16:24.032147","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    f_next = f\r\n    while i<=n:\r\n        f_next = compose1(f_next, f)\r\n        i += 1\r\n    return f_next\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T12:16:24.032147","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i = 1\r\n    f_next = identity\r\n    while i<=n:\r\n        f_next = compose1(f_next, f)\r\n        i += 1\r\n    return f_next\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":721,"date":"2016-02-17 21:56:37.846505","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func = lambda x: f(x)\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-17T21:56:37.846505","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    func = lambda x: f(x)\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return lambda x: f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":735,"date":"2016-02-13 00:32:58.204901","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f(n)\r\n    else:\r\n        s = compose1(f, f)\r\n        while n>2:\r\n            s = f(s)\r\n            n -= 1\r\n        return s\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T00:32:58.204901","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    elif n==1:\r\n        return f(finalfunc)\r\n    else:\r\n        s = compose1(f, f)\r\n        while n>2:\r\n            s = compose1(f, s)\r\n            n -= 1\r\n        return s\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-finalfunc)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in repeated","    s = f(s)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":659,"date":"2016-02-15 23:36:14.844590","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T23:36:14.84459","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":758,"date":"2016-02-14 17:58:04.665276","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def s(x):\r\n        s = identity\r\n        for i in range(1, n+1):\r\n            s = f(s(x))\r\n        return s(x)\r\n    return s\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"9","SubmissionTime":"2016-02-14T17:58:04.665276","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def s(x):\r\n        s = identity\r\n        for i in range(1, n+1):\r\n            x = f(s(x))\r\n        return s(x)\r\n    return s\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in s","    s = f(s(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":353,"date":"2016-02-11 17:11:01.027557","diff":null,"before":"\r\ndef repeated(f, n):\r\n    count = n\r\n    def times(x):\r\n        temp_value = x\r\n        while count:\r\n            temp_value = f(temp_value)\r\n            count -= 1\r\n        return temp_value\r\n    return times\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T17:11:01.027557","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def times(x):\r\n        temp_value = x\r\n        count = n\r\n        while count:\r\n            temp_value = f(temp_value)\r\n            count -= 1\r\n        return temp_value\r\n    return times\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-times, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-times, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-count), SingleChild(LeafConstNode(NameExpressionNode-n)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-times, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(WhileStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in times","    while count:","UnboundLocalError: local variable 'count' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":189,"date":"2016-02-09 00:38:21.349470","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        counter = 1\r\n        while counter<n:\r\n            x = f(x)\r\n            counter += 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-09T00:38:21.34947","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        counter = 0\r\n        while counter<n:\r\n            x = f(x)\r\n            counter += 1\r\n        return x\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-14 17:08:12.980529","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T17:08:12.980529","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    elif n==0:\r\n        return identity\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f, repeated(f, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f, repeated(f, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f, repeated(f, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f, repeated(f, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f, repeated(f, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return compose1(f, repeated(f, n))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":188,"date":"2016-02-16 19:18:48.902505","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def func(value):\r\n        i = 1\r\n        result = f(value)\r\n        while i<n:\r\n            result = f(result)\r\n            i += 1\r\n        return result\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-16T19:18:48.902505","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def func(value):\r\n        i = 1\r\n        result = f(value)\r\n        while i<n:\r\n            result = f(result)\r\n            i += 1\r\n        return result\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":926,"date":"2016-02-16 15:59:35.352934","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(f, n):\r\n        if n==0:\r\n            return lambda input_a: input_a\r\n        b = f\r\n        while n>=2:\r\n            b = compose1(f, b)\r\n            n -= 1\r\n        return g\r\n    return helper(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T15:59:35.352934","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def helper(f, n):\r\n        if n==0:\r\n            return lambda input_a: input_a\r\n        b = f\r\n        while n>=2:\r\n            b = compose1(f, b)\r\n            n -= 1\r\n        return b\r\n    return helper(f, n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-b)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return helper(f, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper","    return g","NameError: name 'g' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":678,"date":"2016-02-14 22:25:04.415170","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def eff(x):\r\n        y = f(x)\r\n        for i in range(n-1):\r\n            y = f(y)\r\n        return (y)\r\n    return eff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T22:25:04.41517","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def eff(x):\r\n        y = f(x)\r\n        for i in range(n-1):\r\n            y = f(y)\r\n        return (y)\r\n    return eff\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":163,"date":"2016-02-16 09:43:26.119863","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(n)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T09:43:26.119863","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity(identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":408,"date":"2016-02-16 18:49:26.995480","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def pooh(x):\r\n        k = n\r\n        if k==0:\r\n            return x\r\n        if k==1:\r\n            return f(x)\r\n        h = f\r\n        while k>1:\r\n            h = compose1(f, f)\r\n            k -= 1\r\n        return h(x)\r\n    return pooh\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T18:49:26.99548","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def pooh(x):\r\n        k = n\r\n        if k==0:\r\n            return x\r\n        if k==1:\r\n            return f(x)\r\n        h = f\r\n        while k>1:\r\n            h = compose1(h, f)\r\n            k -= 1\r\n        return h(x)\r\n    return pooh\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-14 17:38:05.633566","diff":null,"before":"\r\ndef repeated(f, n):\r\n    counter = n\r\n    if n==0:\r\n        return n\r\n    def fxn(num):\r\n        return num\r\n    while (counter>0):\r\n        fxn = compose1(f, fxn)\r\n        counter -= 1\r\n    return fxn\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T17:38:05.633566","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    counter = n\r\n    if identity==0:\r\n        return n\r\n    def fxn(num):\r\n        return num\r\n    while (counter>0):\r\n        fxn = compose1(f, fxn)\r\n        counter -= 1\r\n    return fxn\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-12 15:30:42.561736","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def inner(x):\r\n        def helper(total, n):\r\n            if n==0:\r\n                return n\r\n            if n==1:\r\n                return f(total)\r\n            return helper(f(total), n-1)\r\n        return helper(x, n)\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-12T15:30:42.561736","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def inner(x):\r\n        def helper(total, n):\r\n            if n==0:\r\n                return x\r\n            if n==1:\r\n                return f(total)\r\n            return helper(f(total), n-1)\r\n        return helper(x, n)\r\n    return inner\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-x)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":766,"date":"2016-02-09 20:08:53.970633","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        elif n==1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-09T20:08:53.970633","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        if n==0:\r\n            return x\r\n        elif n==1:\r\n            return f(x)\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in h","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1056,"date":"2016-02-16 14:10:16.940254","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T14:10:16.940254","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    while n>0:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":560,"date":"2016-02-13 21:17:20.920516","diff":null,"before":"\r\ndef repeated(f, n):\r\n    finalfunc = identity\r\n    x = 1\r\n    while x<=n:\r\n        finalfunc = f(identity)\r\n        x += 1\r\n    return finalfunc\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T21:17:20.920516","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    finalfunc = identity\r\n    x = 1\r\n    while x<=n:\r\n        finalfunc = compose1(f, finalfunc)\r\n        x += 1\r\n    return finalfunc\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-finalfunc)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    finalfunc = f(identity)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 10:36:03.584563","diff":null,"before":"\r\ndef repeated(f, n):\r\n    superFunction = f\r\n    def functionMaker(f, n, superFunction):\r\n        if n>0:\r\n            superFunction = compose1(f, superFunction)\r\n            n = n-1\r\n            return functionMaker(f, n, superFunction)\r\n        else:\r\n            return superFunction\r\n    return functionMaker(f, n, superFunction)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-16T10:36:03.584563","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    superFunction = identity\r\n    def functionMaker(f, n, superFunction):\r\n        if n>0:\r\n            superFunction = compose1(f, superFunction)\r\n            n = n-1\r\n            return functionMaker(f, n, superFunction)\r\n        else:\r\n            return superFunction\r\n    return functionMaker(f, n, superFunction)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":576,"date":"2016-02-15 21:54:10.205422","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 0\r\n        h = f\r\n        while i<n:\r\n            h = compose1(h, f)\r\n            i += 1\r\n        return h(x)\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T21:54:10.205422","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeat(x):\r\n        i = 0\r\n        h = identity\r\n        while i<n:\r\n            h = compose1(h, f)\r\n            i += 1\r\n        return h(x)\r\n    return repeat\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 13:37:00.353707","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    for i in range(0, n):\r\n        identity = compose1(f, identity)\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T13:37:00.353707","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def identity(x):\r\n        return x\r\n    for i in range(0, n):\r\n        identity = compose1(f, identity)\r\n    return identity\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return result","NameError: name 'result' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 01:45:18.346490","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = lambda x: x\r\n    while n>=0:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T01:45:18.34649","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = lambda x: x\r\n    while n>=1:\r\n        a = compose1(a, f)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-15 22:40:17.548207","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n>=1:\r\n            return compose1(f, repeated(f, n-1))\r\n        else:\r\n            return x\r\n    return repeated_helper(x)\r\n    result = repeated(square, 3)(2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-15T22:40:17.548207","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeated_helper(x):\r\n        if n>=1:\r\n            return compose1(f, repeated(f, n-1))\r\n        else:\r\n            return x\r\n    return repeated_helper(identity)\r\n    result = repeated(square, 3)(2)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return repeated_helper(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 17:12:01.823157","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T17:12:01.823157","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":924,"date":"2016-02-14 13:50:56.568655","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def apply(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            while n>0:\r\n                x = f(x)\r\n                n = n-1\r\n            return x\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-14T13:50:56.568655","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def apply(x):\r\n        c = n\r\n        if c==0:\r\n            return x\r\n        else:\r\n            while c>0:\r\n                x = f(x)\r\n                c = c-1\r\n            return x\r\n    return apply\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-c), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-apply, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-c)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in apply","    if n == 0:","UnboundLocalError: local variable 'n' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":323,"date":"2016-02-08 21:12:37.486825","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-08T21:12:37.486825","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":687,"date":"2016-02-15 10:35:01.529766","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        x = compose1(f, f)\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"24","SubmissionTime":"2016-02-15T10:35:01.529766","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        x = compose1(f, f)\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":636,"date":"2016-02-15 17:04:18.291118","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        a = n-1\r\n        b = f(x)\r\n        while a>0:\r\n            b = f(b)\r\n            a = a-1\r\n        return b\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-15T17:04:18.291118","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def h(x):\r\n        a = n-1\r\n        b = f(x)\r\n        while a>0:\r\n            b = f(b)\r\n            a = a-1\r\n        return b\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":949,"date":"2016-02-15 09:47:13.214380","diff":null,"before":"\r\ndef repeated(f, n):\r\n    times = n\r\n    def base(x):\r\n        if times==0:\r\n            return x\r\n        else:\r\n            while times!=0:\r\n                x = f(x)\r\n                times -= 1\r\n        return x\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T09:47:13.21438","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def base(x):\r\n        times = n\r\n        if times==0:\r\n            return x\r\n        else:\r\n            while times!=0:\r\n                x = f(x)\r\n                times -= 1\r\n        return x\r\n    return base\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(FunctionDefinitionNode-base, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(FunctionDefinitionNode-base, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-times), SingleChild(LeafConstNode(NameExpressionNode-n)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-base, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-NotEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in base","    if times == 0:          #if the nth applicatio of f is 0, then just return x","UnboundLocalError: local variable 'times' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":175,"date":"2016-02-10 18:56:11.326631","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose(g, h):\r\n        def func(x):\r\n            return g(h(x))\r\n        return func\r\n    if n==0:\r\n        return n\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-10T18:56:11.326631","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compose(g, h):\r\n        def func(x):\r\n            return g(h(x))\r\n        return func\r\n    if n==0:\r\n        return identity\r\n    elif n==1:\r\n        return f\r\n    else:\r\n        return compose(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":173,"date":"2016-02-11 23:08:30.466285","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for i in range(1, n):\r\n        f = compose1(g, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T23:08:30.466285","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    for i in range(1, n):\r\n        f = compose1(g, f)\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-11 18:29:38.750850","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        k = 0\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T18:29:38.75085","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k = k+1\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":740,"date":"2016-02-16 22:39:51.773641","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    if n==1:\r\n        return f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T22:39:51.773641","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==0:\r\n        return f(x)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return compose1(f, repeated(f, n -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in repeated","    return compose1(f, repeated(f, n -1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(x)","NameError: name 'x' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":612,"date":"2016-02-13 00:08:45.796587","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T00:08:45.796587","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3","Traceback (most recent call last):","    add_three = repeated(increment, 3","                                    ^","SyntaxError: unexpected EOF while parsing","","# Error: expected","#     ","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-15 21:36:19.513747","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"15","SubmissionTime":"2016-02-15T21:36:19.513747","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":558,"date":"2016-02-14 15:20:49.889766","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: f(x)\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-14T15:20:49.889766","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":813,"date":"2016-02-16 22:47:22.987093","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: f(x)\r\n    return lambda y: f(repeated(f, n-1)(y))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T22:47:22.987093","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: identity(x)\r\n    return lambda y: f(repeated(f, n-1)(y))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":552,"date":"2016-02-10 12:47:46.839069","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def new(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1))\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-10T12:47:46.839069","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def new(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return new\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x)))))), 0), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(LeafWildcard(\"ArgNode\"), TChild(LeafWildcard(\"ArgNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"any\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in new","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 22:04:04.012152","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n>1:\r\n        qwer = repeated(f, n-1)\r\n        return lambda x: f(qwer(x))\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T22:04:04.012152","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n>1:\r\n        qwer = repeated(f, n-1)\r\n        return lambda x: f(qwer(x))\r\n    return f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":484,"date":"2016-02-15 22:56:06.180346","diff":null,"before":"\r\ndef repeated(f, n):\r\n    result = f\r\n    while n>0:\r\n        result = compose1(result, f)\r\n        n = n-1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-15T22:56:06.180346","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result = identity\r\n    while n>0:\r\n        result = compose1(result, f)\r\n        n = n-1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":332,"date":"2016-02-09 14:30:03.210710","diff":null,"before":"\r\ndef repeated(f, n):\r\n    a = compose1(f, f)\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-09T14:30:03.21071","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    a = compose1(identity, identity)\r\n    while n>0:\r\n        a = compose1(f, a)\r\n        n -= 1\r\n    return a\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","10","","# Error: expected","#     8","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":859,"date":"2016-02-16 12:10:08.453043","diff":null,"before":"\r\ndef repeated(f, n):\r\n    k = 2\r\n    x = compose1(f, f)\r\n    while k<n:\r\n        x = compose1(x, f)\r\n        k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-16T12:10:08.453043","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    k = 2\r\n    x = compose1(f, f)\r\n    while k<n:\r\n        x = compose1(x, f)\r\n        k += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","625","","# Error: expected","#     5","# but got","#     625","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":676,"date":"2016-02-14 15:52:05.228717","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-14T15:52:05.228717","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":129,"date":"2016-02-15 09:33:32.850174","diff":null,"before":"\r\ndef repeated(f, n):\r\n    help = f\r\n    for i in range(0, n):\r\n        help = compose1(f, help)\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T09:33:32.850174","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    help = identity\r\n    for i in range(0, n):\r\n        help = compose1(f, help)\r\n    return help\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":713,"date":"2016-02-10 20:58:32.280849","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeated_function(value):\r\n        if (n==1):\r\n            return f(value)\r\n        else:\r\n            return f(repeated(f, n-1)(value))\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"25","SubmissionTime":"2016-02-10T20:58:32.280849","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def repeated_function(value):\r\n        if (n==1):\r\n            return f(value)\r\n        else:\r\n            return f(repeated(f, n-1)(value))\r\n    return repeated_function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function","    return f(repeated(f, n-1)(value))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function","    return f(repeated(f, n-1)(value))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function","    return f(repeated(f, n-1)(value))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function","    return f(repeated(f, n-1)(value))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function","    return f(repeated(f, n-1)(value))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated_function","    return f(repeated(f, n-1)(value))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated_function","    if (n == 1):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":716,"date":"2016-02-12 14:02:51.215918","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = h(x)\r\n            i += 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"72","SubmissionTime":"2016-02-12T14:02:51.215918","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = 1\r\n        while i<=n:\r\n            x = f(x)\r\n            i += 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    x = h(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    x = h(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    x = h(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    x = h(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    x = h(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    x = h(x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in h","    while i <= n:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     8","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:11:28.878701","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i, repeat = 1, x\r\n        while i<=n:\r\n            repeat = f(repeat)\r\n            i += 1\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T14:11:28.878701","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i, repeat = 1, x\r\n        while i<=n:\r\n            repeat = f(repeat)\r\n            i += 1\r\n        return repeat\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-repeat))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-h, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":515,"date":"2016-02-15 17:06:52.632397","diff":null,"before":"\r\ndef repeated(f, n):\r\n    total = f\r\n    k = 2\r\n    while k<=n:\r\n        total = compose1(f, total)\r\n        k = k+1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-15T17:06:52.632397","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    total = f\r\n    k = 2\r\n    while k<=n:\r\n        total = compose1(f, total)\r\n        k = k+1\r\n    return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":272,"date":"2016-02-13 22:32:01.698141","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i = 0\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            while i<=n:\r\n                x = f(x)\r\n        return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T22:32:01.698141","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def func(x):\r\n        if n==0:\r\n            return x\r\n        else:\r\n            i = 0\r\n            while i<n:\r\n                x = f(x)\r\n                i += 1\r\n        return x\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-func))), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(FunctionDefinitionNode-func, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))), InOrderSort(ast)))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-14 00:50:31.332701","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = n\r\n        while i>0:\r\n            i -= 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T00:50:31.332701","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def h(x):\r\n        i = n\r\n        while i>0:\r\n            x = f(x)\r\n            i -= 1\r\n        return x\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-x), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-f), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-x))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","5","","# Error: expected","#     8","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 12:03:12.524243","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return f\r\n    else:\r\n        return f(repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"37","SubmissionTime":"2016-02-15T12:03:12.524243","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return compose1(identity, identity)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-compose1), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-identity))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-compose1), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return f(repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 14, in increment","    return x + 1","TypeError: unsupported operand type(s) for +: 'function' and 'int'","","# Error: expected","#     ","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":97,"date":"2016-02-10 14:25:58.101207","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def r(x):\r\n        if x==0:\r\n            return f(p)\r\n        else:\r\n            return compose1(f, r(x-1))\r\n    return r(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-10T14:25:58.101207","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def r(x):\r\n        if x==0:\r\n            return identity\r\n        if x==1:\r\n            return f\r\n        else:\r\n            return compose1(f, r(x-1))\r\n    return r(n)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-x), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-r, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChild(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    return r(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in r","    return compose1(f,r(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in r","    return compose1(f,r(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in r","    return compose1(f,r(x-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in r","    return f(p)","NameError: name 'p' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":322,"date":"2016-02-14 23:15:42.262345","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def helper(x):\r\n        if n==0:\r\n            return 0\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return repeated(f, n-1)(f(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-14T23:15:42.262345","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def helper(x):\r\n        if n==0:\r\n            return 0\r\n        if n==1:\r\n            return f(x)\r\n        else:\r\n            return repeated(f, n-1)(f(x))\r\n    return helper\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","0","","# Error: expected","#     5","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":600,"date":"2016-02-10 14:27:02.763083","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return repeated(compose(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-10T14:27:02.763083","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return repeated(compose(f,f),n-1)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":673,"date":"2016-02-13 07:50:33.450531","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return f(n)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"14","SubmissionTime":"2016-02-13T07:50:33.450531","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==0:\r\n        return f(n)\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(g(x))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1070,"date":"2016-02-13 15:11:12.148899","diff":null,"before":"\r\ndef repeated(f, n):\r\n    h = f\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    for x in range(n):\r\n        h = compose1(f, h)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-13T15:11:12.148899","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    h = identity\r\n    def compose1(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    for x in range(n):\r\n        h = compose1(f, h)\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":167,"date":"2016-02-16 12:44:55.216526","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def innerFunction(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k += 1\r\n    return innerFunction\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-16T12:44:55.216526","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def innerFunction(x):\r\n        k = 1\r\n        while k<=n:\r\n            x = f(x)\r\n            k += 1\r\n        return x\r\n    return innerFunction\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-x))), 2), Selected(\\x => Match(x, StartsWithTarget(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(LeafWildcard(\"any\"), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1006,"date":"2016-02-10 17:37:39.714612","diff":null,"before":"\r\ndef repeated(f, n):\r\n    while n>1:\r\n        h = compose1(f, f)\r\n        n -= 1\r\n    def evaluated(x):\r\n        if n==0:\r\n            return x\r\n        return h(x)\r\n    return evaluated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T17:37:39.714612","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    h = f\r\n    while n>1:\r\n        h = compose1(h, f)\r\n        n -= 1\r\n    def evaluated(x):\r\n        if n==0:\r\n            return x\r\n        return h(x)\r\n    return evaluated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(AssignmentStatementNode, Children(LeafConstNode(NameExpressionNode-h), SingleChild(LeafConstNode(NameExpressionNode-f)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-repeated, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChildren(Node(FunctionDefinitionNode-evaluated, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-h)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":209,"date":"2016-02-15 00:39:43.085414","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def outer(base):\r\n        x = n\r\n        while (x>0):\r\n            base = f(base)\r\n            x -= 1\r\n    return outer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-15T00:39:43.085414","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def outer(base):\r\n        x = n\r\n        while (x>0):\r\n            base = f(base)\r\n            x -= 1\r\n        return base\r\n    return outer\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-base))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-outer, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(WhileStatementNode, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 21:55:11.784887","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func = f\r\n    while n>1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-14T21:55:11.784887","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    func = f\r\n    while n>1:\r\n        func = compose1(f, func)\r\n        n -= 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-14 12:59:20.796986","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def applier(a):\r\n        c = 1\r\n        out = a\r\n        while c!=n:\r\n            out = f(out)\r\n            c += 1\r\n        return out\r\n    return applier\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-14T12:59:20.796986","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def applier(a):\r\n        c = 0\r\n        out = a\r\n        while c!=n:\r\n            out = f(out)\r\n            c += 1\r\n        return out\r\n    return applier\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","7","","# Error: expected","#     8","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":822,"date":"2016-02-13 13:22:31.675222","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for _ in range(n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-13T13:22:31.675222","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    for _ in range(n):\r\n        g = compose1(f, g)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":374,"date":"2016-02-11 14:20:37.924157","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(repeated(f, n), repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-11T14:20:37.924157","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithTarget(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithTarget(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"any\")))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(repeated(f, n), repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     ","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":582,"date":"2016-02-14 12:47:36.643407","diff":null,"before":"\r\ndef repeated(f, n):\r\n    new_func = lambda x: x\r\n    while n>=0:\r\n        new_func = compose1(f, new_func)\r\n        n -= 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"5","SubmissionTime":"2016-02-14T12:47:36.643407","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    new_func = lambda x: x\r\n    while n>=1:\r\n        new_func = compose1(f, new_func)\r\n        n -= 1\r\n    return new_func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-11 21:02:50.811934","diff":null,"before":"\r\ndef repeated(f, n):\r\n    new_f = f\r\n    while n>0:\r\n        new_f = compose1(f, new_f)\r\n        n -= 1\r\n    return new_f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-11T21:02:50.811934","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    new_f = identity\r\n    while n>0:\r\n        new_f = compose1(f, new_f)\r\n        n -= 1\r\n    return new_f\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":463,"date":"2016-02-16 10:31:15.674418","diff":null,"before":"\r\ndef repeated(f, n):\r\n    finalh = 0\r\n    base = n\r\n    def repeated_helper(f, n, finalh):\r\n        if n==base:\r\n            finalh = compose1(f, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n        elif n==1:\r\n            return finalh\r\n        elif n>1:\r\n            finalh = compose1(finalh, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n    return repeated_helper(f, n, finalh)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-16T10:31:15.674418","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    finalh = 0\r\n    base = n\r\n    def repeated_helper(f, n, finalh):\r\n        if n==base:\r\n            finalh = compose1(f, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n        elif n==1:\r\n            return finalh\r\n        elif n>1:\r\n            finalh = compose1(finalh, f)\r\n            return repeated_helper(f, n-1, finalh)\r\n    return repeated_helper(f, n, finalh)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'NoneType' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":202,"date":"2016-02-09 07:55:07.669576","diff":null,"before":"\r\ndef repeated(f, n):\r\n    result, i = f, 1\r\n    while i<=n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-09T07:55:07.669576","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    result, i = identity, 1\r\n    while i<=n:\r\n        result = compose1(f, result)\r\n        i += 1\r\n    return result\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1060,"date":"2016-02-14 17:45:13.221537","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"20","SubmissionTime":"2016-02-14T17:45:13.221537","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in repeated","    return compose1(repeated(f,n-1),f)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-08 20:24:11.325683","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def function(x):\r\n        def repeat(n):\r\n            if n==0:\r\n                return x\r\n            return f(repeat(n-1))\r\n        return repeat\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"6","SubmissionTime":"2016-02-08T20:24:11.325683","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def function(x):\r\n        def repeat(n):\r\n            if n==0:\r\n                return x\r\n            return f(repeat(n-1))\r\n        return repeat(n)\r\n    return function\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-repeat, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(FunctionDefinitionNode-repeat, TChildren(LeafWildcard(\"ParameterNode\"), TChild(Node(SuiteStatementNode, TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","<function repeated.<locals>.function.<locals>.repeat at 0x0000025AF6217D90>","","# Error: expected","#     8","# but got","#     <function repeated.<locals>.function.<locals>.repeat at 0x0000025AF6217D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":578,"date":"2016-02-11 13:21:36.487579","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def lo_repeated(input_lo):\r\n        loop_lo, result = 1, input_lo\r\n        while loop_lo<=n:\r\n            result, loop_lo = f(result), loop_lo+1\r\n    return lo_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-11T13:21:36.487579","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def lo_repeated(input_lo):\r\n        loop_lo, result = 1, input_lo\r\n        while loop_lo<=n:\r\n            result, loop_lo = f(result), loop_lo+1\r\n        return result\r\n    return lo_repeated\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-result))), -1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","","# Error: expected","#     8","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":960,"date":"2016-02-15 23:16:53.645847","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return 0\r\n    if n==1:\r\n        return f(1)\r\n    if n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"20","SubmissionTime":"2016-02-15T23:16:53.645847","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f(1)\r\n    if n==2:\r\n        return compose1(f, f)\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","TypeError: 'int' object is not callable","","# Error: expected","#     5","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-15 21:24:14.117102","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compute(x):\r\n        value = f(x)\r\n        i = 0\r\n        while i<n:\r\n            value = f(value)\r\n            i += 1\r\n        return value\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"7","SubmissionTime":"2016-02-15T21:24:14.117102","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def compute(x):\r\n        value = identity(x)\r\n        i = 0\r\n        while i<n:\r\n            value = f(value)\r\n            i += 1\r\n        return value\r\n    return compute\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":94,"date":"2016-02-10 17:43:32.917248","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    for _ in range(0, n):\r\n        g = compose1(g, f)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"2","SubmissionTime":"2016-02-10T17:43:32.917248","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    g = identity\r\n    for _ in range(0, n):\r\n        g = compose1(g, f)\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":1039,"date":"2016-02-16 15:59:19.696043","diff":null,"before":"\r\ndef repeated(f, n):\r\n    func = f\r\n    m = 0\r\n    if m==n:\r\n        return identity\r\n    while m<n:\r\n        func = compose1(func, f)\r\n        m += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T15:59:19.696043","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    func = identity\r\n    m = 0\r\n    if m==n:\r\n        return identity\r\n    while m<n:\r\n        func = compose1(func, f)\r\n        m += 1\r\n    return func\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":690,"date":"2016-02-10 08:29:46.306413","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"4","SubmissionTime":"2016-02-10T08:29:46.306413","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    return compose1(f, repeated(f, n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 33, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":752,"date":"2016-02-10 19:50:46.523330","diff":null,"before":"\r\ndef repeated(f, n):\r\n    i, x = 1, identity\r\n    while i<=n:\r\n        x = compose(f, x)\r\n        i += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-10T19:50:46.52333","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    i, x = 1, identity\r\n    while i<=n:\r\n        x = compose1(f, x)\r\n        i += 1\r\n    return x\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(LeafWildcard(\"ArgNode\"))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 35, in repeated","    x = compose(f,x)","NameError: name 'compose' is not defined","","# Error: expected","#     ","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":809,"date":"2016-02-08 09:56:53.730302","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-08T09:56:53.730302","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose1(f, repeated(f, n-1))\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in repeated","    return compose1(f, repeated(f, n - 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 09:51:25.837517","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"8","SubmissionTime":"2016-02-08T09:51:25.837517","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n = n-1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-13 12:16:30.486176","diff":null,"before":"\r\ndef repeated(f, n):\r\n    counter = n\r\n    def function(x):\r\n        if counter==0:\r\n            return x\r\n        else:\r\n            counter -= 1\r\n            return f(function(x))\r\n    return function","after":null,"remaining":"8","SubmissionTime":"2016-02-13T12:16:30.486176","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    counter = n\r\n    def function(x):\r\n        if counter==0:\r\n            return x\r\n        else:\r\n            return f(repeated(f, n-1)(x))\r\n    return function","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-repeated), Children(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-f))), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in function","    if counter == 0:","UnboundLocalError: local variable 'counter' referenced before assignment","","# Error: expected","#     8","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":83,"date":"2016-02-15 21:44:59.519400","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose(f, repeated(f, n-1))","after":null,"remaining":"6","SubmissionTime":"2016-02-15T21:44:59.5194","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    def compose(f, g):\r\n        def h(x):\r\n            return f(g(x))\r\n        return h\r\n    if n==1:\r\n        return f\r\n    else:\r\n        return compose(f, repeated(f, n-1))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in repeated","    return compose(f,repeated(f,n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in repeated","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     5","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":271,"date":"2016-02-13 20:44:16.328180","diff":null,"before":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        count = n\r\n        if n==0:\r\n            return x\r\n        while count>0:\r\n            if x==1:\r\n                return f(x)\r\n            x = compose1(f, f)(x)\r\n            count -= 2\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-13T20:44:16.32818","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    def repeater(x):\r\n        count = n\r\n        if n==0:\r\n            return x\r\n        while count>0:\r\n            if count==1:\r\n                return f(x)\r\n            x = compose1(f, f)(x)\r\n            count -= 2\r\n        return x\r\n    return repeater\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-count)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","9","","# Error: expected","#     8","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":609,"date":"2016-02-10 20:39:15.127129","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(compose1(f, f), n-1)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"11","SubmissionTime":"2016-02-10T20:39:15.127129","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return lambda x: x\r\n    else:\r\n        return compose1(repeated(f, n-1), f)\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-compose1)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-repeated)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-f)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast)))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 45, in h","    return f(g(x))","TypeError: 'int' object is not callable","","# Error: expected","#     8","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":310,"date":"2016-02-08 16:18:47.917472","diff":null,"before":"\r\ndef repeated(f, n):\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"3","SubmissionTime":"2016-02-08T16:18:47.917472","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    g = f\r\n    while n>1:\r\n        g = compose1(f, g)\r\n        n -= 1\r\n    return g\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(NameExpressionNode-identity)))))))))), 1), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"SuiteStatementNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","25","","# Error: expected","#     5","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":0,"studentId":93,"date":"2016-02-16 13:55:08.644016","diff":null,"before":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return x\r\n    else:\r\n        total = f\r\n        while n>1:\r\n            total = compose1(f, total)\r\n            n -= 1\r\n        return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","after":null,"remaining":"1","SubmissionTime":"2016-02-16T13:55:08.644016","SynthesizedAfter":"\r\ndef repeated(f, n):\r\n    if n==0:\r\n        return identity\r\n    else:\r\n        total = f\r\n        while n>1:\r\n            total = compose1(f, total)\r\n            n -= 1\r\n        return total\r\ndef compose1(f, g):\r\n    def h(x):\r\n        return f(g(x))\r\n    return h","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-identity)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for repeated","",">>> from hw02 import *",">>> add_three = repeated(increment, 3)",">>> add_three(5)","8",">>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1","243",">>> repeated(square, 2)(5) # square(square(5))","625",">>> repeated(square, 4)(5) # square(square(square(square(5))))","152587890625",">>> repeated(square, 0)(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 34, in repeated","    return x","NameError: name 'x' is not defined","","# Error: expected","#     5","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]}]